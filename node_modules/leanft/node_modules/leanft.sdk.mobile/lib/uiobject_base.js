// (c) Copyright 2015 Hewlett Packard Enterprise Development LP

var Core = require("leanft.sdk.core");
var SwipeDirection = Core.SwipeDirection;
var TestObjectBase = Core.TestObjectBase;
var DescriptionBase = Core.DescriptionBase;
var Utils = Core.ObjectUtils;
var Convert = Core.Convert;
var Location = Core.Location;
var Point = Core.Point;
var RectLocation = Core.RectLocation;

/**
 * Mobile namespace
 * @namespace Mobile
 */

/**
 * @ignore
 * @constructor
 * @memberof Mobile
 * @mixes DescriptionBase
 */
function UiObjectBaseDescription(leanFTType){
    this._init({
        technology: "Mobile",
        leanftType: leanFTType
    });
}


Utils.inherit(UiObjectBaseDescription, DescriptionBase, {
    /**
     * The accessibility ID of the mobile object.
     * @param {string} [id] When provided, this method acts as a setter and sets the accessibilityId.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored accessibilityId; 
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.UiObjectBaseDescription#
     */
    accessibilityId: function(id){
        return this._propertyHandler("accessibilityId", id);
    },
    /**
     * The test object class name used by Mobile Center.
     * @param {string} [name] When provided, this method acts as a setter and sets the className.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored className; 
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.UiObjectBaseDescription#
     */
    className: function(name) {
        return this._propertyHandler("class", name);
    },
    /**
     * The container information if the object is in a table (iOS only).
     * @param {string} [cont] When provided, this method acts as a setter and sets the container.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored container; 
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.UiObjectBaseDescription#
     */
    container: function(cont){
        return this._propertyHandler("container", cont);
    },
    /**
     * An ordinal number assigned to the object to indicate the order in which the object appears on the device relative to other objects with an otherwise identical description.
     * @param {number} [index] When provided, this method acts as a setter and sets the mobileCenterIndex.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored mobileCenterIndex;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.UiObjectBaseDescription#
     */
    mobileCenterIndex: function(index){
        return this._propertyHandler("mcIndex", index);
    },
    /**
     * The resource ID of the object. (Android only)
     * @param {string} [id] When provided, this method acts as a setter and sets the resourceId.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored resourceId;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.UiObjectBaseDescription#
     */
    resourceId: function(id){
        return this._propertyHandler("resourceId", id);
    }
});

/**
 * @memberof Mobile
 * @constructor
 * @extends TestObjectBase
 */
function UiObjectBaseTestObject(nativeClass,session,description){
    this._init(nativeClass,session,description);
}

Utils.inherit(UiObjectBaseTestObject, TestObjectBase, {
    /**
     * The accessibility ID of the mobile object.
     * @returns {Promise<string>} a promise that is fulfilled with the accessibility ID of the mobile object.
     * @memberof Mobile.UiObjectBaseTestObject#
     */
    accessibilityId: function(){
        return this._getROProperty("accessibilityId", arguments);
    },
    /**
     * The test object class name used by Mobile Center.
     * @returns {Promise<string>} a promise that is fulfilled with the test object class name used by Mobile Center.
     * @memberof Mobile.UiObjectBaseTestObject#
     */
    className: function(){
        return this._getROProperty("class", arguments);
    },
    /**
     * Information about the table container, if the object is in a table. (iOS only)
     * @returns {Promise<string>} a promise that is fulfilled with the information about the table container, if the object is in a table. (iOS only)
     * @memberof Mobile.UiObjectBaseTestObject#
     */
    container: function(){
        return this._getROProperty("container", arguments);
    },
    /**
     * Indicates whether the object can be tapped.
     * @returns {Promise<bool>} a promise that is fulfilled with an indication of whether the object can be tapped.
     * @memberof Mobile.UiObjectBaseTestObject#
     */
    isClickable: function(){
        return this._getROProperty("isClickable", arguments);
    },
    /**
     * Indicates whether the mobile object is enabled.
     * @returns {Promise<bool>} a promise that is fulfilled with an indication of whether the mobile object is enabled.
     * @memberof Mobile.UiObjectBaseTestObject#
     */
    isEnabled: function(){
        return this._getROProperty("isEnabled", arguments);
    },
    /**
     * Indicates whether the mobile object is in focus.
     * @returns {Promise<bool>} a promise that is fulfilled with an indication of whether the mobile object is in focus.
     * @memberof Mobile.UiObjectBaseTestObject#
     */
    isFocused: function(){
        return this._getROProperty("isFocused", arguments);
    },
    /**
     * Indicates whether the object is focusable.
     * @returns {Promise<bool>} a promise that is fulfilled with an indication of whether the object is focusable.
     * @memberof Mobile.UiObjectBaseTestObject#
     */
    isFocusable: function(){
        return this._getROProperty("isFocusable", arguments);
    },
    /**
     * The native class of the mobile object.
     * @returns {Promise<string>} a promise that is fulfilled with the native class of the mobile object.
     * @memberof Mobile.UiObjectBaseTestObject#
     */
    nativeClass: function(){
        return this._getROProperty("nativeClass", arguments);
    },
    /**
     * The resource ID of the object. (Android only)
     * @returns {Promise<string>} a promise that is fulfilled with the resource ID of the object. (Android only)
     * @memberof Mobile.UiObjectBaseTestObject#
     */
    resourceId: function(){
        return this._getROProperty("resourceId", arguments);
    },
    /**
     * The location of the mobile object, format: {x: 0, y: 0}
     * @returns {Promise<Point>} a promise that is fulfilled with the location of the mobile object.
     * @memberof Mobile.UiObjectBaseTestObject#
     */
    location: function(){
        return this._getROProperties("left", "top").then(function(pos){
            var left = Convert.toNumber(pos[0]),
                top = Convert.toNumber(pos[1]);
            return{
                x: left,
                y: top
            };
        });
    },
    /**
     * The size of the mobile object, format: {width: 0, height: 0}
     * @returns {Promise<Size>} a promise that is fulfilled with the size of the mobile object.
     * @memberof Mobile.UiObjectBaseTestObject#
     */
    size: function(){
        return this._getROProperties("left", "top", "right", "bottom").then(function(pos){
            var left = Convert.toNumber(pos[0]),
                top = Convert.toNumber(pos[1]),
                right = Convert.toNumber(pos[2]),
                bottom = Convert.toNumber(pos[3]);
            return{
                width: right - left,
                height: bottom - top
            };
        });
    },
    /*jshint eqnull:true */
    /**
     * Taps the center of the object.
     * @param {Object} [tapArgs] Arguments object that defines the behavior of the tap operation.
     * @param {number} [tapArgs.numberOfTaps = 1] The number of times to tap the object (iOS only).
     * @param {Location} [tapArgs.location] The location where the operation is performed.
     * @param {number} [tapArgs.numberOfTouchPoints = 1] The number of points to tap, similar to the number of fingers you would use for the gesture on a real device. (iOS only)
     * @param {string} [tapArgs.gesture = ""] The gesture class designed by the mobile application developer to handle this gesture on this object. (iOS only)
     * @returns {Promise<void>} a promise that is fulfilled after tapping the center of the object or the specific location defined by the user.
     * @memberof Mobile.UiObjectBaseTestObject#
     */
    tap: function(tapArgs){

        if(tapArgs == null)
            return this._executeWithEvents(arguments, "Tap");

        if(typeof tapArgs !== "object")
            throw new Error("Only object allowed to be passed to tap() method");

        tapArgs.numberOfTaps = tapArgs.numberOfTaps == null ? 1 : tapArgs.numberOfTaps;
        tapArgs.numberOfTouchPoints = tapArgs.numberOfTouchPoints == null ? 1 : tapArgs.numberOfTouchPoints;
        tapArgs.gesture = tapArgs.gesture == null ? "" : tapArgs.gesture;

        return this._executeWithEvents(arguments, "Tap",
            RectLocation(tapArgs.location),
            Convert.toNumber(tapArgs.numberOfTaps),
            Convert.toNumber(tapArgs.numberOfTouchPoints),
            Convert.toString(tapArgs.gesture));

    },
    /*jshint eqnull:true */
    /**
     * Taps and holds the object for a short time.
     * @param {Object} [longPressArgs] Arguments object that defines the behavior of the longPress operation.
     * @param {number} [longPressArgs.duration = 0] The number of seconds to continue pressing (iOS only).
     * @param {number} [longPressArgs.numberOfTouchPoints = 1] The number of points to tap, similar to the number of fingers you would use for the gesture on a real device. (iOS only)
     * @param {Location} [longPressArgs.location] The location where the operation is performed.
     * @param {string} [longPressArgs.gesture = ""] The gesture class designed by the mobile application developer to handle this gesture on this object. (iOS only)
     * @returns {Promise<void>} a promise that is fulfilled after long-pressing the center of the object or the specific location defined by the user.
     * @memberof Mobile.UiObjectBaseTestObject#
     */
    longPress: function(longPressArgs){

        if(longPressArgs == null)
            return this._executeWithEvents(arguments, "LongPress");

        if(typeof longPressArgs !== "object")
            throw new Error("Only object is allowed to pass to longPress() method");

        longPressArgs.duration = longPressArgs.duration == null ? 0 : longPressArgs.duration;
        longPressArgs.numberOfTouchPoints = longPressArgs.numberOfTouchPoints == null ? 1 : longPressArgs.numberOfTouchPoints;
        longPressArgs.gesture = longPressArgs.gesture == null ? "" : longPressArgs.gesture;

        return this._executeWithEvents(arguments, "LongPress",
            RectLocation(longPressArgs.location),
            Convert.toNumber(longPressArgs.duration),
            Convert.toNumber(longPressArgs.numberOfTouchPoints),
            Convert.toString(longPressArgs.gesture));

    },
    /*jshint eqnull:true */
    /**
     * Swipes the object in the specified direction.
     * @param {SwipeDirection} swipeDirection The direction of the swipe.
     * @param {object} [swipeArgs] Arguments object that defines the behavior of the swipe operation, format:
     * @param {Location} [swipeArgs.location] The location where the operation is performed.
     * @param {string} [swipeArgs.gesture = ""] The gesture class designed by the mobile application developer to handle this gesture on this object. (iOS only)
     * @returns {Promise<void>} a promise that is fulfilled after the swipe has occurred.
     * @memberof Mobile.UiObjectBaseTestObject#
     */
    swipe: function(swipeDirection, swipeArgs){

        if(swipeDirection == null)
            throw new Error("You must supply swipe direction to swipe() method");

        if(typeof swipeDirection !== "string")
            throw new Error("The swipe direction must be a string type");

        var swipeDirectionString = swipeDirection.toString().toLowerCase();

        if(swipeArgs == null)
            return this._executeWithEvents(arguments, "Swipe", swipeDirectionString);

        if(typeof swipeArgs !== "object")
            throw new Error("Only object is allowed to pass to swipe() method");

        swipeArgs.gesture = swipeArgs.gesture == null ? "" : swipeArgs.gesture;

        return this._executeWithEvents(arguments, "Swipe", swipeDirectionString, RectLocation(swipeArgs.location), Convert.toString(swipeArgs.gesture));

    },
    /*jshint eqnull:true */
    /**
     * Performs a pinch gesture on the object (iOS only).
     * @param {number} scale The scale for the pinch gesture. This number is the ratio between the start distance and the end distance between the two touch points used for the pinch.
     * For example, if you were to touch a screen with your fingers 6 cm apart, and pinch until your fingers were 3 cm apart, the scale would be 0.5.
     * @param [pinchArgs] Arguments object that defines the behavior of the pinch operation.
     * @param {number} [pinchArgs.velocity] The speed at which to perform the pinch operation.
     * @param {Location} [pinchArgs.location] The location at which to perform operation.
     * @param {string} [pinchArgs.gesture = ""] The gesture class designed by the mobile application developer to handle this gesture on this object. (iOS only)
     * @returns {Promise<void>} a promise that is fulfilled after the pinch has occurred.
     * @memberof Mobile.UiObjectBaseTestObject#
     */
    pinch: function(scale, pinchArgs){
        if(scale == null)
            throw new Error("You must supply scale value to pinch() method");

        scale = Convert.toNumber(scale);

        if(pinchArgs == null)
            return this._executeWithEvents(arguments, "Pinch", scale);

        if(typeof pinchArgs !== "object")
            throw new Error("Only object is allowed to pass to pinch() method");

        pinchArgs.gesture = pinchArgs.gesture == null ? "" : pinchArgs.gesture;
        pinchArgs.velocity = pinchArgs.velocity == null ? null : Convert.toNumber(pinchArgs.velocity);

        return this._executeWithEvents(arguments, "Pinch", scale, pinchArgs.velocity, Location(pinchArgs.location), Convert.toString(pinchArgs.gesture));
    },

    /*jshint eqnull:true */
    /**
     * Performs a pan gesture on the object, by location (iOS Only).
     * @param {Location} start The location at which to start the pan gesture.
     * @param {Location} end The location at which to end the pan gesture.
     * @returns {Promise<void>} a promise that is fulfilled after the pan operation has occurred.
     * @memberof Mobile.UiObjectBaseTestObject#
     */
    panByLocations: function(start, end){
        if(start == null || end == null)
            throw new Error("You must pass start and end objects to panByLocation() method");

        return this._executeWithEvents(arguments, "Pan", Location(start), Location(end));
    },

    /*jshint eqnull:true */
    /**
     * Performs a pan gesture on the object, using points (iOS Only).
     * @param {Point} start The point at which to start the pan gesture.
     * @param {Point} end The point at which to end the pan gesture.
     * @param {Object} [panArgs] Arguments object that defines the behavior of the pan operation:
     * @param {number} [panArgs.velocity] The speed at which to perform the pan operation.
     * @param {string} [panArgs.gesture = ""] The gesture class designed by the mobile application developer to handle this gesture on this object. (iOS Only)
     * @returns {Promise<void>} a promise that is fulfilled after the pan operation has occurred.
     * @memberof Mobile.UiObjectBaseTestObject#
     */
    panByPoints: function(start, end, panArgs){
        if(start == null || end == null)
            throw new Error("You must pass start and end objects to panByPoints() method");

        if(panArgs != null && typeof panArgs !== "object")
            throw new Error("panArgs must be an object");

        start = Point(start);
        end = Point(end);

        panArgs.gesture = panArgs.gesture == null ? "" : panArgs.gesture;
        panArgs.velocity = panArgs.velocity == null ? null : Convert.toNumber(panArgs.velocity);

        if(panArgs.velocity != null && panArgs.velocity <= 0)
            throw new Error("velocity must be a positive number");

        var xVelocity = -9999, yVelocity = -9999;

        if(panArgs.velocity != null){
            var velocity = panArgs.velocity,
                lengthX = end.X - start.X,
                lengthY = end.Y - start.Y,
                length = Math.sqrt(lengthX*lengthX + lengthY*lengthY);

            if(length === 0)
                throw new Error("Start location and end location are the same");

            var ratio = velocity / length;

            xVelocity = lengthX * ratio;
            yVelocity = lengthY * ratio;
        }

        return this._executeWithEvents(arguments, "Pan", start, end, xVelocity, yVelocity, Convert.toString(panArgs.gesture));
    }

});

module.exports.UiObjectBaseTestObject = UiObjectBaseTestObject;
module.exports.UiObjectBaseDescription = UiObjectBaseDescription;
// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // hZ7r41g/EvSoMsMS33779TPr9RQkBQfa7iCn+kzQi2Cg
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCDN
// SIG // Rzg2cZDXsZbpWi45maLeynMeqVxLDrMDdX/HJ3MNVjAN
// SIG // BgkqhkiG9w0BAQEFAASCAQAP2CRq4YXtJXUV80K9tX07
// SIG // uKEkL1fV7uKyzdULTaCNdgGgTtBrRdhFOSP0+meq7jet
// SIG // /r8ynm539z+/UxnOAI2ewLzOc6pJvjVQ0vgr7MhZ6bfu
// SIG // 9RmV7RnIdZJp480VvakWEWTTcCaRfk56vuDSk9wcHYf0
// SIG // +HMRXRIgr0x/lU+Pz2qtzQzjTjX0jhSKNc1iiHQ33UUD
// SIG // en+FP/UC0QsQDYSJ9naEGQFn3l9/PGUHCNNuVn9ihEeL
// SIG // JUzVEgW88Iwoa8Y+fuO3uC9o5CeNVrISNbJDJSeRg3T4
// SIG // YFrqijdQW5VlTRLAMvaU4CyOZdcerc4u4X4o98gJsc6a
// SIG // vymtkexn96qhoYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MTkzN1owIwYJKoZI
// SIG // hvcNAQkEMRYEFM67rSsXurwoXrAKmGguxlo1WusbMA0G
// SIG // CSqGSIb3DQEBAQUABIIBAJ6PGSsblr+SsY9UyeGxXAYc
// SIG // vOwcCjQcnvgGIoxHTVdRXzEgNcbCeI6xUbEh0OxljurZ
// SIG // nDEnTyTUaW8eaANocEhWN7Q6PD9MIvrQZ9oqPUamy4dL
// SIG // 5fbQOXKiMxcle8g69BdQs5v03937+TmZB2xEbI5L0It1
// SIG // x4JW2JZknUuwRJUX4hA4N9LiHJoKOc/krrQ3pDJO8leq
// SIG // vy49LQYLsQBppPP4WMbnyZrI4t9ZAC4W9GNERRIFh5Rv
// SIG // OS/oL2ADqEslPRKhaXQ6x1X9rzL67UOS+75btR98djlT
// SIG // Ekht0yFIYyEAyDGRCiwZgxRMB16ePNNDdBD5tvuMSRPU
// SIG // +sw/TclJ26c=
// SIG // End signature block
