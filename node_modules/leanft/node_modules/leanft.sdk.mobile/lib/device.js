// (c) Copyright 2015 Hewlett Packard Enterprise Development LP
/**
 * Created  on 13/12/2015.
 */

var Core = require("leanft.sdk.core");
var TestObjectBase = Core.TestObjectBase;
var DescriptionBase = Core.DescriptionBase;
var ObjectUtils = Core.ObjectUtils;
var Convert = Core.Convert;
var RectLocation = Core.RectLocation;
var Logger = Core.Logger;
var SwipeDirection = Core.SwipeDirection;

/**
 * Device orientation settings.
 * @enum
 */
var DeviceOrientation = {
    /**
     * Sets device in portrait mode.
     */
    portrait: "portrait",
    /**
     * Sets device in landscape mode.
     */
    landscape: "landscape",

    _convertToRuntime: {
        portrait: "Portrait",
        landscape: "LandscapeRight"
    },

    _convert: function(orientation) {
        return DeviceOrientation._convertToRuntime[orientation.toLowerCase()];
    }
};

/**
 * The description of a CheckBox test object in a mobile application.
 * @param {Object} [props] Initializes a WebElement test object using the supplied property bag.
 * @returns {Device} the description object that was initialized.
 * @constructor
 * @memberof Mobile
 * @mixes DescriptionBase
 */
function Device(props){
    return new DeviceDescription(props);
}

function DeviceDescription(props) {
    this._init({
        technology: "Mobile",
        leanftType: "Device"
    });


    this._defineByPropertyBag(props);
}

/**
 * @ignore
 */
ObjectUtils.inherit(DeviceDescription,DescriptionBase,{
    /**
     * The device ID used by Mobile Center.
     * @param {string} [id] When provided, this method acts as a setter and sets the identifier value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored identifier value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.Device#
     */
    id: function(id) {
        return this._simplePropertyHandler("id", id);
    },

    /**
     * The logical name that Mobile Center uses to identify the device.
     * @param {string} [name] When provided, this method acts as a setter and sets the name value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored name value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.Device#
     */
    name: function(name) {
        return this._simplePropertyHandler("name", name);
    },

    /**
     * The operating system currently running on the device.
     * @param {string} [osType] When provided, this method acts as a setter and sets the osType value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored osType value.
     * Otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.Device#
     */
    osType: function(osType) {
        return this._simplePropertyHandler("ostype", osType);
    },

    /**
     * The operating system version currently running on the device.
     * @param {string} [osVersion] When provided, this method acts as a setter and sets the osVersion value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored osVersion value.
     * Otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.Device#
     */
    osVersion: function(osVersion) {
        return this._simplePropertyHandler("osversion", osVersion);
    }
});

/**
 * Device orientation settings.
 * @class DeviceTO
 * @memberof Mobile
 * @constructor
 * @extends TestObjectBase
 */
function DeviceTO(cookie, session) {
    if(cookie === null)
        throw new Error("Device cannot be created without cookie!");

    this._logger = new Logger("Device");
    this._cookie = cookie;
    this._init("Device",session);
}

/**
 * @ignore
 */
ObjectUtils.inherit(DeviceTO,TestObjectBase,{
    /**
     * Returns the ID of the device in the Mobile Center lab.
     * @returns {Promise<string>} a promise that is fulfilled with the ID of the device in the Mobile Center lab.
     * @memberof Mobile.DeviceTO#
     */
    id: function() {
        return this._getROProperty("id", arguments);
    },

    /**
     * Returns the model name of the device.
     * @returns {Promise<string>} a promise that is fulfilled with the model name of the device.
     * @memberof Mobile.DeviceTO#
     */
    model: function() {
        return this._getROProperty("Model", arguments);
    },

    /**
     * Returns the manufacturer of the device.
     * @returns {Promise<string>} a promise that is fulfilled with the manufacturer of the device.
     * @memberof Mobile.DeviceTO#
     */
    manufacturer: function() {
        return this._getROProperty("Manufacturer", arguments);
    },

    /**
     * Returns the operating system currently running on the device.
     * @returns {Promise<string>} a promise that is fulfilled with the operating system currently running on the device.
     * @memberof Mobile.DeviceTO#
     */
    osType: function() {
        return this._getROProperty("osType", arguments);
    },

    /**
     * Returns the operating system version currently running on the device.
     * @returns {Promise<string>} a promise that is fulfilled with the operating system version currently running on the device.
     * @memberof Mobile.DeviceTO#
     */
    osVersion: function() {
        return this._getROProperty("osVersion", arguments);
    },

    /**
     * Returns the name of the device as defined in Mobile Center.
     * @returns {Promise<string>} a promise that is fulfilled with the name of the device as defined in Mobile Center.
     * @memberof Mobile.DeviceTO#
     */
    name: function() {
        return this._getROProperty("name", arguments);
    },

    /**
     * Presses the device's Home button (Android only).
     * @returns {Promise<void>} a promise that is fulfilled when the Home button is pressed.
     * @memberof Mobile.DeviceTO#
     */
    home: function() {
        return this._executeWithEvents(arguments, "Home");
    },

    /**
     * Presses the device's Back button (Android only).
     * @returns {Promise<void>} a promise that is fulfilled when the Back button is pressed.
     * @memberof Mobile.DeviceTO#
     */
    back: function() {
        return this._executeWithEvents(arguments, "Back");
    },

    /**
     * Presses the device's Menu button (Android only).
     * @returns {Promise<void>} a promise that is fulfilled when the Menu button is pressed.
     * @memberof Mobile.DeviceTO#
     */
    menu: function() {
        return this._executeWithEvents(arguments, "Menu");
    },

    /**
     * Opens the list of recent applications (Android only).
     * @returns {Promise<void>} a promise that is fulfilled when the list of recent applications is opened.
     * @memberof Mobile.DeviceTO#
     */
    recentApps: function() {
        return this._executeWithEvents(arguments, "RecentApps");
    },

    /**
     * Sets the device orientation.
     * @param {DeviceOrientation} orientation The orientation to set. You can use the DeviceOrientation object or just pass 'portrait' or 'landscape' as a string.
     * @returns {Promise<void>} a promise that is fulfilled when the device orientation is set.
     * @memberof Mobile.DeviceTO#
     */
    setOrientation: function(orientation) {
        return this._executeWithEvents(arguments, "SetOrientation", DeviceOrientation._convert(orientation));
    },

    /*jshint eqnull:true */
    /**
     * Touches the device at the specified coordinates (Android only).
     * @param {number} x The x coordinate to touch.
     * @param {number} y The y coordinate to touch.
     * @returns {Promise<void>} a promise that is fulfilled when the touch operation is performed.
     * @memberof Mobile.DeviceTO#
     */
    touch: function(x,y) {
        if(x == null || y == null)
            throw new Error("You must pass x and y (number) as arguments");

        return this._executeWithEvents(arguments, "Touch", Convert.toNumber(x), Convert.toNumber(y));
    },

    /**
     * Swipes the device in the specified direction starting from the specified location.
     * @param {SwipeDirection} direction The direction of the swipe (the SwipeDirection object can be used).
     * @param {Location} [startLocation] The coordinates from which to start the swipe. Default value: center of the device.
     * @returns {Promise<void>} a promise that is fulfilled when the swipe operation is performed.
     * @memberof Mobile.DeviceTO#
     */
    swipe: function(direction, startLocation) {
        if(direction == null) {
            throw new Error("direction must be provided");
        }

        if(startLocation == null) {
            return this._executeWithEvents(arguments, "Swipe", SwipeDirection._convert(direction));
        }

        return this._executeWithEvents(arguments, "Swipe", SwipeDirection._convert(direction), RectLocation(startLocation));
    },

    /**
     * Simulates a change in the device's GPS location (Android only).
     * @param {number} latitude The latitude coordinate of the location.
     * @param {number} longitude The longitude coordinate of the location.
     * @returns {Promise<void>} a promise that is fulfilled when the GPS location is changed.
     * @memberof Mobile.DeviceTO#
     */
    simulateGPS: function(latitude, longitude) {
        if(latitude == null || longitude == null) {
            throw new Error("latitude and longitude must be provided");
        }

        return this._executeWithEvents(arguments, "GPSRelocate", Convert.toNumber(latitude), Convert.toNumber(longitude));
    },

    _prepareEventResponseArgs: function(argsObj) {
        return {
            timeInBackground: argsObj.timeInBackground != null ?
                Convert.toNumber(argsObj.timeInBackground) : 10,
            respondToEvent: argsObj.respondToEvent != null ?
                Convert.toBool(argsObj.respondToEvent) : false
        };
    },

    /**
     * Simulates an incoming call.
     * @param {string} from The caller ID of the incoming call.
     * @param {object} [eventResponseArgs] The simulated user response to the incoming call that interrupts the flow of the application.
     * @param {number} [eventResponseArgs.timeInBackground = 10] The time (in seconds) that the application remains in the background while the event is being handled.
     * @param {bool}   [eventResponseArgs.respondToEvent = false] Indicates whether there is a response to the simulated event. Default: false.
     * @returns {Promise<void>} a promise that is fulfilled when the call is simulated.
     * @memberof Mobile.DeviceTO#
     */
    simulateIncomingCall: function(from, eventResponseArgs) {
        if(from == null) {
            throw new Error("from must be provided");
        }

        if(eventResponseArgs == null) {
            return this._executeWithEvents(arguments, "IncomingCall", from);
        }

        var eventArgs = this._prepareEventResponseArgs(eventResponseArgs);

        return this._executeWithEvents(arguments, "IncomingCall", from, eventArgs.timeInBackground, eventArgs.respondToEvent);
    },

    /**
     * Simulates an incoming SMS.
     * @param {string} from The caller ID of the incoming SMS message.
     * @param {string} text The text of the incoming SMS message.
     * @param {object} [eventResponseArgs] The simulated user response to the incoming SMS that interrupts the flow of the application.
     * @param {number} [eventResponseArgs.timeInBackground = 10] The time (in seconds) that the application remains in the background while the event is being handled.
     * @param {bool} [eventResponseArgs.respondToEvent = false] Indicates whether there is a response to the simulated event. Default: false.
     * @returns {Promise<void>} a promise that is fulfilled when the incoming SMS is simulated.
     * @memberof Mobile.DeviceTO#
     */
    simulateIncomingSMS: function(from, text, eventResponseArgs) {
        if(from == null || text == null) {
            throw new Error("from and text arguments must be provided");
        }

        if(eventResponseArgs == null) {
            return this._executeWithEvents(arguments, "IncomingSMS", from, text);
        }

        var eventArgs = this._prepareEventResponseArgs(eventResponseArgs);

        return this._executeWithEvents(arguments, "IncomingSMS", from, text, eventArgs.timeInBackground, eventArgs.respondToEvent);
    },

    /**
     * Starts the Network Virtualization service using the specified network profile.
     * @param {string} profile The name of the profile containing the conditions that you want to apply to the virtualized network. The profile must be set up in Network Virtualization.
     * @returns {Promise<void>} a promise that is fulfilled when the Network Virtualization service is started.
     * @memberof Mobile.DeviceTO#
     */
    networkVirtualizationStart: function(profile) {
        if(profile == null) {
            throw new Error("profile must be provided");
        }

        return this._executeWithEvents(arguments, "StartNV", profile);
    },

    /**
     * Stops the Network Virtualization service.
     * @returns {Promise<void>} a promise that is fulfilled when the Network Virtualization service is stopped.
     * @memberof Mobile.DeviceTO#
     */
    networkVirtualizationEnd: function() {
        return this._executeWithEvents(arguments, "StopNV");
    },

    /**
     * Performs a Shake gesture on the device (iOS only).
     * @returns {Promise<void>} a promise that is fulfilled when the Shake gesture is performed.
     * @memberof Mobile.DeviceTO#
     */
    shake: function() {
        return this._executeWithEvents(arguments, "Shake");
    },

    /**
     * Opens an RDP window for the device. <br/>
     * Note: If a window for the device is open already, another window will not be opened.
     * @returns {Promise<void>} a promise that is fulfilled when an RDP window for the device is opened.
     * @memberof Mobile.DeviceTO#
     */
    openViewer: function() {
        return this._executeWithEvents(arguments, "OpenViewer");
    },

    /**
     * Closes the RDP window for the device (if open).<br/>
     * Note: Calling this method does not release the device if it is locked.
     * @returns {Promise<void>} a promise that is fulfilled when the RDP window for the device is closed.
     * @memberof Mobile.DeviceTO#
     */
    closeViewer: function() {
        return this._executeWithEvents(arguments, "CloseViewer");
    },

    /**
     * Checks if the RDP window for the device is open.
     * @returns {Promise<bool>} a promise that is fulfilled with an indication of whether an RDP window for the device is open.
     * @memberof Mobile.DeviceTO#
     */
    isViewerOpen: function() {
        return this._executeWithEvents(arguments, "IsViewerOpen");
    },

    /**
     * Gets the device logs collected from the moment that the device was locked.
     * @returns {Promise<string>} a promise that is fulfilled with the device logs collected from the moment the device was locked.
     * @memberof Mobile.DeviceTO#
     */
    getLogs: function() {
        return this._executeWithEvents(arguments, "GetLogs");
    },

    /**
     * Unlocks the device in Mobile Center if the device is not locked by another device object.
     * This method also closes the RDP window.
     * @returns {Promise<void>} a promise that is fulfilled when the device is unlocked.
     * @memberof Mobile.DeviceTO#
     */
    unlock: function() {
        return this._executeWithEvents(arguments, "Unlock");
    }
});

//remove the index property for the device description
DeviceDescription.prototype.index = undefined;

module.exports.DeviceOrientation = DeviceOrientation;
module.exports.Device = Device;
module.exports.DeviceTO = DeviceTO;
module.exports.DeviceDescription = DeviceDescription;
// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // CoYD2ws91bjlLczEE6lzDU9LjfFOnesXYk8L6dn4Hryg
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCDF
// SIG // DLzRWH0WgyXvRTI31e8Jj3GWBcZ0chbK4pDKr/PKPTAN
// SIG // BgkqhkiG9w0BAQEFAASCAQAC/Ri8ilIe8ZBnijzFQs3g
// SIG // x4VoXQILAhiyHl5mKnYOpsenTa03CmQ7o5IrTSFrS+79
// SIG // 80mngBy0EjoLhk3M/rYuakDBA5lDoQaTjBQaK2M84FTl
// SIG // U67lRg2YDsGxCy5q+7D2CIwlpegyKXaaFSXW8qk03Swx
// SIG // U8/W8au+M3TLnoWk7VJvCLukjJHO4e9YeJb9r1rIw0VB
// SIG // SBz2btk9ktzCoS7hSXH+CFVZ4LdQVlIV/hBYWKPhEiAv
// SIG // CjT4AUSZKoztMF+1ydnYdbQ3YCsRIP2J2osYeJ8GFDVs
// SIG // KxmlUeC45G7egsFS51cLI1XTxuY2rBV40EIUSi5V/8UU
// SIG // Kjzm0MwIrnDKoYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MTgyMlowIwYJKoZI
// SIG // hvcNAQkEMRYEFILLoBl+jpL1vtukQQZ/9qIXA9FgMA0G
// SIG // CSqGSIb3DQEBAQUABIIBAIZ+UXMLMVbStoI2vnXPDfb2
// SIG // XR2X9UZL/Lpqr70XObSo3OEtQIO91ZbHyJ7AlLxV60Dw
// SIG // ehpkGRz2an6u7ZF2Vu3e0YAXDwNjZyoWWMsTXeN4ts5n
// SIG // VCtTbfO/9nuDVGKPgReL9TUV9x/kHVdl1y/2QpFlXTov
// SIG // 0aFXqrbcZgVqep1m5YyQt7Fmc7t+VHYU64YqxMnf2YBC
// SIG // lQULbkNdlc3gbSKcy4lQSLUkc7bAb6SjBcPLOby3ua0D
// SIG // F630iuZn7aFNrveTkMAVrrq93hbXloqxk4JeK9ZXjpxM
// SIG // 3DQXaGA9N/J3N1R4WHo7VTaWJFVodoNeF+ouA+SywBGi
// SIG // jxQbL3uL6XU=
// SIG // End signature block
