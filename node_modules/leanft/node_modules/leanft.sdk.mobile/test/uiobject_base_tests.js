// (c) Copyright 2015 Hewlett Packard Enterprise Development LP
/**
 * Created on 12/17/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var UiObjectBaseDesc = require("../lib/uiobject_base.js").UiObjectBaseDescription;
var UiObjectBaseTO = require("../lib/uiobject_base.js").UiObjectBaseTestObject;

describe("UiObjectBaseDescription",function() {
    var uiBaseDescObjUnderTest;
    beforeEach(function () {
        uiBaseDescObjUnderTest = new UiObjectBaseDesc();
    });

    describe("accessibilityId method",function() {
        it("should add 'accessibilityId' to _properties with the correct value when value is given",function(){
            uiBaseDescObjUnderTest.accessibilityId("#some-id");
            assert.strictEqual(uiBaseDescObjUnderTest._properties["accessibilityId"], "#some-id");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = uiBaseDescObjUnderTest.accessibilityId("#some-id");
            assert.strictEqual(result, uiBaseDescObjUnderTest);
        });
        it("should remove 'accessibilityId' from _properties when value is null",function(){
            uiBaseDescObjUnderTest._properties["accessibilityId"] = "#some-id";
            uiBaseDescObjUnderTest.accessibilityId(null);
            assert(!("accessibilityId" in uiBaseDescObjUnderTest._properties));
        });
        it("should return the value of 'accessibilityId' from _properties when value is not given",function(){
            uiBaseDescObjUnderTest._properties["accessibilityId"] = "#some-id";
            var accessibilityId = uiBaseDescObjUnderTest.accessibilityId();
            assert.equal(accessibilityId, "#some-id");
        });
    });

    describe("className method",function() {
        it("should add 'class' to _properties with the correct value when value is given",function(){
            uiBaseDescObjUnderTest.className(".some-class");
            assert.strictEqual(uiBaseDescObjUnderTest._properties["class"], ".some-class");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = uiBaseDescObjUnderTest.className(".some-class");
            assert.strictEqual(result, uiBaseDescObjUnderTest);
        });
        it("should remove 'accessibilityId' from _properties when value is null",function(){
            uiBaseDescObjUnderTest._properties["class"] = ".some-class";
            uiBaseDescObjUnderTest.className(null);
            assert(!("class" in uiBaseDescObjUnderTest._properties));
        });
        it("should return the value of 'class' from _properties when value is not given",function(){
            uiBaseDescObjUnderTest._properties["class"] = ".some-class";
            var className = uiBaseDescObjUnderTest.className();
            assert.equal(className, ".some-class");
        });
    });

    describe("container method",function() {
        it("should add 'container' to _properties with the correct value when value is given",function(){
            uiBaseDescObjUnderTest.container("some container");
            assert.strictEqual(uiBaseDescObjUnderTest._properties["container"], "some container");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = uiBaseDescObjUnderTest.container("some container");
            assert.strictEqual(result, uiBaseDescObjUnderTest);
        });
        it("should remove 'container' from _properties when value is null",function(){
            uiBaseDescObjUnderTest._properties["class"] = "some container";
            uiBaseDescObjUnderTest.container(null);
            assert(!("container" in uiBaseDescObjUnderTest._properties));
        });
        it("should return the value of 'container' from _properties when value is not given",function(){
            uiBaseDescObjUnderTest._properties["container"] = "some container";
            var container = uiBaseDescObjUnderTest.container();
            assert.equal(container, "some container");
        });
    });

    describe("mobileCenterIndex method",function() {
        it("should add 'mcIndex' to _properties with the correct value when value is given",function(){
            uiBaseDescObjUnderTest.mobileCenterIndex(1);
            assert.strictEqual(uiBaseDescObjUnderTest._properties["mcIndex"], 1);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = uiBaseDescObjUnderTest.mobileCenterIndex(1);
            assert.strictEqual(result, uiBaseDescObjUnderTest);
        });
        it("should remove 'mcIndex' from _properties when value is null",function(){
            uiBaseDescObjUnderTest._properties["mcIndex"] = 1;
            uiBaseDescObjUnderTest.mobileCenterIndex(null);
            assert(!("mcIndex" in uiBaseDescObjUnderTest._properties));
        });
        it("should return the value of 'mcIndex' from _properties when value is not given",function(){
            uiBaseDescObjUnderTest._properties["mcIndex"] = 1;
            var mobileCenterIndex = uiBaseDescObjUnderTest.mobileCenterIndex();
            assert.equal(mobileCenterIndex, 1);
        });
    });

    describe("resourceId method",function() {
        it("should add 'resourceId' to _properties with the correct value when value is given",function(){
            uiBaseDescObjUnderTest.resourceId("#some-id");
            assert.strictEqual(uiBaseDescObjUnderTest._properties["resourceId"], "#some-id");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = uiBaseDescObjUnderTest.resourceId("#some-id");
            assert.strictEqual(result, uiBaseDescObjUnderTest);
        });
        it("should remove 'resourceId' from _properties when value is null",function(){
            uiBaseDescObjUnderTest._properties["resourceId"] = "#some-id";
            uiBaseDescObjUnderTest.resourceId(null);
            assert(!("resourceId" in uiBaseDescObjUnderTest._properties));
        });
        it("should return the value of 'resourceId' from _properties when value is not given",function(){
            uiBaseDescObjUnderTest._properties["resourceId"] = "#some-id";
            var resourceId = uiBaseDescObjUnderTest.resourceId();
            assert.equal(resourceId, "#some-id");
        });
    });

});

describe("UiObjectBaseTestObject",function() {
    var uiBaseTOUnderTest;
    beforeEach(function () {
        uiBaseTOUnderTest = new UiObjectBaseTO();
        sinon.stub(uiBaseTOUnderTest, "_getROProperty");
        sinon.stub(uiBaseTOUnderTest, "_getROProperties");
        sinon.stub(uiBaseTOUnderTest, "_executeCommand");
    });

    describe("accessibilityId",function(){
        it("should query the property 'accessibilityId'",function(){
            uiBaseTOUnderTest.accessibilityId();
            assert(uiBaseTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperty.firstCall.args, ["accessibilityId", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            uiBaseTOUnderTest._getROProperty.returns(getROPromise);
            var res = uiBaseTOUnderTest.accessibilityId();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("className",function(){
        it("should query the property 'class'",function(){
            uiBaseTOUnderTest.className();
            assert(uiBaseTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperty.firstCall.args, ["class", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            uiBaseTOUnderTest._getROProperty.returns(getROPromise);
            var res = uiBaseTOUnderTest.className();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("container",function(){
        it("should query the property 'container'",function(){
            uiBaseTOUnderTest.container();
            assert(uiBaseTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperty.firstCall.args, ["container", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            uiBaseTOUnderTest._getROProperty.returns(getROPromise);
            var res = uiBaseTOUnderTest.container();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("isClickable",function(){
        it("should query the property 'isClickable'",function(){
            uiBaseTOUnderTest.isClickable();
            assert(uiBaseTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperty.firstCall.args, ["isClickable", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            uiBaseTOUnderTest._getROProperty.returns(getROPromise);
            var res = uiBaseTOUnderTest.isClickable();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("isEnabled",function(){
        it("should query the property 'isEnabled'",function(){
            uiBaseTOUnderTest.isEnabled();
            assert(uiBaseTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperty.firstCall.args, ["isEnabled", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            uiBaseTOUnderTest._getROProperty.returns(getROPromise);
            var res = uiBaseTOUnderTest.isEnabled();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("isFocused",function(){
        it("should query the property 'isFocused'",function(){
            uiBaseTOUnderTest.isFocused();
            assert(uiBaseTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperty.firstCall.args, ["isFocused", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            uiBaseTOUnderTest._getROProperty.returns(getROPromise);
            var res = uiBaseTOUnderTest.isFocused();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("isFocusable",function(){
        it("should query the property 'isFocusable'",function(){
            uiBaseTOUnderTest.isFocusable();
            assert(uiBaseTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperty.firstCall.args, ["isFocusable", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            uiBaseTOUnderTest._getROProperty.returns(getROPromise);
            var res = uiBaseTOUnderTest.isFocusable();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("nativeClass",function(){
        it("should query the property 'nativeClass'",function(){
            uiBaseTOUnderTest.nativeClass();
            assert(uiBaseTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperty.firstCall.args, ["nativeClass", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            uiBaseTOUnderTest._getROProperty.returns(getROPromise);
            var res = uiBaseTOUnderTest.nativeClass();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("resourceId",function(){
        it("should query the property 'resourceId'",function(){
            uiBaseTOUnderTest.resourceId();
            assert(uiBaseTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperty.firstCall.args, ["resourceId", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            uiBaseTOUnderTest._getROProperty.returns(getROPromise);
            var res = uiBaseTOUnderTest.resourceId();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("location",function(){
        it("should query the properties 'left' and 'top'",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb(["50","100"]);
                }
            };
            uiBaseTOUnderTest._getROProperties.returns(promiseMock);
            uiBaseTOUnderTest.location();
            assert(uiBaseTOUnderTest._getROProperties.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperties.firstCall.args,["left", "top"]);
        });
        it("should return size object with x and y properties as numbers",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb(["50","100"]);
                }
            };
            uiBaseTOUnderTest._getROProperties.returns(promiseMock);
            var locationObj = uiBaseTOUnderTest.location();
            assert.strictEqual(locationObj.x, 50);
            assert.strictEqual(locationObj.y, 100);
        });
    });

    describe("size",function(){
        it("should query the properties 'left', 'top', 'right', 'bottom'",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb(["50","100", "150", "205"]);
                }
            };
            uiBaseTOUnderTest._getROProperties.returns(promiseMock);
            uiBaseTOUnderTest.size();
            assert(uiBaseTOUnderTest._getROProperties.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperties.firstCall.args,["left", "top", "right", "bottom"]);
        });
        it("should return size object with width and height properties as numbers",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb(["50","100", "150", "205"]);
                }
            };
            uiBaseTOUnderTest._getROProperties.returns(promiseMock);
            var sizeObj = uiBaseTOUnderTest.size();
            assert.strictEqual(sizeObj.width, 100); // width = right - left
            assert.strictEqual(sizeObj.height, 105); // height = bottom - top
        });
    });

    describe("tap", function(){
        it("should call the _executeCommand method and pass it the correct parameters, if no arguments passed",function(){
            uiBaseTOUnderTest.tap();
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,1),["Tap"]);
        });
        it("should call the _executeCommand method and pass it the correct parameters, if null passed",function(){
            uiBaseTOUnderTest.tap(null);
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,1),["Tap"]);
        });
        it("should throw error if the argument passed is not an object",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.tap(2);
            });
        });


        it("should call the _executeCommand method and pass it the default values, if tapArgsObj passed as empty object",function(){
            var expected = { // default tapArgs object that is sent to _executeCommand
                location: {
                    Type: "LocationFromRect",
                    Offset: {
                        Type: "Point",
                        X: 0,
                        Y: 0
                    },
                    Anchor: 2 // center after conversion
                },
                numberOfTaps: 1,
                numberOfTouchPoints: 1,
                gesture: ""
            };
            uiBaseTOUnderTest.tap({});
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,5), ["Tap", expected.location, expected.numberOfTaps, expected.numberOfTouchPoints, expected.gesture]);
        });


        it("should call the _executeCommand method and pass it the values that the user passes",function(){
            var expected = { // the non default tapArgs object that is generated with the users inputs and sent to _executeCommand
                location: {
                    Type: "LocationFromRect",
                    Offset: {
                        Type: "Point",
                        X: 20,
                        Y: 35
                    },
                    Anchor: 2 // center after conversion
                },
                numberOfTaps: 5,
                numberOfTouchPoints: 3,
                gesture: "some gesture"
            };
            uiBaseTOUnderTest.tap({ // the values that the user passes
                location: {
                    offset: {
                        Type: "Point",
                        x: 20,
                        y: 35
                    },
                    anchor: "Center" // center after conversion
                },
                numberOfTaps: 5,
                numberOfTouchPoints: 3,
                gesture: "some gesture"
            });
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,5),
                ["Tap", expected.location, expected.numberOfTaps, expected.numberOfTouchPoints, expected.gesture]);
        });
    });

    describe("longPress", function(){
        it("should call the _executeCommand method and pass it the correct parameters, if no arguments passed",function(){
            uiBaseTOUnderTest.longPress();
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,1),["LongPress"]);
        });
        it("should call the _executeCommand method and pass it the correct parameters, if null passed",function(){
            uiBaseTOUnderTest.longPress();
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,1),["LongPress"]);
        });
        it("should throw error if the argument passed is not an object",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.longPress(2);
            });
        });


        it("should call the _executeCommand method and pass it default values, if longPressArgsObj passed as empty object",function(){
            var expected = { // default longPressArgs object that is sent to _executeCommand
                location: {
                    Type: "LocationFromRect",
                    Offset: {
                        Type: "Point",
                        X: 0,
                        Y: 0
                    },
                    Anchor: 2 // center after conversion
                },
                duration: 0,
                numberOfTouchPoints: 1,
                gesture: ""
            };
            uiBaseTOUnderTest.longPress({});
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,5),
                ["LongPress", expected.location, expected.duration, expected.numberOfTouchPoints, expected.gesture]);
        });


        it("should call the _executeCommand method and pass it the values that the user puts",function(){
            var expected = { // the non default longPressArgs object that is sent to _executeCommand
                location: {
                    Type: "LocationFromRect",
                    Offset: {
                        Type: "Point",
                        X: 20,
                        Y: 35
                    },
                    Anchor: 2 // center after conversion
                },
                duration: 5,
                numberOfTouchPoints: 3,
                gesture: "some gesture"
            };
            uiBaseTOUnderTest.longPress({
                location: {
                    offset: {
                        Type: "Point",
                        x: 20,
                        y: 35
                    },
                    anchor: "center" // center after conversion
                },
                duration: 5,
                numberOfTouchPoints: 3,
                gesture: "some gesture"
            });
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,5),
                ["LongPress", expected.location, expected.duration, expected.numberOfTouchPoints, expected.gesture]);
        });
    });

    describe("swipe", function(){
        it("should call the _executeCommand method and pass it the correct parameters if swipeArgs object not passed",function(){
            uiBaseTOUnderTest.swipe("right");
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,2),["Swipe", "Right"]);
        });
        it("should throw error if swipe direction is not passed",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.swipe();
            });
        });
        it("should throw error if null passed",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.swipe(null);
            });
        });
        it("should throw error if swipe direction passed is not a string",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.swipe(2);
            });
        });
        it("should throw error if the swipeArgs passed is not an object",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.longPress("right", 1);
            });
        });


        it("should call the _executeCommand method and pass it default values, if swipeArgs object passed as an empty object",function(){
            var expected = { // default swipeArgs object that is sent to _executeCommand
                location: {
                    Type: "LocationFromRect",
                    Offset: {
                        Type: "Point",
                        X: 0,
                        Y: 0
                    },
                    Anchor: 2 // center after conversion
                },
                gesture: ""
            };
            uiBaseTOUnderTest.swipe("right", {});
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,4),
                ["Swipe", "Right", expected.location, expected.gesture]);
        });


        it("should call the _executeCommand method and pass it the values that the user puts",function(){
            var expected = { // the non default longPressArgs object that is sent to _executeCommand
                location: {
                    Type: "LocationFromRect",
                    Offset: {
                        Type: "Point",
                        X: 20,
                        Y: 35
                    },
                    Anchor: 2 // center after conversion
                },
                gesture: "some gesture"
            };
            uiBaseTOUnderTest.swipe("right", {
                location: {
                    offset: {
                        Type: "Point",
                        x: 20,
                        y: 35
                    },
                    anchor: "center" // center after conversion
                },
                gesture: "some gesture"
            });
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,4),
                ["Swipe", "Right", expected.location, expected.gesture]);
        });
    });

    describe("pinch", function(){
        it("should throw error if scale not passed",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.pinch();
            });
        });
        it("should throw error if null passed",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.pinch(null);
            });
        });
        it("should call the _executeCommand method and pass it the correct parameters if pinchArgs object is not passed",function(){
            uiBaseTOUnderTest.pinch(2);
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,2),["Pinch", 2]);
        });
        it("should throw error if the pinchArgs passed is not an object",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.longPress(2, 1);
            });
        });


        it("should call the _executeCommand method and pass it default values, if pinchArgs object passed as an empty object",function(){
            var expected = { // default swipeArgs object that is sent to _executeCommand
                location: {
                    Type: "Location",
                    Offset: {
                        Type: "Point",
                        X: 0,
                        Y: 0
                    },
                    Anchor: 2 // center after conversion
                },
                velocity: null,
                gesture: ""
            };
            uiBaseTOUnderTest.pinch(2, {});
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,5),
                ["Pinch", 2, expected.velocity, expected.location, expected.gesture]);
        });


        it("should call the _executeCommand method and pass it the values that the user puts",function(){
            var expected = { // the non default pinchArgs object that is sent to _executeCommand
                location: {
                    Type: "Location",
                    Offset: {
                        Type: "Point",
                        X: 20,
                        Y: 35
                    },
                    Anchor: 2 // center after conversion
                },
                velocity: 3,
                gesture: "some gesture"
            };
            uiBaseTOUnderTest.pinch(2, {
                location: {
                    offset: {
                        Type: "Point",
                        x: 20,
                        y: 35
                    },
                    anchor: "Center" // center after conversion
                },
                velocity: 3,
                gesture: "some gesture"
            });
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,5),
                ["Pinch", 2, expected.velocity, expected.location, expected.gesture]);
        });
    });

    describe("panByLocations", function(){
        it("should throw error if no arguments passed",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.panByLocations();
            });
        });

        it("should throw error if only one argument passed",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.panByLocations({
                    offset: {
                        Type: "Point",
                        x: 20,
                        y: 35
                    },
                    anchor: "Center" // center after conversion
                });
            });
        });

        it("should throw error if start is null",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.panByLocations(null, {
                    offset: {
                        Type: "Point",
                        x: 20,
                        y: 35
                    },
                    anchor: "Center" // center after conversion
                });
            });
        });

        it("should throw error if end is null",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.panByLocations({
                    offset: {
                        Type: "Point",
                        x: 20,
                        y: 35
                    },
                    anchor: "Center" // center after conversion
                }, null);
            });
        });

        it("should call the _executeCommand method and pass it the correct parameters when empty objects passed",function(){
            uiBaseTOUnderTest.panByLocations({}, {});
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,3),
                ["Pan",
                    { // start location
                        Type: "Location",
                        Offset: {
                            Type: "Point",
                            X: 0,
                            Y: 0
                        },
                        Anchor: 2
                    },
                    { // end location
                        Type: "Location",
                        Offset: {
                            Type: "Point",
                            X: 0,
                            Y: 0
                        },
                        Anchor: 2
                    }
                ]);
        });

        it("should call the _executeCommand method and pass it the correct parameters",function(){
            var start = {
                    offset: {
                        Type: "Point",
                        x: 20,
                        y: 35
                    },
                    anchor: "Center"
                },
                end = {
                    offset: {
                        Type: "Point",
                        x: 25,
                        y: 40
                    },
                    anchor: "Center"
                };
            uiBaseTOUnderTest.panByLocations(start, end);
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,3),
                ["Pan",
                    { // start location
                        Type: "Location",
                        Offset: {
                            Type: "Point",
                            X: 20,
                            Y: 35
                        },
                        Anchor: 2
                    },
                    { // end location
                        Type: "Location",
                        Offset: {
                            Type: "Point",
                            X: 25,
                            Y: 40
                        },
                        Anchor: 2
                    }
                ]
            );
        });
    });



    describe("panByPoints", function(){
        it("should throw error if no arguments passed",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.panByPoints();
            });
        });

        it("should throw error if only one argument passed",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.panByPoints({ x: 20, y: 35 });
            });
        });

        it("should throw error if start is null",function(){
            var end = { x: 20, y: 35 };
            assert.throws(function(){
                uiBaseTOUnderTest.panByPoints(null, end);
            });
        });

        it("should throw error if end is null",function(){
            var start = { x: 20, y: 35 };
            assert.throws(function() {
                uiBaseTOUnderTest.panByPoints(start, null);
            });
        });

        it("should throw error if the panArgs passed is not an object",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.panByPoints({}, {}, 1);
            });
        });

        it("should throw error if the panArgs object is passed with velocity property as negative number",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.panByPoints({}, {}, { velocity: -1});
            });
        });

        it("should throw error if the panArgs object is passed with velocity property as 0",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.panByPoints({}, {}, { velocity: 0});
            });
        });

        it("should throw error if start and end points are the same and velocity is set",function(){
            var start = {x: 20, y: 30}, end = {x: 20, y: 30},
                panArgs = { velocity: 2 };
            assert.throws(function(){
                uiBaseTOUnderTest.panByPoints(start, end, panArgs);
            });
        });

        it("should call the _executeCommand method and pass it the correct parameters if empty objects passed",function(){
            var panArgs = { gesture: "some gesture"};
            uiBaseTOUnderTest.panByPoints({}, {}, panArgs);
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,6),
                ["Pan", {Type: "Point", X: 0, Y: 0}, {Type: "Point", X: 0, Y: 0}, -9999, -9999, "some gesture"]);
        });

        it("should call the _executeCommand method and pass it the correct parameters if panArgs.velocity is not passed",function(){
            var start = {x: 20, y: 30}, end = {x: 45, y: 60},
                panArgs = { gesture: "some gesture"};
            uiBaseTOUnderTest.panByPoints(start, end, panArgs);
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,6),
                ["Pan", {Type: "Point", X: 20, Y: 30}, {Type: "Point", X: 45, Y: 60}, -9999, -9999, "some gesture"]);
        });

        it("should call the _executeCommand method and pass it the correct parameters if panArgs.velocity is null",function(){
            var start = {x: 20, y: 30}, end = {x: 45, y: 60},
                panArgs = { velocity: null, gesture: "some gesture"};
            uiBaseTOUnderTest.panByPoints(start, end, panArgs);
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,6),
                ["Pan", {Type: "Point", X: 20, Y: 30}, {Type: "Point", X: 45, Y: 60}, -9999, -9999, "some gesture"]);
        });

        it("should call the _executeCommand method and pass it the correct parameters if panArgs.velocity passed and is not null and start and end points are different",function(){
            var start = {x: 20, y: 30}, end = {x: 45, y: 60},
                panArgs = { gesture: "some gesture", velocity: 5 };
            uiBaseTOUnderTest.panByPoints(start, end, panArgs);
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,6),
                ["Pan", {Type: "Point", X: 20, Y: 30}, {Type: "Point", X: 45, Y: 60}, 3.2009219983223995, 3.8411063979868794, "some gesture"]);
        });
    });

});
// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // XUQ/EioehRBYX7FvVVkUb6CDg/bcB5W+gcAq5bQzEkGg
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCCc
// SIG // WDZlYA9HdylS49gd0t2Kw3NQzfnkfvf22Aa+T07qcDAN
// SIG // BgkqhkiG9w0BAQEFAASCAQAlNQ5fFIOb+sgSam4u9O0m
// SIG // EbnWNZ3+NXZdJPnAtIYOc88UFXYsuwQ8BzpGBYNlrLit
// SIG // gwJG4v8dU/6HUi7oglsd72OJ9ysuJCz3D6X2hNt2lJ/B
// SIG // K8BvZTjVMrEpKigXeH1Uszg/vnDJhgNT+cUMHD38fzkk
// SIG // NoZl2IPSatgnvWoSkSmQcbbzHPopmezDQ/ivvUPNsLl1
// SIG // OXq4dJSODg9L0WvyGNdh2ZCNXeQfzWft8OBzgok4fo3K
// SIG // hw+S6aRCdoqVTCWoH1ztMxx9Fwcme90fHMtcJVU/htd2
// SIG // SfT2GyZrVtESEeQhzNDpy9YzH9Pjql8Sz56f/CHJlA27
// SIG // 3yg4gAY/gyNmoYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MTM1OVowIwYJKoZI
// SIG // hvcNAQkEMRYEFH74riWy9FIWAuQwWgtPAfxuLWs1MA0G
// SIG // CSqGSIb3DQEBAQUABIIBAH5b9mF94t70ui/UmuI0R5ed
// SIG // LTM2Ge/roOYzVUeXnl2D0y5V3XAAh6xKZa2ZTLT2Ro0P
// SIG // YiExYyQpUkE58lu5KA3Edkk0KqvrK+G9/Rs8zTMIpbaX
// SIG // vMjlElVrgLs4eWJxXlt/0PeHLbTRfZ8ccnn7wvQk4/3N
// SIG // ik5tP46P3Rj+2eHE8MNCrXqFVHDlStfEo0/JgX5cu/rA
// SIG // xdcLDWP6/f+eyzNydMoFSFvhzbRiHTtdKP6eTWPd6sUt
// SIG // BYHOwwDYA9IQO11cSOzHEqbrkjHFHHYmJeoANyRz9oTj
// SIG // 3saldBBlbkoOJM70wdZJYApFgADiKKUAT/d7PgZsHYDR
// SIG // T3C3QCdEpLQ=
// SIG // End signature block
