// (c) Copyright 2015 Hewlett Packard Enterprise Development LP
/**
 * Created on 14/10/2015.
 * This file contains the base test object for Web's technology including the base description.
 */

var Core = require("leanft.sdk.core");
var TestObjectBase = Core.TestObjectBase;
var DescriptionBase = Core.DescriptionBase;
var Utils = Core.ObjectUtils;
var StringUtils = Core.StringUtils;
var LocationInfoProvider = Core.LocationInfoProvider;
var PropertyFlatter = Core.PropertyFlatter;
var PropertyKeyPrefixFlatter = Core.PropertyKeyPrefixFlatter;
var LocationToNativeKeys = Core.LocationToNativeKeys;
var AbsLocationToNative = Core.AbsLocationToNative;
var SizeToNativeKeys = Core.SizeToNativeKeys;
var NativeObjectBehavior = Core.NativeObjectBehavior;

/**
 * Web namespace
 * @namespace Web
 */


/**
 * WebBaseDescription - the base description for all web elements
 * @class WebBaseDescription
 * @mixes DescriptionBase
 * @memberof Web
 * @ignore
 */
function WebBaseDescription(leanFTType){
    this._init({
        technology: "Web",
        leanftType: leanFTType
    });

    //init grouped properties
    this.location({});
    this.absoluteLocation({});
    this.size({});
    this.attrs({});
    this.styles({});
}
 
     //* <Description of what the property represents within the real object â€“ Same as C#>
     //* @param {string} [innerHTML] When provided, this method acts as a setter and sets the <TO_prop_name> value.
     //* @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored <TO_prop_name> value;
     //* otherwise it returns 'this' for use with the builder pattern.


/**
 * @ignore
 */
Utils.inherit(WebBaseDescription,DescriptionBase,{
    /**
     * The object's HTML identifier.
     * @param {string} [id] When provided, this method acts as a setter and sets the HTML id value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored HTML id value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
   id: function(id){
       return this._simplePropertyHandler("html id", id);
   },

    /**
     * The object's HTML tag.
     * @param {string} [tag] When provided, this method acts as a setter and sets the HTML tagName value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored HTML tagName value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
   tagName: function(tag){
        return this._simplePropertyHandler("html tag", tag);
   },

    /**
     * The object's name property.
     * @param {string} [name] When provided, this method acts as a setter and sets the name value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored name value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    name: function(name){
        return this._simplePropertyHandler("name", name);
   },
    /**
     * The object's CSS class (className property).
     * @param {string} [name] When provided, this method acts as a setter and sets the className value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored className value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    className: function(name) {
        return this._simplePropertyHandler("class", name);
   },

    /**
     * The HTML code contained between the object's start and end tags.
     * @param {string} [innerHTML] When provided, this method acts as a setter and sets the innerHTML value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored innerHTML value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    innerHTML: function(innerHTML) {
        return this._simplePropertyHandler("innerHTML", innerHTML);
   },

    /**
     * The object's HTML code and its content.
     * @param {string} [outerHTML] When provided, this method acts as a setter and sets the outerHTML value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored outerHTML value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    outerHTML: function(outerHTML) {
        return this._simplePropertyHandler("outerHTML", outerHTML);
    },

    /**
     * The text contained between the object's start and end tags.
     * @param {string} [innerText] When provided, this method acts as a setter and sets the innerText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored innerText value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    innerText: function(innerText) {
        return this._simplePropertyHandler("innerText", innerText);
    },

    /**
     * The object's text (supported in Internet Explorer only).
     * @param {string} [outerText] When provided, this method acts as a setter and sets the outerText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored outerText value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    outerText: function(outerText) {
        return this._simplePropertyHandler("outerText", outerText);
    },

    /**
     * The object's title.
     * @param {string} [title] When provided, this method acts as a setter and sets the title value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored title value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    title: function(title) {
        return this._simplePropertyHandler("title", title);
    },

    /**
     * Indicates whether the object is visible.
     * @param {bool} [visible] When provided, this method acts as a setter and sets the isVisible value.
     * @returns {bool | Description} If no parameter is provided, the method acts as a getter and returns the current stored isVisible value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    isVisible: function(visible) {
        return this._simplePropertyHandler("visible", visible);
    },

    /**
     * The object's coordinates relative to the parent window (in pixels).
     * @param {Point} [location] When provided, this method acts as a setter and sets the location value.
     * @returns {Point | Description} If no parameter is provided, the method acts as a getter and returns the current stored location value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    location: function(location) {
        return this._propertyFlatterHandler("Location", PropertyFlatter, location, LocationToNativeKeys);
    },

    /**
     * The object's absolute coordinates relative to the screen (in pixels). 0,0 is always the top-left corner of the (primary) monitor.
     * @param {Point} [location] When provided, this method acts as a setter and sets the absoluteLocation value.
     * @returns {Point | Description} If no parameter is provided, the method acts as a getter and returns the absoluteLocation value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    absoluteLocation: function(location) {
        return this._propertyFlatterHandler("AbsoluteLocation", PropertyFlatter, location, AbsLocationToNative);
    },

    /**
     * The object's size (in pixels).
     * @param {Size} [size] When provided, this method acts as a setter and sets the size value.
     * @returns {Size | Description} If no parameter is provided, the method acts as a getter and returns the current stored size value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    size: function(size) {
        return this._propertyFlatterHandler("Size", PropertyFlatter, size, SizeToNativeKeys);
    },

    /**
     * The object's DOM attributes.
     * @param {Object} [attrs] When provided, this method acts as a setter and sets the attrs value.
     * Specify the attribute names as object keys and set their values to the desired attribute values.
     * @returns {Object | Description} If no parameter is provided, the method acts as a getter and returns the current stored attrs object; 
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    attrs: function(attrs) {
        return this._propertyFlatterHandler("Attributes", PropertyKeyPrefixFlatter, attrs, "attribute/");
    },

    /**
     * The object's computed style.
     * @param {Object} [styles] When provided, this method acts as a setter and sets the object by its computed style value.
     * * Specify the style names as object keys and set their values to the desired style values.
     * @returns {Object | Description} If no parameter is provided, the method acts as a getter and returns the current stored styles object;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    styles: function(styles) {
        return this._propertyFlatterHandler("Style", PropertyKeyPrefixFlatter, styles, "style/");
    }
});

/**
 * @class WebBaseTestObject
 * @param nativeClass
 * @param session
 * @param description
 * @constructor
 * @extends TestObjectBase
 * @mixes LocationInfoProvider
 * @mixes NativeObjectBehavior
 * @mixes Web.WebDescriberBehavior
 * @abstract
 * @memberof Web
 * @ignore
 */
function WebBaseTestObject(nativeClass,session,description){
    this._init(nativeClass,session,description);

    Utils.extend(this, LocationInfoProvider);
    Utils.extend(this, WebDescriberBehavior);
    Utils.extend(this, NativeObjectBehavior);

    this._genericDesc = require("./webelement.js").WebElement;
}

/**
 * Common methods for all web test objects
 * @memberof Web
 * @ignore
 */
var WebDescriberBehavior = {
    /*jshint unused:true, eqnull:true */
    /**
     * Creates a child test object of this test object.
     * This operation does not cause LeanFT to search for the object in the AUT. LeanFT interacts with the application only when a step runs that performs an operation on the AUT object.
     * @param {Description | string} selector The description of the test object.  Can be a full test object description or a string.  If a string is provided, it is interpreted as a CSS selector with a default test object type of WebElement.
     * @param {Description} [objType = Web.Element()] The type of test object to use when supplying a CSS string for the selector.
     * @returns {*} the new child test object with the provided description.
     * @memberof Web.WebDescriberBehavior
     */
    $: function(selector){
        if(selector == null){
            this._logger.info("$: Was called without any descripitor");
            throw new Error("No Selector was provided");
        }

        if(typeof(selector) === "string"){
            return this._defineByQuery("css",selector,arguments[1]);
        }

        if(!selector.leanFTType){
            //this is a property bag and not our description.
            selector = this._genericDesc(selector);
        }

        return this.__super.$.apply(this,arguments);
    },
    /**
     * Creates a child test object of this test object based on the specified xpath.
     * This operation does not cause LeanFT to search for the object in the AUT. LeanFT interacts with the application only when a step runs that performs an operation on the AUT object.
     * @param {string} xpath The xpath that will be used as the description for the new child test object.
     * @param {Description} [childType = Web.Element()] The test object type for the new child test object.
     * @returns {*} the new child test object with the provided xpath as its description.
     * @memberof Web.WebDescriberBehavior
     */
    $x: function(xpath,childType){
        return this._defineByQuery("xpath",xpath,childType);
    },

    _defineByQuery: function(queryName,query,childType){
        if(query === null){
            throw new Error("Query cannot be null");
        }

        childType = childType || this._genericDesc();
        childType[queryName](query);
        return this.$(childType);
    }

};

/**
 * @ignore
 */
Utils.inherit(WebBaseTestObject,TestObjectBase,{
    _genericDesc: null,

    /**
     * Returns the object's HTML identifier.
     * @returns {Promise<string>} the object's HTML identifier.
     * @memberof Web.WebBaseTestObject#
     */
    id: function(){
        return this._getROProperty("html id", arguments);
    },

    /**
     * Returns the object's HTML tag.
     * @returns {Promise<string>} the object's HTML tag.
     * @memberof Web.WebBaseTestObject#
     */
    tagName: function(){
        return this._getROProperty("html tag", arguments);
    },

    /**
     * Returns the object's name property.
     * @returns {Promise<string>} the object's name property.
     * @memberof Web.WebBaseTestObject#
     */
    name: function(){
        return this._getROProperty("name", arguments);
    },

    /**
     * Returns the object's CSS class.
     * @returns {Promise<string>} the object's CSS class.
     * @memberof Web.WebBaseTestObject#
     */
    className: function() {
        return this._getROProperty("class", arguments);
    },

    /**
     * Returns the HTML code contained between the object's start and end tags.
     * @returns {Promise<string>} the HTML code contained between the object's start and end tags.
     * @memberof Web.WebBaseTestObject#
     */
    innerHTML: function() {
        return this._getROProperty("innerHTML", arguments);
    },

    /**
     * Returns the object's HTML code and its content.
     * @returns {Promise<string>} the object's HTML code and its content.
     * @memberof Web.WebBaseTestObject#
     */
    outerHTML: function() {
        return this._getROProperty("outerHTML", arguments);
    },

    /**
     * Returns the text contained between the object's start and end tags.
     * @returns {Promise<string>} the text contained between the object's start and end tags.
     * @memberof Web.WebBaseTestObject#
     */
    innerText: function() {
        return this._getROProperty("innerText", arguments);
    },

    /**
     * Returns the object's text.
     * @returns {Promise<string>} the object's text.
     * @memberof Web.WebBaseTestObject#
     */
    outerText: function() {
        return this._getROProperty("outerText", arguments);
    },

    /**
     * Returns the element's title attribute.
     * @returns {Promise<string>} the element's title attribute.
     * @memberof Web.WebBaseTestObject#
     */
    title: function() {
        return this._getROProperty("title", arguments);
    },

    /**
     * Indicates whether the current element is visible.
     * @returns {Promise<bool>} true if the current element is visible, otherwise false.
     * @memberof Web.WebBaseTestObject#
     */
    isVisible: function() {
        return this._getROProperty("visible", arguments);
    },

    /**
     * Returns the value of the specified attribute.
     * @param {string} attributeName The attribute name of the value to retrieve.
     * @returns {Promise<string>} the value of the specified attribute; null if the attribute does not exist.
     * @memberof Web.WebBaseTestObject#
     */
    getAttribute: function(attributeName) {
        return this._getROProperty("attribute/" + attributeName, arguments).then(function(attrVal) {
            if(attrVal === null) {
                 return null;
            }

            //in case the attribute is bool it must be true (otherwise it was null) then we return same as W3C's getAttribute which is ""
            if(typeof attrVal === 'boolean') {
               return "";
            }

            if(attrVal === "") {
                return null;
            }

            return attrVal;
      });
    },

    /**
     * Returns the value of the specified style.
     * @param {string} stylePropertyName The style name of the value to retrieve.
     * @returns {Promise<string>} the value of the specified style. Null if the style does not exist.
     * @memberof Web.WebBaseTestObject#
     */
    getComputedStyle: function(stylePropertyName) {
        return this._getROProperty("style/" + stylePropertyName, arguments).then(function(styleVal) {
            if(styleVal === "") {
                return null;
            }

            return styleVal;
        });
    },

    /**
     * Returns a copy of the attribute collection that is attached to this object. For example: 'id','class', etc.
     * @returns {Promise<object>} the object keys are the attribute names and the corresponding values are the attribute values.
     * @memberof Web.WebBaseTestObject#
     */
    attributes: function() {
        return this._getDictionaryValue("all attributes");
    },

    /**
     * Returns a copy of the style collection that is attached to this object. 
     * @returns {Promise<object>} the object keys are the attribute names and the corresponding values are the attribute values.
     * @memberof Web.WebBaseTestObject#
     */
    styles: function() {
        return this._getDictionaryValue("all styles");
    },

    _getDictionaryValue: function(propName) {
        return this._getROProperty(propName, arguments).then(function(serializedDictionary) {
            var attributesDic = {};
            if(StringUtils.isNullOrWhiteSpace(serializedDictionary)) {
                return attributesDic;
            }

            var tokens = serializedDictionary.split(';;');
            var i;
            for(i = 1; i < tokens.length; i++){
                if(tokens[i][0] === ";"){
                    tokens[i] = tokens[i].substr(1);
                    tokens[i-1] += ";";
                }
            }
            for(i=0; i<tokens.length; i+=2) {
                attributesDic[tokens[i]] = tokens[i+1];
            }

            return attributesDic;
        });
    }
});

module.exports.WebBaseTestObject = WebBaseTestObject;
module.exports.WebBaseDescription = WebBaseDescription;
module.exports.WebDescriberBehavior = WebDescriberBehavior;
// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // gT6cvWQfYGGwRddSej/Nt8GRMfkoq9Qj2qW7W20mgASg
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCDe
// SIG // +GNH2XS1BuNDHXeLcSrLn51dQbtYuG0UzUxRwjDxdjAN
// SIG // BgkqhkiG9w0BAQEFAASCAQBWZ325FNnAodc7BmWsKy7a
// SIG // +SnCS6rzP/uHH9JNf14WZObXViyNpsFLVLT6FubfWq9/
// SIG // pi8d+R0fAVr/VNmHhqdLk6IDhDTkVL2NMQfnnrF5dj1s
// SIG // SSrTvCA5MOA2SKsQ4H9hHxtV16rwD1/kN7jOyi0yAynL
// SIG // tbq/KBvhij/bF+rWznv5qazcBTU7N1JseHSZG/SFqhAO
// SIG // SI26TX1mrCD7x3C0DIihOD1yoUffgloxdbNWrJNx1xG1
// SIG // mJYPSV1NurrF9jGW3cM+aDrx3nkL/XV0+W41dAkdJvgJ
// SIG // KVtfdFGtF2dcTZFsq+8Ef2QqbRC7PTwZnGVXBv+iEXJT
// SIG // kNHr1UXuXMm7oYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MjMwNFowIwYJKoZI
// SIG // hvcNAQkEMRYEFBWMsYaf6CPvR6QrAqjP5ZXVWJwmMA0G
// SIG // CSqGSIb3DQEBAQUABIIBAAX6VCmJT/HbZpzbdaTf9nEC
// SIG // umBhxJ72G9zyfU/N7Ym2FCrPMY69gBcNHK6Sehsy5wOj
// SIG // Zq7DLPzSaSy8J/6In+7q3B3ASYVNzjxj6jMcldTOKs0a
// SIG // 8DKeqBU7mVLWIzlNbDjAUSWfaSJzJ2JNy5QDf/nyzUa3
// SIG // nE7Fljwybic5tIsw6hbrgMI08w5S1fVdr0AZYz5hM8BL
// SIG // d3zV4URIt+Y357QKLcmW12tv2++WEA5gh5QRwQ9/ikMu
// SIG // UNbaU/X8unquXUNqczBC/wSx8tx4yd1sWVqehq+eQ0Wb
// SIG // 4FlkVs9/20Ja3ef97diQhEC0AEf1+XzfneuCwIQACc3Q
// SIG // FtH72HBSjzE=
// SIG // End signature block
