// (c) Copyright 2015 Hewlett Packard Enterprise Development LP
/**
 * Created on 12/10/2015.
 * This file contains all the functionality that is needed for the Browser test object including
 * TestObject constructor, description constructor , and appropriate behavior.
 */

var Core = require("leanft.sdk.core");
var Logger = Core.Logger;
var ObjUtils = Core.ObjectUtils;
var TestObjectBase = Core.TestObjectBase;
var Convert = Core.Convert;
var Page = require("./page.js").Page;
var DescriptionBase = Core.DescriptionBase;
var LocationInfoProvider = Core.LocationInfoProvider;

/**
 * @class Browser
 * @memberof Web
 * @constructor
 * @mixes LocationInfoProvider
 */
function Browser(cookie,session){
    if(cookie === null)
        throw new Error("Browser cannot be created without cookie!");

    this._logger = new Logger("Browser");
    this._cookie = cookie;
    this._init("Browser",session);
    this.page = this.__super.$.call(this,Page());

    ObjUtils.extend(this, LocationInfoProvider);
}

/**
 * @typedef {Object} BrowserVersion
 * @property {String} type  The type of browser.
 * @property {String} version The browser version.
 * @memberof Web
 *
 */

/**
 * @ingore
 */
ObjUtils.inherit(Browser,TestObjectBase,{
    page: null,

    /**
     * Information about the browser.
     * @returns {Promise<Web.BrowserVersion>} a promise that is fulfilled with the information about the browser.
     * @memberof Web.BrowserTO#
     */
    version: function(){
        return this._getROProperty("version", arguments).then(function(browserVersion){
            browserVersion = browserVersion.trim().split(" ");
            return {
                version: browserVersion.pop(),
                type: browserVersion.join(" ")
                
            };
        });
    },
    /**
     * Returns the number of tabs currently open in the browser.
     * @returns {Promise<Number>} a promise that is fulfilled with the number of tabs currently open in the browser.
     * @memberof Web.BrowserTO#
     */
    numberOfTabs: function(){
        return this._getROProperty("number of tabs", arguments);
    },
    /**
     * Returns the browser's initial title when first opened.
     * @returns {Promise<string>} a promise that is fulfilled with the browser's initial title when first opened.
     * @memberof Web.BrowserTO#
     */
    openTitle: function(){
        return this._getROProperty("opentitle", arguments);
    },
    /**
     * Return the URL from which the browser is opened.
     * @returns {Promise<String>} a promise that is fulfilled with the URL from which the browser is opened.
     * @memberof Web.BrowserTO#
     */
    openUrl: function(){
        return this._getROProperty("openurl", arguments);
    },
    /**
     * Returns the browser title.
     * @returns {Promise<String>} a promise that is fulfilled with the browser title.
     * @memberof Web.BrowserTO#
     */
    title: function(){
        return this._getROProperty("title", arguments);
    },
    /**
     * Returns the browser URL.
     * @returns {Promise<String>}  a promise that is fulfilled with the browser URL.
     * @memberof Web.BrowserTO#
     */
    url: function(){
        return this._getROProperty("url", arguments);
    },
    /**
     * Creates a child test object of this test object.
     * This operation does not cause LeanFT to search for the object in the AUT. LeanFT interacts with the application only when a step runs that performs an operation on the AUT object.
     * @param {Description | string} selector The description of the test object.  Can be a full test object description or a string.  If a string is provided, it is interpreted as a CSS selector with a default test object type of WebElement.
     * @param {Description} [objType = Web.Element()] The type of test object to use when supplying a CSS string for the selector.
     * @returns {*} the new child test object with the provided description.
     * @memberof Web.BrowserTO#
     */
    $: function(selector){
        if(selector.leanFTType) {
            if(selector.leanFTType.leanftType === 'Page') {
                return this.__super.$.call(this,selector);
            }
        }

        return this.page.$.apply(this.page,arguments);
    },
    /**
     * Creates a child test object of this test object.
     * This operation does not cause LeanFT to search for the object in the AUT. LeanFT interacts with the application only when a step runs that performs an operation on the AUT object.
     * @param {string} xpath The xpath of the element that will be used to search for the test object.
     * @param {Description} [childType = Web.Element()] The child type.
     * @returns {*} the new child test object with the provided xpath as its description.
     * @memberof Web.BrowserTO#
     */
    $x: function(xpath,childType){
        if(childType === undefined || childType.leanFTType.leanftType !== 'Page')
            return this.page.$x(xpath,childType);

        throw new Error("cannot describe by XPATH non web elements");
    },
    /**
     * Opens the specified URL in the browser.
     * @param {string} url The URL to open.
     * @returns {Promise<void>} a promise that is fulfilled when the navigate operation was performed.
     * @memberof Web.BrowserTO#
     */
    navigate: function(url){
        return this._executeWithEvents(arguments, "Navigate",url);
    },

    /**
     * Returns all child objects of this object that match the supplied test object description.
     * @param description A description object that defines the test object type and the set of properties and values that should be common to all objects that are returned.
     * @param {bool} [dontFilterByType = false] Set this parameter to true to avoid limiting the returned objects to a specific test object type.
     * @returns {Promise<TestObject[]>} an array of test objects that match the supplied description.
     * @memberof Web.BrowserTO#
     */
    $$: function(description,dontFilterByType) {
        if(description.leanFTType) {
            if (description.leanFTType.leanftType === 'Page') {
                return this.__super.$$.apply(this, arguments);
            }
        }

        return this.page.$$.apply(this.page, arguments);
    },
    /**
     * Navigates to the previous page in the browser history list. <br/>
     * Note: This method is identical to clicking the browser's Back button.
     * @returns {Promise<void>} a promise that is fulfilled when the browser has performed the back operation.
     * @memberof Web.BrowserTO#
     */
    back:function(){
        return this._executeWithEvents(arguments, "Back");
    },
    /**
     * Closes the browser window (or tab) that this test object represents.
     * @returns {Promise<void>} a promise that is fulfilled when the browser has performed the close operation.
     * @memberof Web.BrowserTO#
     */
    close: function(){
        return this._executeWithEvents(arguments, "Close");
    },
    /**
     * Refreshes the current page. <br/>
     * Note: This method is identical to clicking the browser's <b>Refresh</b> button.
     * @returns {Promise<void>} a promise that is fulfilled after the current page refreshes.
     * @memberof Web.BrowserTO#
     */
    refresh: function(){
        return this._executeWithEvents(arguments, "Refresh");
    },
    /**
     * Waits for the browser to complete the current navigation. <br/>
     * Note: You can use this method to instruct your test to wait until the browser is loaded.
     * @returns {Promise<void>} a promise that is fulfilled after the browser completes the current navigation.
     * @memberof Web.BrowserTO#
     */
    sync: function(){
        return this._executeWithEvents(arguments, "Sync");
    },
    /**
     * Clears the browser cache. <br/>
     * Note: This method does not clear the browser's cookies. Use deleteCookies() to delete the cookies.
     * @returns {Promise<void>} a promise that is fulfilled after the browser's cache is cleared.
     * @memberof Web.BrowserTO#
     */
    clearCache: function(){
        return this._executeWithEvents(arguments, "ClearCache");
    },
    /*jshint eqnull:true */
    /**
     * Resizes the browser window to the specified dimensions.
     * @param {Size | Number} sizeOrWidth If a Size object is passed, it will resize according to the object. If a number
     * is passed, it will be interpreted as a width.
     * @param {Number} [height] If the first parameter is a full Size object, this parameter is ignored.
     * @returns {Promise<void>} a promise that is fulfilled after resizing the browser.
     * @memberof Web.BrowserTO#
     */
    resizeTo: function(sizeOrWidth,height){
        var sizeObj;

        if(arguments.length === 0 || sizeOrWidth === null)
               throw new Error("You must pass width and height (number), or a size object");

        if(arguments.length == 1){
            if(typeof sizeOrWidth !== "object")
                throw new Error("You must pass width and height (number), or a size object");

            sizeObj = arguments[0];

            if(sizeObj.width == null || sizeObj.height == null)
                throw new Error("the argument does not contain the width or height keys or both");
        }
        else{
            if(!(arguments[0] !== null && arguments[1] !== null))
                throw new Error("You can't pass null to resizeTo()");

            sizeObj = {width: sizeOrWidth, height: height};
        }

        return this._executeWithEvents(arguments ,"Resize", Convert.toNumber(sizeObj.width), Convert.toNumber(sizeObj.height));
    },
    /**
     * Opens a new tab in the browser window.
     * @returns {Promise<void>} a promise that is fulfilled after a new tab opened in the browser.
     * @memberof Web.BrowserTO#
     */
    openNewTab: function(){
        return this._executeWithEvents(arguments, "OpenNewTab");
    },
    /**
     * Closes all tabs (if any) and closes the browser window. <br/> 
     * Use the close() method to close only the currently open tab.<br/><br/>
     * Limitation: Your Internet Explorer (IE) browser must be configured to "Always close all tabs". To do this, open two or more tabs in IE. Then close IE. In the message
	 * box that pops up, select the "Always close all tabs" option.<br/><br/> <!-- 25954 -->
	 * Note: This method is not supported on Chrome. Use the Close method instead.
     * @returns {Promise<void>} a promise that is fulfilled after all tabs (if any) are closed in the browser.
     * @memberof Web.BrowserTO#
     */
    closeAllTabs: function(){
        return this._executeWithEvents(arguments, "CloseAllTabs");
    },
    /**
     * Displays the browser in full-screen mode.
     * @returns {Promise<void>} a promise that is fulfilled after the browser has been displayed in full screen mode.
     * @memberof Web.BrowserTO#
     */
    fullScreen: function(){
        return this._executeWithEvents(arguments, "FullScreen");
    },
    /*jshint eqnull:true */
    /**
     * Runs this JavaScript each time a page or frame loads or refreshes in the browser. <br/>
     * Note: <br/>
     * - The script remains embedded until you close the browser, or until the run session ends.<br/>
     * - Using this method to perform alert operations may result in unexpected behavior.<br/>
     * - To run this method, the security settings in your Web browser must be set to allow active scripting; otherwise, steps using this method will fail.
     * @param {Function | String} scriptToEmbed The full content of the JavaScript to embed.
     * @param {String} functionName Optional: the name of the function.
     * @returns {Promise<void>} a promise that is fulfilled after the script has been embedded.
     * @memberof Web.BrowserTO#
     */
    embedScript: function(scriptToEmbed, functionName){
        if(scriptToEmbed == null)
            throw new Error("You must pass parameter to embedScript() method");

        if(typeof scriptToEmbed !== "string"){
            var script_name = scriptToEmbed.name;
            scriptToEmbed = scriptToEmbed.toString().replace(/(\r\n|\n|\r|\s)/gm,""); //removes new line and spaces

            if(scriptToEmbed.match("^function") !== null) {
                var prefix = "";
                if((script_name == null || script_name.length === 0) && functionName != null) //anonymous function with function_name arg supplied
                    prefix = "function " + functionName;
                else
                    prefix = "function ";

                scriptToEmbed = scriptToEmbed.replace(/^function/, prefix);
            }
        }

        return this._executeWithEvents(arguments, "EmbedScript", scriptToEmbed);
    },
    /**
     * Navigates to the next page in the browser history list.
     * Note: This method is identical to clicking the browser's <b>Forward</b> button.
     * @returns {Promise<void>} a promise that is fulfilled after the browser navigates to the next page in the browser history list.
     * @memberof Web.BrowserTO#
     */
    forward: function(){
        return this._executeWithEvents(arguments, "Forward");
    },
    /**
     * Returns the text displayed in a browser message box, such as an alert, confirmation, or prompt.
     * @returns {Promise<void>} a promise that is fulfilled after the text displayed in a browser message box, such as an alert, confirmation, or prompt has been captured.
     * @memberof Web.BrowserTO#
     */
    getDialogText: function(){
        return this._executeWithEvents(arguments, "GetDialogText");
    },
    /**
     * Indicates whether the browser message box is currently open.
     * @returns {Promise<void>} that will be notified whether the browser message box is currently open.
     * @memberof Web.BrowserTO#
     */
    hasDialog: function(){
        return this._executeWithEvents(arguments, "DialogExists");
    },
    /**
     * Clicks a button on the alert, confirmation, or prompt message box.
     * @param {Web.DialogButton} dialogAction The button to click. Default: OK
     * @returns {Promise<void>} a promise that is fulfilled after clicking the dialog button.
     * @memberof Web.BrowserTO#
     */
    handleDialog: function(dialogAction){
        if(dialogAction === undefined) {
            dialogAction = "ok";
        } else if(typeof dialogAction === "string") {
            dialogAction = dialogAction.toLowerCase();
            if(dialogAction != "ok" && dialogAction != "cancel")
                throw new Error("When passing parameter to handleDialog() method, 'ok' or 'cancel' are the only allowed strings");
        }else{ //non string
            throw new Error("When passing parameter to handleDialog() method, 'ok' or 'cancel' are the only allowed strings");
        }

        dialogAction = dialogAction == "ok" ? 0 : 1;

        return this._executeWithEvents(arguments, "HandleDialog", dialogAction);
    },
    /*jshint eqnull:true */
    /**
     * Enters text in the browser's prompt message box and clicks the OK button.
     * @param {String} text The text to enter in the edit field.
     * @returns {Promise<void>} that will be fulfilled after editing the field and clicking on the OK button in the dialog.
     * @memberof Web.BrowserTO#
     */
    handlePromptDialog: function(text){
        if(text == null)
            throw new Error("handlePromptDialog() must accept text parameter");

        return this._executeWithEvents(arguments, "HandleDialog", 0, Convert.toString(text));
    },
    /**
     * @param {string} [origin] The full or partial domain of the source. <br/>
     * If no arguments are passed: Deletes all cookies from the browser.<br/>
     * If an argument is passed: Deletes only cookies that originated from the browser source.<br/>
     * For example, entering <b>MySite.com</b> or <b>MySite.net</b> clears cookies only from the specified site, whereas entering <b>MySite</b> clears cookies from all related domains. <br/>
     * Note: This method does not clear the browser's cache. Use clearCache() to clear the cache.
     * @returns {Promise<void>} a promise that is fulfilled after deleting the cookies.
     * @memberof Web.BrowserTO#
     */
    deleteCookies: function(origin){
        if(arguments.length === 0)
            return this._executeWithEvents(arguments, "DeleteCookies");

        if(typeof arguments[0] !== "string")
            throw new Error("When you pass parameter to deleteCookies() it must be a source name (string)");

        return this._executeWithEvents(arguments, "DeleteCookies", origin);
    }

});

/**
 * @enum
 * @memberof Web
 */
var DialogButton = {
    ok: "ok",
    cancel: "cancel"
};

/**
 * Used to filter for the desired browser, when invoking the Attach method of the BrowserFactory.
 * @param {Object} [props] Initializes a WebElement test object using the supplied property bag.
 * @returns {Button} the description object that was initialized.
 * @constructor BrowserFilter
 * @memberof Web
 * @mixes DescriptionBase
 */
function BrowserFilter(props){
    this._init({
        technology: "Web",
        leanftType: "Browser"
    });

    this._defineByPropertyBag(props);
}

/**
 * @ignore
 */
ObjUtils.inherit(BrowserFilter,DescriptionBase,{
    /**
     * The browser's title.
     * @param {string} [title] When provided, this method acts as a setter and sets the title to the specified value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored title; 
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.BrowserFilter#
     */
    title: function (title) {
        return this._propertyHandler("title", title);
    },
    /**
     * The browser's current URL.
     * @param {string} [url] When provided, this method acts as a setter and sets the URL to the specified value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored URL;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.BrowserFilter#
     */
    url: function (url) {
        return this._propertyHandler("url", url);
    },
    /**
     * The URL from which the object is first opened.
     * @param {string} [url] When provided, this method acts as a setter and sets openURL to the specified value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored openURL;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.BrowserFilter#
     */
    openURL: function (url) {
        return this._propertyHandler("openurl", url);
    },
    /**
     * The object's initial title when first opened.
     * @param {string} [title] When provided, this method acts as a setter and sets openTitle to the specified value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored openTitle;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.BrowserFilter#
     */
    openTitle: function (title) {
        return this._propertyHandler("opentitle", title);
    },

    /**
     * The type of browser.
     * @param {string} [browserType] When provided, this method acts as a setter and sets the type property to the specified value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored type;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.BrowserFilter#
     */
    type: function(browserType){
        return this._propertyHandler("version", browserType,
            function(browserType) {
                //converts the browser type to regular expression.
                return browserType === "Firefox" ? /Mozilla Firefox.*/ : new RegExp(browserType + ".*");
            },
            function(versionRegEx) {
                //converts the regular expression back to browser type
                var browserType = versionRegEx.toString().slice(1, versionRegEx.toString().lastIndexOf("/"));  //performs trim(/) from the string
                browserType = browserType.slice(0, browserType.length - 2); //removes the last .*
                return browserType === "Mozilla Firefox" ? "Firefox" : browserType;
            }
        );
    }
});


module.exports.Browser = Browser;
module.exports.DialogButton = DialogButton;
module.exports.BrowserFilter = BrowserFilter;
// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // S3TrdhqBSi+eHFfQ1Ez796CXunt2AKoJUfontu4/W0Kg
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCDp
// SIG // yWI/nno+v06WQSS19bv4wB2BbqjES+A7ggWuzCdCfTAN
// SIG // BgkqhkiG9w0BAQEFAASCAQCKLO0rJG3xWbGpjUt/gtF1
// SIG // /LNTBvowSuGY0ImrxknG2l1sklOmoVt9RCurN54faBPQ
// SIG // p/fnavjGo319hWgJn29XJbjYihdcbPsGzpuywvp22DH/
// SIG // 3QsHTvHCugeDcxXg4khHIP4GYodqu8qXLWS9DFQLmxFM
// SIG // u6LdLV1pmIjVvQYKZEBRfoPmB7GFAJ+kEaNIeM9CGIxu
// SIG // u/o15EtfMvqIpG+TjAN5gumhs9poWFp1xOej8454LNFh
// SIG // lxqNTWnSbrez6PjcBfNGA1zds5lg/L1Npd9HdQ4EMSeX
// SIG // REAs6r2rOZmF/55goFb9z0f33isA5IGM4w12DVxadhG4
// SIG // 22pkRz+aEvXGoYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MjQzNlowIwYJKoZI
// SIG // hvcNAQkEMRYEFGtOcpC+x7ckdFPCc0Nt2eur2KdwMA0G
// SIG // CSqGSIb3DQEBAQUABIIBAG/5w2Ng6d1trPa6aCLlWM0A
// SIG // VU+0ITXRdIaklQXBBbpFsY1r8uzxJfH/WZ7PHL2SVuqH
// SIG // yYMf7/pLypYHM9Pqk9KJ/iYZNZenX4o9TrEQEqhOX+3A
// SIG // 5nqdoI0qqlrrMLz2QCgLjcq5PL4S3xV11Fs6eO6eeBxB
// SIG // mKPmLglxrfJyTXRHSQdyDYN/NWuCppm8QXnp6kGFBaMa
// SIG // Mk72jpYSOzsVeBc+C3JkDCBxb6kPaOtXDzAsKtdgqWhh
// SIG // OTOCaZ3cXwCWwWZMr6/mJS33y02kCYZl5M84hxg1FetE
// SIG // 88sq/EZ3DkU0c9Ip5X+I8AnJrcZQc+aIRIuWJ50dJWde
// SIG // I6swRKbjOQc=
// SIG // End signature block
