// (c) Copyright 2015 Hewlett Packard Enterprise Development LP
/**
 * Created on 12/10/2015.
 * This file contains the definition of the BrowserFactory that will be used to launch or attach to a browser instance.
 */

var Convert = require("leanft.sdk.core").Convert;
var Core = require("leanft.sdk.core");
var Logger = Core.Logger;
var EmulatedDevice =require("./emulated_device.js").EmulatedDevice;
var EmulatedDeviceConverter =require("./emulated_device.js").EmulatedDeviceConverter;

var Browser = require("./browser.js").Browser;
var BrowserFilter = require("./browser.js").BrowserFilter;
var ReplayErrorsBehavior = Core.ReplayErrorsBehavior;
var NotifyEventsBehavior = Core.NotifyEventsBehavior;

/**
 * @enum
 * @memberof Web
 */
var BrowserType = {
    Chrome: "Chrome",
    IE: "Internet Explorer",
    Firefox: "Firefox",
    Edge: "Edge",
    MobileCenterBrowser: "MobileCenterBrowser"
};

/**
 * A tab in an open Web browser.
 * Note: <para>To open a new browser tab, use: {@see Browser.launch}. To access a browser that is already open, use: {@see Web.Browser.attach}.
 * @constructor BrowserTO
 * @memberof Web
 * @class BrowserTO
 * @extends TestObjectBase
 */
function BrowserFactory(session){
    this._logger = new Logger("BrowserFactory");
    if(session === null){
        throw  new Error("The communication channel is mandatory for creating BrowserFactory");
    }

    this._session = session;

    //extends other behaviors
    Core.ObjectUtils.extend(this,ReplayErrorsBehavior);
    Core.ObjectUtils.extend(this,NotifyEventsBehavior);
}

/**
 * @ignore
 */
BrowserFactory.prototype = {
    _logger: null,
    _session: null,

    /**
     * Launches a new browser tab returning an instance of <see cref="IBrowser"/> for the launched browser.
     * The returned browser instance is valid until the tab is closed.
     * @param {string} browserType The type of browser to launch: Possible values: {@link Web.BrowserType}
     * @returns {Promise<Web.BrowserTO>} a promise that is fulfilled with the browser instance.
     * @memberof Web.Browser#
     */
    launch: function(browserType){
        var func = function() {
            this._logger.trace("launch: Called for browser type: " + browserType);

            var launchData = {
                "type": "Browser",
                "launch info": {
                    "type": browserType
                }
            };

            return this._session._communication.send("LaunchApplication", launchData).then(function (launchResult) {
                    this._logger.trace("launch: The result of the launch is \n" + JSON.stringify(launchResult));
                    if (launchResult === null) {
                        throw new Error("launch result cannot be null");
                    }
                    return new Browser(launchResult["AUT cookie"], this._session);
                }.bind(this),
                this._handleError.bind(this, browserType));
        };
        var options = { sender: this, onError:false, calleeArguments: arguments, type: "BrowserFactory"};
        return this.notifyWithEvents(func, arguments, options);
    },

    /**
     * Launches a new browser on emulated device returning an instance of {@link Web.BrowserTO} for the launched browser.
     * The returned browser instance is valid until the tab is closed.
     * @param {string} browserType The type of browser to launch: Possible values: {@link Web.BrowserType}
     * @param {Object | string} [emulatedDevice] The emulated device object (see members below) or the name of predefined emulated device as it appears in Chrome e.g. "iPhone 6" or "Nexus 6P"<br/>
     * Note: the predefined devices are "Galaxy S5","Nexus 5X","Nexus 6P","iPhone 5","iPhone 6","iPhone 6 Plus","iPad".
     * @param {string} [emulatedDevice.name] The name of the emulated device.
     * @param {number} [emulatedDevice.height] The height of the emulated device screen.
     * @param {number} [emulatedDevice.width] The width of the emulated device screen.
     * @param {boolean} [emulatedDevice.isTouchable = true] The touchable capability of the emulated device screen.
     * @param {number} [emulatedDevice.scaleFactor] The scale factor of the emulated device screen.
     * @param {string} [emulatedDevice.userAgent] The UserAgent property of the emulated device.
     * @param {boolean} [emulatedDevice.isMobile = true] The mobile property of the emulated device.
     * @returns {Promise<Web.BrowserTO>} a promise that is fulfilled with the browser instance.
     * @memberof Web.Browser#
     */
    launchEmulated: function(browserType, emulatedDevice){
        /*jshint eqnull:true */
        var func = function() {
            this._logger.trace("launch: Called for browser type: " + browserType);

            if (typeof emulatedDevice === 'string') {
                var emulatedDeviceName = emulatedDevice;
                emulatedDevice = EmulatedDeviceConverter.convert(emulatedDeviceName);
            }
            var launchData = {
                "type": "Browser",
                "launch info": {
                    "type": browserType,
                    "environment": {
                        "type": "EmulatedDevice",
                        "name": emulatedDevice.name,
                        "height": emulatedDevice.height == null? 0 : Convert.toNumber(emulatedDevice.height),
                        "width": emulatedDevice.width == null? 0 : Convert.toNumber(emulatedDevice.width),
                        "touchable": emulatedDevice.isTouchable == null ? true : emulatedDevice.isTouchable,
                        "scaleFactor": emulatedDevice.scaleFactor == null? 1 : Convert.toNumber(emulatedDevice.scaleFactor),
                        "userAgent": emulatedDevice.userAgent,
                        "mobile": emulatedDevice.isMobile == null ? true : emulatedDevice.isMobile,
                        "fit": false
                    }
                }
            };

            return this._session._communication.send("LaunchApplication", launchData).then(function (launchResult) {
                    this._logger.trace("launch: The result of the launch is \n" + JSON.stringify(launchResult));
                    if (launchResult === null) {
                        throw new Error("launch result cannot be null");
                    }
                    return new Browser(launchResult["AUT cookie"], this._session);
                }.bind(this),
                this._handleError.bind(this, browserType));
        };
        var options = { sender: this, onError:false, calleeArguments: arguments, type: "BrowserFactory"};
        return this.notifyWithEvents(func, arguments, options);
    },


    /**
     * Launched a new browser on the passed device returning an instance of {@link Web.BrowserTO} for the launched browser.
     * @param {string} browserType The type of browser to launch: Possible values: {@link Web.BrowserType}.
     * Note: not all devices support all browser types.
     * @param {DeviceTO} device the device to launch the browser on.
     * @returns {Promise<Web.BrowserTO>} a promise that is fulfilled with the browser instance.
     */
    launchDevice: function (browserType, device) {
        /*jshint eqnull:true */
        var func = function() {
            this._logger.trace("launch: Called for browser type: " + browserType);

            if(device == null) {
                throw new Error("device parameter can't be null and must be a valid Mobile device test object");
            }

            var env = device._toJSON();
            env.type = "Device";

            var launchData = {
                "type": "Browser",
                "launch info": {
                    "type": browserType,
                    "environment": env
                }
            };

            return this._session._communication.send("LaunchApplication", launchData).then(function (launchResult) {
                    this._logger.trace("launch: The result of the launch is \n" + JSON.stringify(launchResult));
                    if (launchResult === null) {
                        throw new Error("launch result cannot be null");
                    }
                    return new Browser(launchResult["AUT cookie"], this._session);
                }.bind(this),
                this._handleError.bind(this, browserType));
        };
        var options = { sender: this, onError:false, calleeArguments: arguments, type: "BrowserFactory"};
        return this.notifyWithEvents(func, arguments, options);
    },

    /**
     * Returns a new browser instance that is attached to a browser tab that was not opened by LeanFT (for example, a browser tab that was opened manually or by the AUT). <br/>
     * {@link Web.BrowserFilter} is used only when attaching to the browser so transient properties like {@link Web.BrowserFilter#url|Web.BrowserFilter.url}
     * and {@link Web.BrowserFilter#title|Web.BrowserFilter.title} can be used. <br/>
     * LeanFT recognizes browser windows and tabs that it opens (for example, via {@link Web.Browser#launch|Web.Browser.launch}). 
     * If a browser is opened outside of the LeanFT context, you need to use the {@link Web.Browser#attach|Web.Browser.attach} method to acquire the browser tab or window. 
     * For example: <br/>
     * - A browser tab was opened manually while setting up a scenario prior to running a LeanFT test.<br/>
     * - A test step clicks a link in the AUT that opens a new or replacement browser tab or window.<br/>
     * @param {Web.BrowserFilter} filter The browser filter object, or property bag which contains the browser filter properties. <br/>
     * Example: Web.Browser.attach({type: "Chrome"}).then(function (b) { browser = b; ... });
     * @returns {Promise<Web.BrowserTO>} a promise that is fulfilled with the requested browser or rejected with the relevant error.
     * @memberof Web.Browser#
     */
    attach: function(filter){
        var func = function() {
            this._logger.trace("attach: called with the following filter:" + JSON.stringify(filter));
            filter = filter || new BrowserFilter();
            var browserFilter = filter instanceof BrowserFilter ? filter : new BrowserFilter(filter);

            var attachMessage = {
                "type": "Browser",
                "launch info": {
                    Class: "Browser",
                    Description: browserFilter._toJSON(),
                    Parent: null
                }
            };

            return this._session._communication.send("AttachApplication", attachMessage).then(function (attachResult) {
                    this._logger.trace("attach: The result of the launch is \n" + JSON.stringify(attachResult));
                    if (attachResult === null) {
                        throw new Error("attach result cannot be null");
                    }
                    return new Browser(attachResult["AUT cookie"], this._session);
                }.bind(this),
                this._handleError.bind(this, null));
        };
        var options = { sender: this, onError: false, calleeArguments: arguments, type: "BrowserFactory"};
        return this.notifyWithEvents(func, arguments, options);
    },
    /**
     * Returns a collection of all open {@link Web.Browser} instances that match the {@link Web.BrowserFilter}. <br/>
     * {@link Web.BrowserFilter} is used only when attaching to the browser so transient properties like {@link Web.BrowserFilter#url|Web.BrowserFilter.url}
     * and {@link Web.BrowserFilter#title|Web.BrowserFilter.title} can be used. <br/>
     * LeanFT recognizes browser windows and tabs that it opens (for example, via {@link Web.Browser#launch|Web.Browser.launch}).
     * If a browser is opened outside of the LeanFT context, you need to use the {@link Web.Browser#attach|Web.Browser.attach} method to acquire the browser tab or window. <br/>
     * For example:<br/>
     * - A browser tab was opened manually while setting up a scenario prior to running a LeanFT test.<br/>
     * - A test step clicks a link in the AUT that opens a new or replacement browser tab or window.<br/>
     * @param {Web.BrowserFilter} filter The browser filter object, or property bag which contains the browser filter properties. <br/>
     * Example: Web.Browser.openedBrowsers({type: "Chrome"}).then(function (blist) { list = blist; ... });
     * @returns {Promise<Web.BrowserTO[]>} a promise that is fulfilled with an array of all the requested browsers.
     * @memberof Web.Browser#
     */
    openedBrowsers: function(filter){
        var func = function() {
            this._logger.trace("openedBrowsers: called with the following filter:" + JSON.stringify(filter));
            filter = filter || new BrowserFilter();
            var browserFilter = filter instanceof BrowserFilter ? filter : new BrowserFilter(filter);

            var filterKnownBrowsersMsg = {
                "type": "Browser",
                "launch info": {
                    Class: "Browser",
                    Description: browserFilter._toJSON(),
                    Parent: null
                }
            };

            return this._session._communication.send("GetAllOpenApplication",filterKnownBrowsersMsg).then(function(filteredBrowsersRes){
                    this._logger.trace("attach: The result of the launch is \n" + JSON.stringify(filteredBrowsersRes));
                    if(filteredBrowsersRes === null){
                        throw new Error("filter known browsers result cannot be null");
                    }

                    if(filteredBrowsersRes.Result === undefined){
                        throw new Error("filter known browsers result cannot be null");
                    }

                    if(filteredBrowsersRes.Result === null)
                        return [];

                    return filteredBrowsersRes.Result.map(function(browserInfo){
                        return new Browser(browserInfo.ServerCookie,this._session);
                    },this);
                }.bind(this),
                this._handleError.bind(this,null));
        };
        var options = { sender: this, onError: true, calleeArguments: arguments, type: "BrowserFactory"};
        return this.notifyWithEvents(func, arguments, options);
    },
    /**
     * Handles the errors that are returned from the runtime engine. The method should be used in the rejected of the promise.
     * @param error The exception object. If the error is returned from the runtime, a field of statusCode should be included.
     * @param browserType The type of browser whose operation caused the error. Usually this parameter is binded. If null is provided, it is ignored.
     * @private
     */
    _handleError: function(browserType,error){
        //is it our error?
        if(error.statusCode !== -119){
            return this.handleReplayError(error);
        }

        this._logger.info("launch: The error is related to browser installation ");
        if(Core.StringUtils.isNullOrWhiteSpace(error.message))
            throw new Error("The specified browser " + browserType + " is not installed on the target machine.");

        throw error;
    }
};

module.exports.BrowserFactory = BrowserFactory;
module.exports.BrowserType = BrowserType;

// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // /6IxjX91EG8dfSdyIxcbL2sb0Ke/ITBgYZkEPEgt2xug
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCBe
// SIG // dP/A+w9m8LNPyN5svSIIefikxVNhvj9oYMi/veyQfDAN
// SIG // BgkqhkiG9w0BAQEFAASCAQAp8wcajQcQSdIjnZTBc3dV
// SIG // O88w5P4oz4pA5+1j+2dmS6NPfftJrsDxmDY4X6+5TXKf
// SIG // lyx+tB6G/kaH/ceqByx+0xOi9c0fLMA0aeYDTQsIlJxB
// SIG // Ex+P3X6EvfaJEovf4MPYistx8j3Jj06wpa9CPL2n0S+1
// SIG // IKu1d27mQpzCuEXKkp3M/WBl2kTjSvXCs6PcE3pVHQi6
// SIG // IokMr1glI48DVuufn1AkSEj/RgXaOhoJY+CgGVD09zKj
// SIG // YoV8UFgRM3UuHHzbEmELvzdsuPU84uM3j1PSX0/f/bTU
// SIG // LWy75Vv19BWMV0JB6q9h7z0nfg6FnVH+/boT/6y0WWCt
// SIG // PZbljWL/e/hroYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MTI1MlowIwYJKoZI
// SIG // hvcNAQkEMRYEFNdB+vwLUZ8HdSFH3zYhXsovzYg6MA0G
// SIG // CSqGSIb3DQEBAQUABIIBAEx7WAuLirOkDovC5EJWyvsq
// SIG // TYoqn9UrxsXPCPNWKkxJhF1aa1FXjJ1RCtodHy03ENgk
// SIG // wibKWwx72hyoEs3zLSist9k+LkEFCzyNCZX6our2mBpX
// SIG // nDH3y5Tn+N+JNFMXqvfZU2ZhFDaQV12NOH3sM2fpHLnu
// SIG // LC1LZHNRrTBf3rf91TpzwCJbn5F1KXphTeSBm1QMeoU8
// SIG // 94lO7yuh58UL9WVAzp7VNqOfChNcxpMn3wCREYm/H05o
// SIG // /A348BmwdsXmnOiXc9QFzvBi6EIzneJJNa5bwXm0AAX2
// SIG // dTp/qB/21rlvrlUVx3WeyMPiVPS6fdKMKKFFYJUCB3Pv
// SIG // Rvup2AdtOIM=
// SIG // End signature block
