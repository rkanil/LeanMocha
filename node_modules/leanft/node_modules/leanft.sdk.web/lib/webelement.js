// (c) Copyright 2015 Hewlett Packard Enterprise Development LP
/**
 * Created on 18/10/2015.
 * This file contains all the functionality that is needed for the WebElement test object including
 * TestObject constructor, description constructor , and appropiate behaviors.
 */

var WebBaseTO = require("./web_testobject_base.js").WebBaseTestObject;
var WebBaseDesc = require("./web_testobject_base.js").WebBaseDescription;
var Core = require("leanft.sdk.core");
var ObjectUtils = Core.ObjectUtils;
var Location = Core.Location;
var MouseButton = Core.MouseButton;
var ClickBehavior = Core.ClickBehavior;
var DragAndDropBehavior = Core.DragAndDropBehavior;
var Convert = Core.Convert;
var SwipeDirection = Core.SwipeDirection;

     //* <Description of what the property represents within the real object â€“ Same as C#>
     //* @param {string} [innerHTML] When provided, this method acts as a setter and sets the <TO_prop_name> value.
     //* @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored <TO_prop_name> value;
     //* otherwise it returns 'this' for use with the builder pattern.

/**
 * Common methods for WebElement description
 * @memberof Web
 * @ignore
 */
var WebElementDescriptionBehaviour = {
    /**
     * The path to this object in CSS format. For example: tr.BPTRow input.
     * @param {string} [selector] When provided, this method acts as a setter and sets the css value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored css value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    css: function(selector){
        return this._simplePropertyHandler("css", selector);
    },

    /**
     * The path to this object in XPath format. For example: //TR[@id='LeanFT']/*\/INPUT
     * @param {string} [selector] When provided, this method acts as a setter and sets the xpath value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored xpath value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    xpath: function(selector) {
        return this._simplePropertyHandler("xpath", selector);
    },

    /**
     * The defined role of this object. For example, if the role property is listbox, the object functions as a list box.
     * @param {string} [roleValue] When provided, this method acts as a setter and sets the role value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored role value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    role: function(roleValue){
        return this._simplePropertyHandler("role", roleValue);
    },

    /**
     * The label of the object (where no text label is available).
     * @param {string} [value] When provided, this method acts as a setter and sets the accessibilityName value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored accessibilityName value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    accessibilityName: function(value) {
        return this._propertyHandler("acc_name", value);
    }
};

/**
 * @param {Object} [props] Initializes a WebElement test object using the supplied property bag.
 * @returns {Element} the description object that was initialized.
 * @constructor
 * @memberof Web
 * @extends Web.WebBaseDescription
 * @mixes Web.WebElementDescriptionBehaviour
 * @alias Element
 */
function WebElement(props){
    var elementDescription = new WebBaseDesc("WebElement");

    ObjectUtils.extend(elementDescription,WebElementDescriptionBehaviour);

    elementDescription._defineByPropertyBag(props);

    return elementDescription;
}

/**
 * Common methods shared by WebElement derived methods
 * @memberof Web
 * @ignore
 */
var WebElementTOBehavior = {
    /**
     * Returns the path to this object in CSS format. For example: tr.BPTRow input.
     * @returns {Promise<string>} the path to this object in CSS format.
     */
    css: function() {
        return this._getROProperty("css", arguments);
    },
    /**
     * Returns the path to this object in XPath format. For example: //TR[@id='LeanFT']/*\/INPUT
     * @returns {Promise<string>} the path to this object in XPath format.
     */
    xpath: function() {
        return this._getROProperty("xpath", arguments);
    },
    /**
     * Returns this object's role property.
     * @returns {Promise<string>} this object's role property.
     */
    role: function(){
        return this._getROProperty("role", arguments);
    },
    /**
     * Triggers the specified event on this object.
     * @param {Event | MouseEvent} event The event object describing the event to trigger.  
	 * The event can be any HTML DOM event. For details, see:  http://www.w3schools.com/jsref/dom_obj_event.asp
     * @returns {Promise<void>} a promise that is fulfilled with the triggered event.
     */
    fireEvent: function(event){
        if(!event.type)
            throw new Error("The event object must include the event type");
        if(event.location)
            return this._executeWithEvents(arguments, "FireEvent", event.type, event.location, MouseButton._convert(event.button));

        return this._executeWithEvents(arguments,"FireEvent", event.type);
    },

    /*jshint eqnull:true */
    /**
     * Clicks this object twice according to the specified behavior.
     * @param {Object} [webDoubleClickArgs] Arguments that define additional behavior for double-click operations.
     * @param {Location} [webDoubleClickArgs.location] The location to perform the double-click.
     * @param {Number} [webDoubleClickArgs.interval = 0.2] The number of seconds between the first click and the second click.
     * @returns {Promise<void>} a promise that is fulfilled when the method is called.<br/>
     * Remark: If you are testing a Web or hybrid mobile application on a Mobile device, this method is equivalent to performing a DoubleTap gesture.
     */
    doubleClick: function(webDoubleClickArgs) {

        if(webDoubleClickArgs == null){
            return this._executeWithEvents(arguments, "DoubleClick");
        }

        webDoubleClickArgs.interval = isNaN(webDoubleClickArgs.interval) ? 0.2 : webDoubleClickArgs.interval;

        return this._executeWithEvents(arguments, "DoubleClick", Convert.toNumber(webDoubleClickArgs.interval), Location(webDoubleClickArgs.location));
    },

    /*jshint eqnull:true */
    /**
     * When hover is supported, places the pointer on this object. Otherwise, taps the object at the specified location.
     * If 'location' is not provided, the tap is performed at the center of the object.
     * @param {Location} [location] The arguments for the hover-tap operation.
     * @returns {Promise<void>} a promise that is fulfilled when the method is called.
     */
    hoverTap: function (location) {

        if (location == null) {
            return this._executeWithEvents(arguments, "HoverTap");
        }

        return this._executeWithEvents(arguments, "HoverTap", Location(location));
    },

    /*jshint eqnull:true */
    /**
     * Presses and holds this object according to the specified behavior.
     * @param {Object} [webLongPressArgs] Arguments object that defines the behavior of the longPress operation.
     * @param {number} [webLongPressArgs.duration = 0.25] The number of seconds to continue pressing.
     * @param {Location} [webLongPressArgs.location] The location where the operation is performed.
     * @returns {Promise<void>} a promise that is fulfilled after long-pressing the center of the object or the specific location defined by the user.<br/>
     * Remark: This method is not supported in Internet Explorer.
     */
    longPress: function (webLongPressArgs) {

        if (webLongPressArgs == null) {
            return this._executeWithEvents(arguments, "LongPress");
        }

        if(typeof webLongPressArgs !== "object")
            throw new Error("Only object is allowed to pass to longPress() method");

        webLongPressArgs.duration = webLongPressArgs.duration != null ? webLongPressArgs.duration : 0.25;

        return this._executeWithEvents(arguments, "LongPress", Convert.toNumber(webLongPressArgs.duration), Location(webLongPressArgs.location));
    },

    /*jshint eqnull:true */
    /**
     * Performs a pinch gesture on this object according to the scale or specified behavior.
     * @param {number} [scale] The scale for the pinch gesture. This number is the ratio between the start distance and the end distance between the two touch points used for the pinch.<br/>
     * For example, if you were to touch a screen with your fingers 6 cm apart, and pinch until your fingers were 3 cm apart, the scale would be 0.5.
     * @param {Object} [pinchArgs] Arguments object that defines the behavior of the pinch operation.
     * @param {Location} [pinchArgs.location] The location at which to perform the operation.
     * @param {number} [pinchArgs.duration = 1] The number of seconds to perform the pinch.
     * @returns {Promise<void>} a promise that is fulfilled after the pinch has occurred.<br/>
     * Remark: This method is not supported in Internet Explorer.
     */
    pinch: function(scale, pinchArgs){

        if(scale == null)
            throw new Error("You must supply scale value to pinch() method");

        if(pinchArgs == null)
            return this._executeWithEvents(arguments, "Pinch", Convert.toNumber(scale));

        pinchArgs.duration = pinchArgs.duration != null ? pinchArgs.duration : 1;

        return this._executeWithEvents(arguments, "Pinch", Convert.toNumber(scale), Convert.toNumber(pinchArgs.duration), Location(pinchArgs.location));
    },

    /*jshint eqnull:true */
    /**
     * Performs a pan gesture on this object according to the specified distance parameters.
     * @param {number} [deltaX] The distance moved on the x-axis.
     * @param {number} [deltaY] The distance moved on the y-axis.
     * @param {Object} [webPanArgs] Arguments object that defines the behavior of the pan operation.
     * @param {Location} [webPanArgs.location] The location at which to perform operation.
     * @param {number} [webPanArgs.duration = 0.5] The number of seconds to perform the pan.
     * @returns {Promise<void>} a promise that is fulfilled after the pan has occurred. <br/>
     * Remark: This method is not supported in Internet Explorer.
     */
    pan: function(deltaX, deltaY, webPanArgs) {

        if(webPanArgs == null) {
            return this._executeWithEvents(arguments, "Pan", Convert.toNumber(deltaX), Convert.toNumber(deltaY));
        }

        if(typeof webPanArgs !== "object")
            throw new Error("Only object is allowed to pass to pinch() method");

        webPanArgs.duration = webPanArgs.duration != null ? webPanArgs.duration : 0.5;

        return this._executeWithEvents(arguments, "Pan", Convert.toNumber(deltaX), Convert.toNumber(deltaY), Convert.toNumber(webPanArgs.duration), Location(webPanArgs.location));

    },

    /*jshint eqnull:true */
    /**
     * Swipes the object in the specified direction or according to the specified behavior.
     * @param {SwipeDirection} [swipeDirection] The direction of the swipe.
     * @param {object} [webSwipeArgs] Arguments object that defines the behavior of the swipe operation.
     * @param {Location} [webSwipeArgs.location] The location where the operation is performed.
     * @param {number} [webSwipeArgs.duration = 0.25] The number of seconds to perform the swipe.
     * @param {number} [webSwipeArgs.distance = 200] The distance (in pixels) to swipe.
     * @returns {Promise<void>} a promise that is fulfilled after the swipe has occurred.<br/>
     * Remark: This method is not supported in Internet Explorer.
     */
    swipe: function(swipeDirection, webSwipeArgs){

        if(swipeDirection == null)
            throw new Error("You must supply swipe direction to swipe() method");

        if(typeof swipeDirection !== "string")
            throw new Error("The swipe direction must be a string type");

        swipeDirection = SwipeDirection._convert(swipeDirection);

        if(webSwipeArgs == null)
            return this._executeWithEvents(arguments, "Swipe", swipeDirection);

        if(typeof webSwipeArgs !== "object")
            throw new Error("Only object is allowed to pass to swipe() method");

        webSwipeArgs.distance = webSwipeArgs.distance != null ? webSwipeArgs.distance : 200;
        webSwipeArgs.duration = webSwipeArgs.duration != null ? webSwipeArgs.duration : 0.25;

        return this._executeWithEvents(arguments, "Swipe", swipeDirection,
                                        Convert.toNumber(webSwipeArgs.distance),
                                        Convert.toNumber(webSwipeArgs.duration),
                                        Location(webSwipeArgs.location));

    },



};

/**
 * The HTML event to be used with the FireEvent method.
 * @param {string} type The event name. For example, "keypress", "keydown", etc.
 * @constructor
 * @memeberof Web
 * @ignore
 */
function Event(type){
    if(typeof type !== "string")
        throw new Error("You must supply the type of event to crate a new Event.");
    this.type = "on" + type;
}

/**
 * The HTML mouse event to be used with the FireEvent method.
 * @param {string} type The event name.
 * @param {Object} [args] Arguments for the MouseEvent.
 * @param {MouseButton} [args.button = MouseButton.left] The mouse button to use for the event.
 * @param {Position} [args.anchor = Position.center] The position within the object from which the offset is taken.
 * @param {Object} [args.offset] The offset from the anchor position.
 * @param {Number} [args.offset.x = 0] The x-coordinate of the offset.
 * @param {Number} [args.offset.y = 0] The y-coordinate of the offset.
 * @constructor
 * @memeberof Web
 * @ignore
 */
function MouseEvent(type, args){
    args = args || {};
    if(typeof type !== "string")
        throw new Error("You must supply the type of event to crate a new MouseEvent.");
    this.type = "on" + type;
    this.location = Location(args);
    this.button = args.button || MouseButton.left;
}

/**
 * Base object for all Web test objects. <br/>
 * Remark: Any DIV tag can be represented as a WebElement. In addition, any other Web element can be referred to as a WebElement. For example, a button can be identified as a WebElement, but not vice versa.
 * @class WebElementTO
 * @memberof Web
 * @constructor
 * @extends Web.WebBaseTestObject
 * @mixes Web.WebElementTOBehavior
 * @mixes ClickBehavior
 * @mixes DragAndDropBehavior
 */
function WebElementTO(session,description){
    var webElementTO = new WebBaseTO("WebElement",session,description);

    ObjectUtils.extend(webElementTO, ClickBehavior);
    ObjectUtils.extend(webElementTO, DragAndDropBehavior);
    ObjectUtils.extend(webElementTO, WebElementTOBehavior);

    return webElementTO;
}

module.exports.Event = Event;
module.exports.MouseEvent = MouseEvent;
module.exports.WebElement = WebElement;
module.exports.WebElementTO = WebElementTO;
module.exports.WebElementDescriptionBehaviour = WebElementDescriptionBehaviour;
module.exports.WebElementTOBehavior = WebElementTOBehavior;
// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // zWCM+ytC39eXJbXgWBgtgYpvv1vcKz+3mku3LojMomOg
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCBJ
// SIG // LN69w6CO70oBwALSivX78U04F6TlRGqRq8BRGPj25zAN
// SIG // BgkqhkiG9w0BAQEFAASCAQA0ab99l4vpCvXLhoE0FVVe
// SIG // e5f5BzYpr+FPxHRIlRhh8plPdE30UQAVyW1guosJ8rfn
// SIG // xWge5NxDAOI8LPRTBvBAAC0kYT4PDvcBawBCVz03UVkH
// SIG // wTh7F9m2pjxYaYyZMUpbuG0rNd/2sHdzgQlfJLW2ZyJN
// SIG // ygX6mKXE1x/Vxxwdje89WvMS0m8UhBlYy6WFeKFHm09O
// SIG // gKNsSith0Q8Gs9nrOVldikdV6I1906ROfid6+ifo1l41
// SIG // 1v/nqPuUtXealW3jGskzrq3soEopTIwW460vHJWR+akM
// SIG // sSY9xekvgBRPPNPHqD24GgclJw/DNbQ81Ms1veOkc46Y
// SIG // prJYnCGxZzBGoYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MjUzMFowIwYJKoZI
// SIG // hvcNAQkEMRYEFPjBl2SBSzmcujo9GyDWZtqMv6C4MA0G
// SIG // CSqGSIb3DQEBAQUABIIBAJLeYcuwexn/I0HRLfsJvjuq
// SIG // HZDWRIaBxoz8wIF3ifpBbWg016OP/rP0uAbx5tRhpebS
// SIG // n3tq9sX3cOiAumjfZP4+XwPjAQ6BvLec+GcaQFnbxOpB
// SIG // KIIf/QkVCD0RUT8hLEr+XSKsVY9VcAdvnFda1mgQ8HrA
// SIG // ywIU0KzjDPjei7MrenF18uQaCWXIukLOTYeHpgkb/ZH9
// SIG // JT0keLJpiwuV4SDVRWfD82FkumM0ayFTH6xafbx6e5PS
// SIG // 53p6OHpFrgP8+0N0fipkDSWTKdrqa3VKj3ULBZ9O3VCh
// SIG // mDurqDN1Iw8/qDrZGKfprnK9XM5VFgBoFCuIBlBVU7dY
// SIG // QPzSdwd8VUQ=
// SIG // End signature block
