// (c) Copyright 2015 Hewlett Packard Enterprise Development LP
/**
 * Created on 26/11/2015.
 */

var Convert = require("leanft.sdk.core").Convert;
var HelperFuncs = require("./helper_behaviors.js").HelperFuncs;
var ObjUtils = require("leanft.sdk.core").ObjectUtils;
var ArrayUtils = require("leanft.sdk.core").ArrayUtils;
var ClickBehavior = require("leanft.sdk.core").ClickBehavior;
var DragAndDropBehavior = require("leanft.sdk.core").DragAndDropBehavior;
var WebBase = require("./web_testobject_base.js").WebBaseTestObject;
var WebBaseDesc = require("./web_testobject_base.js").WebBaseDescription;
var WebElement = require("./webelement.js");
var IsEnabledBehavior = require("./helper_behaviors.js").IsEnabledBehavior;
var FormFieldBehavior = require("./helper_behaviors.js").FormFieldBehavior;

/**
 * @ignore
 * @memberof Web
 */
var ListBoxDescriptionBehavior = {
    /**
     * The object's text value.
     * @param {string} [value] When provided, this method acts as a setter and sets the value value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored value value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    value: function(value) {
        return this._propertyHandler("value", value);
    },

    /**
     * The initial text value, which is set when the object is reset.
     * @param {string} [value] When provided, this method acts as a setter and sets the defaultValue value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored defaultValue value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    defaultValue: function(value) {
        return this._propertyHandler("default value", value);
    },

    /**
     * The first item in the list of items in the list.
     * @param {string} [value] When provided, this method acts as a setter and sets the firstItem value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored firstItem value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    firstItem: function(value) {
        return this._propertyHandler("first item", value);
    },

    /**
     * Indicates whether multi-selection is available.
     * @param {bool} [multiple] When provided, this method acts as a setter and sets the isMultiple value.
     * @returns {bool | Description} If no parameter is provided, the method acts as a getter and returns the current stored isMultiple value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isMultiple: function(multiple) {
        return this._propertyHandler("multiple", multiple, null, null, Convert.toBool);
    },

    /**
     * The number of visible items in the list.
     * @param {number} [count] When provided, this method acts as a setter and sets the visibleItemsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored visibleItemsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    visibleItemsCount: function(count) {
        return this._propertyHandler("visible items", count, null, null, Convert.toNumber);
    },

    /**
     * An array of all items in the list.
     * @param {string[]} [items] When provided, this method acts as a setter and sets the items value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored items value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    items: function(items) {
        return this._propertyHandler("all items", items,
            HelperFuncs.stringJoin(";"), HelperFuncs.stringSplit(";"));
    },

    /**
     * An array of all selected items in the list.
     * @param {string[]} [items] When provided, this method acts as a setter and sets the selectedItems value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedItems value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedItems: function(items) {
        return this._propertyHandler("selection", items,
            HelperFuncs.stringJoin(";"), HelperFuncs.stringSplit(";"));
    }
};

/**
 * The description of a Web ListBox test object.
 * @param {Object} [props] Initializes a WebElement test object using the supplied property bag.
 * @returns {ListBox} the description object that was initialized.
 * @constructor
 * @memberof Web
 * @extends Web.WebBaseDescription
 * @mixes Web.WebElementDescriptionBehaviour
 * @mixes Web.IsEnabledBehavior
 * @mixes Web.FormFieldBehavior
 * @mixes Web.ListBoxDescriptionBehavior
 */
function ListBox(props){
    var listBoxDescription = new WebBaseDesc("ListBox");

    ObjUtils.extend(listBoxDescription, IsEnabledBehavior);
    ObjUtils.extend(listBoxDescription, FormFieldBehavior);
    ObjUtils.extend(listBoxDescription, WebElement.WebElementDescriptionBehaviour);
    ObjUtils.extend(listBoxDescription, ListBoxDescriptionBehavior);

    listBoxDescription._defineByPropertyBag(props);

    return listBoxDescription;
}

/**
 *
 *  A drop-down or multiple-selection Web list.
 *  HTML example with the second value selected: </para>
 *  @example
 *  <select name="select">
 *    <option value="value1">Value 1</option>
 *    <option value="value2" selected>Value 2</option>
 *    <option value="value3>Value 3</option>
 * </select>
 * @class ListBoxTO
 * @memberof Web
 * @constructor
 * @extends Web.WebBaseTestObject
 * @mixes Web.WebElementTOBehavior
 * @mixes ClickBehavior
 * @mixes DragAndDropBehavior
 * @mixes Web.ListBoxTOBehavior
 */
function ListBoxTO(session, description) {
    var listBoxTO = new WebBase("WebList", session, description);

    ObjUtils.extend(listBoxTO, ClickBehavior);
    ObjUtils.extend(listBoxTO, DragAndDropBehavior);
    ObjUtils.extend(listBoxTO,WebElement.WebElementTOBehavior);
    ObjUtils.extend(listBoxTO,ListBoxTOBehavior);

    return listBoxTO;
}

/**
 * @memberof Web
 * @ignore
 */
var ListBoxTOBehavior = {
    /**
     * Returns the object's text value.
     * @returns {Promise<string>} a promise that is fulfilled with the object's text value.
     */
    value: function(){
        return this._getROProperty("value", arguments);
    },

    /**
     * Returns the initial text value, which is set when the object is reset.
     * @returns {Promise<string>} a promise that is fulfilled with the initial text value, which is set when the object is reset.
     */
    defaultValue: function(){
        return this._getROProperty("default value", arguments);
    },

    /**
     * Returns true if the list box is enabled.
     * @returns {Promise<boolean>} a promise that is fulfilled with true if the list box is enabled.
     */
    isEnabled: function(){
        return this._getROProperty("disabled", arguments).then(HelperFuncs.intToOppositeBool);
    },

    /**
     * Returns true if multi-selection is available.
     * @returns {Promise<boolean>} a promise that is fulfilled with true if multi-selection is available.
     */
    isMultiple: function(){
        return this._getROProperty("multiple", arguments).then(HelperFuncs.intToBool);
    },

    /**
     * Returns the number of items in the list.
     * @returns {Promise<number>} a promise that is fulfilled with the number of items in the list.
     */
    visibleItemsCount: function() {
        return this._getROProperty("visible items", arguments);
    },

    /**
     * Returns an array of all items in the list.
     * @returns {Promise<string[]>} a promise that is fulfilled with an array of all items in the list.
     */
    items: function() {
        return this._getROProperty("all items", arguments).then(HelperFuncs.stringSplit(";"));
    },

    /**
     * Returns an array of all selected items in the list.
     * @returns {Promise<string[]>} a promise that is fulfilled with an array of all selected items in the list.
     */
    selectedItems: function() {
        return this._getROProperties(arguments, "selected item index", "all items").then(function(res) {
            var indicesStr = res[0];

            if (indicesStr) {
                var selectedIndices = indicesStr.split(";");
                var allItems = res[1].split(";");

                return selectedIndices.map(function(selectedIndex){
                    return allItems[selectedIndex];
                });
            }

            return [];
        });
    },

    /**
     * The type of object as defined in the HTML input tag.
     * @returns {Promise<string>} a promise that is fulfilled with the type of object as defined in the HTML input tag.
     */
    type: function () {
        return this._getROProperty("type", arguments);
    },

    /**
     * Selects a list of items in the list box.
     * @param {...number | string} item You can pass as many items as like, each item can be either the name of the item you wish to select,
     * or the numeric index of the item in the list. <br/>
     * Example: listBox.select("someItem", 2, "anotherItem");
     * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
     */
    select: function(item) {
        return this._executeOnItemsCollection(arguments, "Select", "ExtendSelect", ArrayUtils.toArray(arguments), HelperFuncs.itemTransform);
    },

    /**
     * Deselects a list of items in the list box.
     * @param {...number | string} item you can pass as many items as like, each item can be either the name of the item you wish to select,
     * or the numeric index of the item in the list. <br/>
     * Example: listBox.deselect("someItem", 2, "anotherItem");
     * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
     */
    deselect: function(item) {
        return this._executeSingleOpOnCollection(arguments, "DeSelect", ArrayUtils.toArray(arguments), HelperFuncs.itemTransform);
    },

    /**
     * Makes an item in the list visible.
     * @param {string} item The menu item to make visible.
     * @param {string} xPath The xPath value of the control to press to make the item visible in the list.
     * @param {number} [timeOut] The amount of time to wait for the item to become visible. Default is 20 seconds.
     * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
     */
    makeItemVisible: function(item, xPath, timeOut) {
        timeOut = timeOut === undefined ? 20 : timeOut;
        if (typeof item === "number"){
            var itemIndex = item;
            return this.items().then(function(items) {
                if(itemIndex < 0 || itemIndex > items.length) {
                    throw new Error("item value is out of bounds");
                }

                var text = items[itemIndex];
                return this._executeWithEvents(arguments, "MakeItemVisible", text, xPath, timeOut);
            }.bind(this));
        }
        return this._executeWithEvents(arguments, "MakeItemVisible", item, xPath, timeOut);
    }

};

module.exports.ListBoxDescriptionBehavior = ListBoxDescriptionBehavior;
module.exports.ListBoxTOBehavior = ListBoxTOBehavior;
module.exports.ListBox = ListBox;
module.exports.ListBoxTO = ListBoxTO;
// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // HZsrgeAuJLQcA8rpDANnAZ+WMLV/AsmwisDovh1mgfCg
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCAI
// SIG // czUJtnbdok4XaEnQjmIsIjeR9I5Mg7ESDGBxsbFkyTAN
// SIG // BgkqhkiG9w0BAQEFAASCAQAALjMk/MjqM1lDSqkPm7xd
// SIG // MG9GsLWxFHJ0Yccx4qOwxEht+G5q7iG5yeTLq+UaPj0R
// SIG // bP7bM92n7lYkmJOBW+IMwWj3+71gLU8AquQfygES2XGv
// SIG // TgZpYy6os6bydtx6keP3cWI5FuGMtiSoWZYt3sbzr2cd
// SIG // x3+2/H8/TvpIJ7laac1MrNIBp+Fietkizysbbo7Cnoka
// SIG // ZdOEaNpO2tVniH2AVsRdy4qMNQ2t0qEBTap4wSncF+9C
// SIG // /bxIHG6SG92B5PYRXOu5LOjzKVtMbzAmLeCmFjcAK/Zs
// SIG // ChLrv/ZeU55alo/3j6rx9nGqYwZE62a+yruAY9L9/+3h
// SIG // yxKWaevFLpbMoYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MjM1OVowIwYJKoZI
// SIG // hvcNAQkEMRYEFJSlrsF+yFkX1G5h2+yDOb7ZXH9ZMA0G
// SIG // CSqGSIb3DQEBAQUABIIBAGbPt3MP8KeUxreAQIFLrfBf
// SIG // GdAGuce3kdixmydcZPFPLrzuOfLxjeEl/22jfiEkjYm/
// SIG // aM0xGK8uAjKOP+OHRtKiDQN6G2Eci19Qv+JJyjxX0bWG
// SIG // S5UHUfzhj0MNXFvkUbkQfmY/bNcc4TT9rwcGWSg0dg9E
// SIG // 3CzyorbpGTrHrQ9VqP/D6/s4HFHCzs6WgDdJyaeOGtY7
// SIG // wcrsV6u4t0cD3/ILHpqCGZ7M04soXe0Yyr4+IJphuPdx
// SIG // nhEi/VBBMAD+0+8XaNaQ4xTQVgiDtZDTESmQZmAdxEzY
// SIG // fnWi370hjT+HwNWUeEKHO+Zm9YW7h7SVXihFptWrag4m
// SIG // kLXX8UGSwkc=
// SIG // End signature block
