// (c) Copyright 2015 Hewlett Packard Enterprise Development LP
/**
 * Created on 08/12/2015.
 * Holds unittests for the browser factory
 */

var sinon = require("sinon");
var assert = require("assert");
var BrowserFactory = require("../lib/browser_factory.js").BrowserFactory;
var Browser = require("../lib/browser.js").Browser;
var BrowserFilter =require("../lib/browser.js").BrowserFilter;
var EmulatedDevice =require("../lib/emulated_device.js").EmulatedDevice;

describe("BrowserFactory",function(){
   var browserFactoryUnderTest;
    var sessionMock;
    beforeEach(function(){
        sinon.stub(Browser.prototype.__super,"$");
        sessionMock = {
            _communication: {
                send: sinon.stub()
            },
            fireEvent: sinon.stub(),
            _promiseManager: {rootBranchThen :sinon.stub() }
        };
        browserFactoryUnderTest = new BrowserFactory(sessionMock);
    });

    describe("launch",function(){
        var launchPromise;
        var funcPromise;
       beforeEach(function(){
           launchPromise = {
               then: sinon.stub()
           };
           funcPromise = {
               then: sinon.stub()
           };
           sessionMock._communication.send.returns(launchPromise);
           launchPromise.then.returns(funcPromise);
       });

        it("should send the launch message",function(){
           browserFactoryUnderTest.launch("SomeBrowser");

            assert(sessionMock._communication.send.calledOnce);
            assert.strictEqual(sessionMock._communication.send.firstCall.args[0],"LaunchApplication");
            assert.deepEqual(sessionMock._communication.send.firstCall.args[1],{
                "type": "Browser",
                "launch info": {
                    "type": "SomeBrowser"
                }
            });
        });

        it("should throw error in case the launch result is null",function(){
            launchPromise.then.callsArgWith(0,null);

            assert.throws(function(){
                browserFactoryUnderTest.launch("SomeBrowser");
            });
        });

        it("should create a new browser with the given cookie",function(){
            browserFactoryUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };

            launchPromise.then = function(fullfill){
                return fullfill({
                    "AUT cookie": 42
                });
            };
            funcPromise.then = function(browser){
                return fullfill({
                    "AUT cookie": 42
                });
            };
            var res = browserFactoryUnderTest.launch("SomeBrowser");
            assert(res instanceof Browser);
            assert.strictEqual(res._cookie,42);
        });

        it("should throw the given exception in case the error code is not -119 (browser not installed)",function(){
            var error = new Error("SomeError");
            error.statusCode = -100;
            launchPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.launch("SomeBrowser");
            },/SomeError/);
        });

        it("should generate a message in case not present in the exception)",function(){
            var error = new Error("");
            error.statusCode = -119;
            launchPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.launch("SomeBrowser");
            },/The specified browser SomeBrowser is not installed on the target machine/);
        });
    });

    describe("launchEmulated",function(){
        var launchPromise;
        var funcPromise;
        beforeEach(function(){
            launchPromise = {
                then: sinon.stub()
            };
            funcPromise = {
                then: sinon.stub()
            };
            sessionMock._communication.send.returns(launchPromise);
            launchPromise.then.returns(funcPromise);
        });

        it("should send the launch message",function(){
            browserFactoryUnderTest.launchEmulated(
                "SomeBrowser",
                {
                    "name": "Some Emulated Device",
                    "height": 800,
                    "width": 450,
                    "isTouchable": true,
                    "scaleFactor": 2,
                    "userAgent": "Some user agent string",
                    "isMobile": true
                }
            );

            assert(sessionMock._communication.send.calledOnce);
            assert.strictEqual(sessionMock._communication.send.firstCall.args[0],"LaunchApplication");
            assert.deepEqual(sessionMock._communication.send.firstCall.args[1],{
                "type": "Browser",
                "launch info": {
                    "type": "SomeBrowser",
                    "environment": {
                        "type": "EmulatedDevice",
                        "name": "Some Emulated Device",
                        "height": 800,
                        "width": 450,
                        "touchable": true,
                        "scaleFactor": 2,
                        "userAgent": "Some user agent string",
                        "mobile": true,
                        "fit": false
                    }
                }
            });
        });

        it("should send the correct message with default values",function(){
            browserFactoryUnderTest.launchEmulated(
                "SomeBrowser",
                {
                    "name": "Some Emulated Device",
                    "userAgent": "Some user agent string"
                }
            );

            assert(sessionMock._communication.send.calledOnce);
            assert.strictEqual(sessionMock._communication.send.firstCall.args[0],"LaunchApplication");
            assert.deepEqual(sessionMock._communication.send.firstCall.args[1],{
                "type": "Browser",
                "launch info": {
                    "type": "SomeBrowser",
                    "environment": {
                        "type": "EmulatedDevice",
                        "name": "Some Emulated Device",
                        "height": 0,
                        "width": 0,
                        "touchable": true,
                        "scaleFactor": 1,
                        "userAgent": "Some user agent string",
                        "mobile": true,
                        "fit": false
                    }
                }
            });
        });

        it("should send the correct message using predefined emulated device object",function(){
            browserFactoryUnderTest.launchEmulated("SomeBrowser", EmulatedDevice.IPhone6);

            assert(sessionMock._communication.send.calledOnce);
            assert.strictEqual(sessionMock._communication.send.firstCall.args[0],"LaunchApplication");
            assert.deepEqual(sessionMock._communication.send.firstCall.args[1],{
                "type": "Browser",
                "launch info": {
                    "type": "SomeBrowser",
                    "environment": {
                        "type": "EmulatedDevice",
                        "name": "Apple iPhone 6",
                        "width": 375,
                        "height": 667,
                        "scaleFactor": 2,
                        "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4",
                        "touchable": true,
                        "mobile": true,
                        "fit": false
                    }
                }
            });
        });

        it("should send the correct message using predefined emulated device name",function(){
            browserFactoryUnderTest.launchEmulated("SomeBrowser", "iPhone 6");

            assert(sessionMock._communication.send.calledOnce);
            assert.strictEqual(sessionMock._communication.send.firstCall.args[0],"LaunchApplication");
            assert.deepEqual(sessionMock._communication.send.firstCall.args[1],{
                "type": "Browser",
                "launch info": {
                    "type": "SomeBrowser",
                    "environment": {
                        "type": "EmulatedDevice",
                        "name": "Apple iPhone 6",
                        "width": 375,
                        "height": 667,
                        "scaleFactor": 2,
                        "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4",
                        "touchable": true,
                        "mobile": true,
                        "fit": false
                    }
                }
            });
        });

        it("should throw error in case the launch result is null",function(){
            launchPromise.then.callsArgWith(0,null);

            assert.throws(function(){
                browserFactoryUnderTest.launchEmulated("SomeBrowser", EmulatedDevice.IPhone6);
            });
        });

        it("should create a new browser with the given cookie",function(){
            browserFactoryUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };

            launchPromise.then = function(fullfill){
                return fullfill({
                    "AUT cookie": 42
                });
            };
            funcPromise.then = function(browser){
                return fullfill({
                    "AUT cookie": 42
                });
            };
            var res = browserFactoryUnderTest.launchEmulated("SomeBrowser", EmulatedDevice.IPhone6);
            assert(res instanceof Browser);
            assert.strictEqual(res._cookie,42);
        });

        it("should throw the given exception in case the error code is not -119 (browser not installed)",function(){
            var error = new Error("SomeError");
            error.statusCode = -100;
            launchPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.launchEmulated("SomeBrowser", EmulatedDevice.IPhone6);
            },/SomeError/);
        });

        it("should generate a message in case not present in the exception)",function(){
            var error = new Error("");
            error.statusCode = -119;
            launchPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.launchEmulated("SomeBrowser", EmulatedDevice.IPhone6);
            },/The specified browser SomeBrowser is not installed on the target machine/);
        });
    });
    
    describe("launchDevice", function () {
        var launchPromise;
        var funcPromise;
        var deviceMock;
        beforeEach(function(){
            launchPromise = {
                then: sinon.stub()
            };
            funcPromise = {
                then: sinon.stub()
            };
            sessionMock._communication.send.returns(launchPromise);
            launchPromise.then.returns(funcPromise);

            deviceMock = {_toJSON: sinon.stub().returns({ServerCookie:"someCookie"})};
        });

        it("should send the launch message",function(){
            browserFactoryUnderTest.launchDevice("SomeBrowser", deviceMock);

            assert(sessionMock._communication.send.calledOnce);
            assert.strictEqual(sessionMock._communication.send.firstCall.args[0],"LaunchApplication");
            assert.deepEqual(sessionMock._communication.send.firstCall.args[1],{
                "type": "Browser",
                "launch info": {
                    "type": "SomeBrowser",
                    "environment": {
                        "type": "Device",
                        "ServerCookie": "someCookie"
                    }
                }
            });
        });

        it("should throw error if device parameter is null", function () {
            assert.throws(function(){
                browserFactoryUnderTest.launchDevice("SomeBrowser", null);
            });
        });

        it("should throw error if device parameter is undefined", function () {
            assert.throws(function(){
                browserFactoryUnderTest.launchDevice("SomeBrowser", undefined);
            });
        });

        it("should throw error in case the launch result is null",function(){
            launchPromise.then.callsArgWith(0,null);

            assert.throws(function(){
                browserFactoryUnderTest.launchDevice("SomeBrowser", deviceMock);
            });
        });

        it("should create a new browser with the given cookie",function(){
            browserFactoryUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };

            launchPromise.then = function(fullfill){
                return fullfill({
                    "AUT cookie": 42
                });
            };
            funcPromise.then = function(browser){
                return fullfill({
                    "AUT cookie": 42
                });
            };
            var res = browserFactoryUnderTest.launchDevice("SomeBrowser", deviceMock);
            assert(res instanceof Browser);
            assert.strictEqual(res._cookie,42);
        });

        it("should throw the given exception in case the error code is not -119 (browser not installed)",function(){
            var error = new Error("SomeError");
            error.statusCode = -100;
            launchPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.launchDevice("SomeBrowser", deviceMock);
            },/SomeError/);
        });

        it("should generate a message in case not present in the exception)",function(){
            var error = new Error("");
            error.statusCode = -119;
            launchPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.launchDevice("SomeBrowser", deviceMock);
            },/The specified browser SomeBrowser is not installed on the target machine/);
        });
    });

    describe("attach",function(){
        var attachPromise;
        var funcPromise;
        beforeEach(function(){
            attachPromise = {
                then: sinon.stub()
            };
            funcPromise = {
                then: sinon.stub()
            };
            sessionMock._communication.send.returns(attachPromise);
            sessionMock.fireEvent.returns(attachPromise);
            attachPromise.then.returns(funcPromise);
        });

        it("should create an empty browser filter in case null is no filter was provided",function(){
            var expectedMessage = {
                "type": "Browser",
                "launch info": {
                    Class: "Browser",
                    Description: {
                        Properties: {},
                        Index: undefined
                    },
                    Parent: null
                }
            };

            browserFactoryUnderTest.attach();

            assert(sessionMock._communication.send.calledOnce);
            assert.deepEqual(sessionMock._communication.send.firstCall.args,["AttachApplication",expectedMessage ]);
        });

        it("should create browser filter in case filter is provided as property bag",function(){
            var expectedMessage = {
                "type": "Browser",
                "launch info": {
                    Class: "Browser",
                    Description: {
                        Properties: {},
                        Index: undefined
                    },
                    Parent: null
                }
            };

            browserFactoryUnderTest.attach({});

            assert(sessionMock._communication.send.calledOnce);
            assert.deepEqual(sessionMock._communication.send.firstCall.args,["AttachApplication",expectedMessage ]);
        });

        it("should send the attach message after converting the browser filter to JSON",function(){
            var expectedMessage = {
                "type": "Browser",
                "launch info": {
                    Class: "Browser",
                    Description: "SomeValue",
                    Parent: null
                }
            };
            var browserFilter = new BrowserFilter();
            sinon.stub(browserFilter,"_toJSON").returns("SomeValue");

            browserFactoryUnderTest.attach(browserFilter);

            assert(browserFilter._toJSON.calledOnce);
            assert(sessionMock._communication.send.calledOnce);
            assert.deepEqual(sessionMock._communication.send.firstCall.args,["AttachApplication",expectedMessage ]);

        });

        it("should throw error in case the launch result is null",function(){
            attachPromise.then.callsArgWith(0,null);

            assert.throws(function(){
                browserFactoryUnderTest.attach();
            });
        });

        it("should create a new browser with the given cookie",function(){
            browserFactoryUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };
            attachPromise.then = function(fullfill){
                return fullfill({
                    "AUT cookie": 42
                });
            };
            var res = browserFactoryUnderTest.attach();
            assert(res instanceof Browser);
            assert.strictEqual(res._cookie,42);
        });

        it("should throw the given exception in case the error code is not -119 (browser not installed)",function(){
            var error = new Error("SomeError");
            error.statusCode = -100;
            attachPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.attach();
            },/SomeError/);
        });

        it("should generate a message in case not present in the exception)",function(){
            var error = new Error("");
            error.statusCode = -119;
            attachPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.attach();
            },/The specified browser null is not installed on the target machine/);
        });
    });

    describe("openedBrowser",function(){
        var openedBrowsersPromise;
        var funcPromise;
        beforeEach(function(){
            openedBrowsersPromise = {
                then: sinon.stub()
            };
            funcPromise = {
                then: sinon.stub()
            };
            sessionMock._communication.send.returns(openedBrowsersPromise);
            sessionMock.fireEvent.returns(openedBrowsersPromise);
            openedBrowsersPromise.then.returns(funcPromise);
        });

        it("should create an empty browser filter in case null is no filter was provided",function(){
            var expectedMessage = {
                "type": "Browser",
                "launch info": {
                    Class: "Browser",
                    Description: {
                        Properties: {},
                        Index: undefined
                    },
                    Parent: null
                }
            };

            browserFactoryUnderTest.openedBrowsers();

            assert(sessionMock._communication.send.calledOnce);
            assert.deepEqual(sessionMock._communication.send.firstCall.args,["GetAllOpenApplication",expectedMessage ]);
        });

        it("should create browser filter in case filter is provided as property bag",function(){
            var expectedMessage = {
                "type": "Browser",
                "launch info": {
                    Class: "Browser",
                    Description: {
                        Properties: {},
                        Index: undefined
                    },
                    Parent: null
                }
            };

            browserFactoryUnderTest.openedBrowsers({});

            assert(sessionMock._communication.send.calledOnce);
            assert.deepEqual(sessionMock._communication.send.firstCall.args,["GetAllOpenApplication",expectedMessage ]);
        });

        it("should send the attach message after converting the browser filter to JSON",function(){
            var expectedMessage = {
                "type": "Browser",
                "launch info": {
                    Class: "Browser",
                    Description: "SomeValue",
                    Parent: null
                }
            };
            var browserFilter = new BrowserFilter();
            sinon.stub(browserFilter,"_toJSON").returns("SomeValue");

            browserFactoryUnderTest.openedBrowsers(browserFilter);

            assert(browserFilter._toJSON.calledOnce);
            assert(sessionMock._communication.send.calledOnce);
            assert.deepEqual(sessionMock._communication.send.firstCall.args,["GetAllOpenApplication",expectedMessage ]);
        });

        it("should throw error in case the launch result is null",function(){
            openedBrowsersPromise.then.callsArgWith(0,null);

            assert.throws(function(){
                browserFactoryUnderTest.openedBrowsers();
            });
        });

        it("should throw error in case the launch result is missing Result field",function(){
            openedBrowsersPromise.then.callsArgWith(0,{});

            assert.throws(function(){
                browserFactoryUnderTest.openedBrowsers();
            });
        });

        it("should return empty array in case the Result field is null",function(){
            browserFactoryUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };

            openedBrowsersPromise.then = function(fullfill){
                return fullfill({Result:null});
            };
            var res = browserFactoryUnderTest.openedBrowsers();

            assert(Array.isArray(res));
            assert.strictEqual(res.length,0);
        });


        it("should create an array of browsers from the given result",function(){
            browserFactoryUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };

            openedBrowsersPromise.then = function(fullfill){
                return fullfill({
                    Result: [
                        {ServerCookie:1},
                        {ServerCookie:2}
                    ]
                });
            };
            var res = browserFactoryUnderTest.openedBrowsers();

            assert(Array.isArray(res));
            res.forEach(function(browser,index){
                assert(browser instanceof Browser);
                assert.strictEqual(browser._cookie,index + 1);
            });
        });

        it("should throw the given exception in case the error code is not -119 (browser not installed)",function(){
            var error = new Error("SomeError");
            error.statusCode = -100;
            openedBrowsersPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.openedBrowsers();
            },/SomeError/);
        });

        it("should generate a message in case not present in the exception)",function(){
            var error = new Error("");
            error.statusCode = -119;
            openedBrowsersPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.openedBrowsers();
            },/The specified browser null is not installed on the target machine/);
        });
    });

    afterEach(function(){
        Browser.prototype.__super.$.restore();
    })
});
// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // EqDAoIn3bSchvjCKQqCy7qJjoDhbGD1I6KUXjekRjxqg
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCCV
// SIG // FngIbO3izxWo9TcV3mNbqmsBoqWndozpdcrb69XazzAN
// SIG // BgkqhkiG9w0BAQEFAASCAQCfpYcjhVIDK06k9/4f/6GT
// SIG // qTCvL3P0k95uxzLYc99Eb+grvI3QV/Tj30hTVAhyFxJg
// SIG // kuJrmvCeucaQHZPvGCf2TXzY8tbM/GTCM7BH9DLkz3Aq
// SIG // m2RUOfAcS1dhPG5QYIbhd8P5IjEihUkmrrMb5FmdBnrH
// SIG // HCfZz13SODr0jULfYt1KkdFiHBuDIUYaZKUF3MAAAfKu
// SIG // fxw/Ujdtx8HrC0M1pD2NpgAlNHf973WVwPWNkRfaSxQ/
// SIG // Pa5OEHMHZkRPpL7GpWYXZrvPJ1zfu7LXR+CfCP0r0etg
// SIG // DfCC5hO1RmCA/A1MPsQ4UxURlYmk3S9BwNPeNIHdxJgk
// SIG // jNQyTS/mjnIMoYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MjE1MlowIwYJKoZI
// SIG // hvcNAQkEMRYEFC10AD6q0+jzKT+9D/h5J81W7xbNMA0G
// SIG // CSqGSIb3DQEBAQUABIIBAH7+ynmiFYk8RzFdb/DaaTWB
// SIG // qvKLbkoSKxT+VkN4mL/PRVmcObQ9iYl8KB4Na8Fdebel
// SIG // PPA+O+TpkUpFzn2ATne82tUicYKgsJBGV9ek5L3GNBBz
// SIG // yt/hcHO2XYJpSZrTewBY3L27U23WhPZJiesyLJmVGv1m
// SIG // bHfKaYA0Lut7KJxmyGWINyIyQMtWpKgMGVG34rP22gi6
// SIG // hc4lmaRyw3Rz/rnVqJacnniuIfxBbQ067vNoZL/KgsfR
// SIG // t4hN8caQlvH9dbiGffzASS/Nln58nrJTHzZLQiB2N0CO
// SIG // g9zZWxt2wXZKhyhDDgFc0KIPsF52DEjxBgRvMHq21990
// SIG // 4+w9oMHKMho=
// SIG // End signature block
