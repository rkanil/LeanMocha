// (c) Copyright 2015 Hewlett Packard Enterprise Development LP

var assert = require("assert");
var sinon = require("sinon");
var MouseButton = require("leanft.sdk.core").MouseButton;
var mouseEvent = require("../lib/webelement.js").MouseEvent;
var event = require("../lib/webelement.js").Event;
var Core = require("leanft.sdk.core");
var Location = Core.Location;
var Position = Core.Position;
var SwipeDirection = Core.SwipeDirection;

describe("WebElement Description",function(){
    var WebElementDesc = require("../lib/webelement.js").WebElement;
    var webElementDescUnderTest;

    beforeEach(function(){
        webElementDescUnderTest = WebElementDesc();
    });

    it("should support initialization via property bag",function(){
        webElementDescUnderTest = WebElementDesc({
            css: ".some_class"
        });

        assert.strictEqual(webElementDescUnderTest._properties["css"], ".some_class");
    });

    describe("id method",function() {
        it("should add 'html id' to _properties when value is given",function(){
            webElementDescUnderTest.id("some id");
            assert.strictEqual(webElementDescUnderTest._properties["html id"], "some id");
        });
        it("should add 'html id' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                id: "some id"
            });
            assert.strictEqual(webElementDescUnderTest._properties["html id"], "some id");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.id("some id");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'html id' from _properties when value is null",function(){
            webElementDescUnderTest._properties["html id"] = "some id";
            webElementDescUnderTest.id(null);
            assert(!("html id" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'html id' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["html id"] = "some id";
            var id = webElementDescUnderTest.id();
            assert.equal(id, "some id");
        });
    });

    describe("tagName method",function() {
        it("should add 'html tag' to _properties when value is given",function(){
            webElementDescUnderTest.tagName("some tagName");
            assert.strictEqual(webElementDescUnderTest._properties["html tag"], "some tagName");
        });
        it("should add 'html tag' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                tagName: "some tagName"
            });
            assert.strictEqual(webElementDescUnderTest._properties["html tag"], "some tagName");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.tagName("some tagName");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'html tag' from _properties when value is null",function(){
            webElementDescUnderTest._properties["html tag"] = "some tagName";
            webElementDescUnderTest.tagName(null);
            assert(!("html tag" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'html tag' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["html tag"] = "some tagName";
            var tagName = webElementDescUnderTest.tagName();
            assert.equal(tagName, "some tagName");
        });
    });

    describe("accessibilityName method",function() {
        it("should add 'acc_name' to _properties when value is given",function(){
            webElementDescUnderTest.accessibilityName("some accessibilityName");
            assert.strictEqual(webElementDescUnderTest._properties["acc_name"], "some accessibilityName");
        });
        it("should add 'acc_name' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                accessibilityName: "some accessibilityName"
            });
            assert.strictEqual(webElementDescUnderTest._properties["acc_name"], "some accessibilityName");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.accessibilityName("some accessibilityName");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'acc_name' from _properties when value is null",function(){
            webElementDescUnderTest._properties["acc_name"] = "some accessibilityName";
            webElementDescUnderTest.accessibilityName(null);
            assert(!("acc_name" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'acc_name' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["acc_name"] = "some accessibilityName";
            var accessibilityName = webElementDescUnderTest.accessibilityName();
            assert.equal(accessibilityName, "some accessibilityName");
        });
    });

    describe("name method",function() {
        it("should add 'name' to _properties when value is given",function(){
            webElementDescUnderTest.name("some name");
            assert.strictEqual(webElementDescUnderTest._properties["name"], "some name");
        });
        it("should add 'name' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                name: "some name"
            });
            assert.strictEqual(webElementDescUnderTest._properties["name"], "some name");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.name("some name");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'name' from _properties when value is null",function(){
            webElementDescUnderTest._properties["name"] = "some name";
            webElementDescUnderTest.name(null);
            assert(!("name" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'name' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["name"] = "some name";
            var name = webElementDescUnderTest.name();
            assert.equal(name, "some name");
        });
    });

    describe("className method",function() {
        it("should add 'class' to _properties when value is given",function(){
            webElementDescUnderTest.className("some class");
            assert.strictEqual(webElementDescUnderTest._properties["class"], "some class");
        });
        it("should add 'class' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                className: "some class"
            });
            assert.strictEqual(webElementDescUnderTest._properties["class"], "some class");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.className("some class");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'class' from _properties when value is null",function(){
            webElementDescUnderTest._properties["class"] = "some class";
            webElementDescUnderTest.className(null);
            assert(!("class" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'class' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["class"] = "some class";
            var name = webElementDescUnderTest.className();
            assert.equal(name, "some class");
        });
    });

    describe("innerHTML method",function() {
        it("should add 'innerHTML' to _properties when value is given",function(){
            webElementDescUnderTest.innerHTML("some html");
            assert.strictEqual(webElementDescUnderTest._properties["innerHTML"], "some html");
        });
        it("should add 'innerHTML' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                innerHTML: "some html"
            });
            assert.strictEqual(webElementDescUnderTest._properties["innerHTML"], "some html");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.innerHTML("some html");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'innerHTML' from _properties when value is null",function(){
            webElementDescUnderTest._properties["innerHTML"] = "some html";
            webElementDescUnderTest.innerHTML(null);
            assert(!("innerHTML" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'innerHTML' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["innerHTML"] = "some html";
            var res = webElementDescUnderTest.innerHTML();
            assert.equal(res, "some html");
        });
    });

    describe("outerHTML method",function() {
        it("should add 'outerHTML' to _properties when value is given",function(){
            webElementDescUnderTest.outerHTML("some html");
            assert.strictEqual(webElementDescUnderTest._properties["outerHTML"], "some html");
        });
        it("should add 'outerHTML' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                outerHTML: "some html"
            });
            assert.strictEqual(webElementDescUnderTest._properties["outerHTML"], "some html");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.outerHTML("some html");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'outerHTML' from _properties when value is null",function(){
            webElementDescUnderTest._properties["outerHTML"] = "some html";
            webElementDescUnderTest.outerHTML(null);
            assert(!("outerHTML" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'outerHTML' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["outerHTML"] = "some html";
            var res = webElementDescUnderTest.outerHTML();
            assert.equal(res, "some html");
        });
    });

    describe("innerText method",function() {
        it("should add 'innerText' to _properties when value is given",function(){
            webElementDescUnderTest.innerText("some text");
            assert.strictEqual(webElementDescUnderTest._properties["innerText"], "some text");
        });
        it("should add 'innerText' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                innerText: "some text"
            });
            assert.strictEqual(webElementDescUnderTest._properties["innerText"], "some text");
        });
        it("should return this - builder patternwhen value is given",function(){
            var result = webElementDescUnderTest.innerText("some text");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'innerText' from _properties when value is null",function(){
            webElementDescUnderTest._properties["innerText"] = "some text";
            webElementDescUnderTest.innerText(null);
            assert(!("innerText" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'innerText' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["innerText"] = "some text";
            var res = webElementDescUnderTest.innerText();
            assert.equal(res, "some text");
        });
    });

    describe("outerText method",function() {
        it("should add 'outerText' to _properties when value is given",function(){
            webElementDescUnderTest.outerText("some text");
            assert.strictEqual(webElementDescUnderTest._properties["outerText"], "some text");
        });
        it("should add 'outerText' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                outerText: "some text"
            });
            assert.strictEqual(webElementDescUnderTest._properties["outerText"], "some text");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.outerText("some text");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'outerText' from _properties when value is null",function(){
            webElementDescUnderTest._properties["outerText"] = "some text";
            webElementDescUnderTest.outerText(null);
            assert(!("outerText" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'outerText' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["outerText"] = "some text";
            var res = webElementDescUnderTest.outerText();
            assert.equal(res, "some text");
        });
    });

    describe("title method",function() {
        it("should add 'title' to _properties when value is given",function(){
            webElementDescUnderTest.title("some title");
            assert.strictEqual(webElementDescUnderTest._properties["title"], "some title");
        });
        it("should add 'title' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                title: "some title"
            });
            assert.strictEqual(webElementDescUnderTest._properties["title"], "some title");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.title("some title");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'title' from _properties when value is null",function(){
            webElementDescUnderTest._properties["title"] = "some title";
            webElementDescUnderTest.title(null);
            assert(!("title" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'title' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["title"] = "some title";
            var res = webElementDescUnderTest.title();
            assert.equal(res, "some title");
        });
    });

    describe("isVisible method",function() {
        it("should add 'visible' to _properties when value is given",function(){
            webElementDescUnderTest.isVisible(true);
            assert.strictEqual(webElementDescUnderTest._properties["visible"], true);
        });
        it("should add 'visible' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                isVisible: true
            });
            assert.strictEqual(webElementDescUnderTest._properties["visible"], true);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.isVisible(true);
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'visible' from _properties when value is null",function(){
            webElementDescUnderTest._properties["visible"] = true;
            webElementDescUnderTest.isVisible(null);
            assert(!("visible" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'visible' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["visible"] = true;
            var res = webElementDescUnderTest.isVisible();
            assert.equal(res, true);
        });
    });

    describe("location method", function(){
        it("setter should return this - builder", function() {
            var res = webElementDescUnderTest.location({});

            assert.strictEqual(res,webElementDescUnderTest);
        });
        it("should add x to flatter when only x given", function() {
            webElementDescUnderTest.location({
                x: 5
            });

            assert.strictEqual(webElementDescUnderTest._properties["Location"].x, 5);
            assert(!("y" in webElementDescUnderTest._properties["Location"]));
        });
        it("should add y to flatter when only y given", function() {
            webElementDescUnderTest.location({
                y: 5
            });

            assert.strictEqual(webElementDescUnderTest._properties["Location"].y, 5);
            assert(!("x" in webElementDescUnderTest._properties["Location"]));
        });

        it("should add x and y to flatter when both x and y given", function() {
            webElementDescUnderTest.location({
                x: 3,
                y: 5
            });

            assert.strictEqual(webElementDescUnderTest._properties["Location"].x, 3);
            assert.strictEqual(webElementDescUnderTest._properties["Location"].y, 5);
        });

        it("get after set should have correct values", function() {
            webElementDescUnderTest.location({
                x: 3,
                y: 5
            });

            var res = webElementDescUnderTest.location();

            assert.strictEqual(res.x, 3);
            assert.strictEqual(res.y, 5);
        });

        it("should modify value of x and leave y as is modify value of x after its set", function() {
            webElementDescUnderTest.location({
                x: 3,
                y: 5
            });

            webElementDescUnderTest.location().x = 8;

            assert.strictEqual(webElementDescUnderTest._properties["Location"].x, 8);
            assert.strictEqual(webElementDescUnderTest._properties["Location"].y, 5);
        });

        it("get without set should return an object without x or y but not null", function() {
            var res = webElementDescUnderTest.location();

            assert.notStrictEqual(res, null);
            assert(!("x" in res));
            assert(!("y" in res));
        });

        it("setting x without setting location value, should set the x value on the flatter", function() {
            webElementDescUnderTest.location().x = 5;

            var res = webElementDescUnderTest.location();

            assert.notStrictEqual(res, null);
            assert.strictEqual(res.x, 5);
        });

        it("setting location to null, should not delete it but reset its value", function() {
            webElementDescUnderTest.location(null);

            var res = webElementDescUnderTest.location();

            assert.notStrictEqual(res, null);
            assert(!("x" in res));
            assert(!("y" in res));
        });

        it("should have correct keys map", function() {
            var res = webElementDescUnderTest.location();

            assert.deepEqual(res._keysMap, {
                x: "x",
                y: "y"
            });
        });
    });

    describe("absoluteLocation method", function(){
        it("setter should return this - builder", function() {
            var res = webElementDescUnderTest.absoluteLocation({});

            assert.strictEqual(res,webElementDescUnderTest);
        });
        it("should add x to flatter when only x given", function() {
            webElementDescUnderTest.absoluteLocation({
                x: 5
            });

            assert.strictEqual(webElementDescUnderTest._properties["AbsoluteLocation"].x, 5);
            assert(!("y" in webElementDescUnderTest._properties["AbsoluteLocation"]));
        });
        it("should add y to flatter when only y given", function() {
            webElementDescUnderTest.absoluteLocation({
                y: 5
            });

            assert.strictEqual(webElementDescUnderTest._properties["AbsoluteLocation"].y, 5);
            assert(!("x" in webElementDescUnderTest._properties["AbsoluteLocation"]));
        });

        it("should add x and y to flatter when both x and y given", function() {
            webElementDescUnderTest.absoluteLocation({
                x: 3,
                y: 5
            });

            assert.strictEqual(webElementDescUnderTest._properties["AbsoluteLocation"].x, 3);
            assert.strictEqual(webElementDescUnderTest._properties["AbsoluteLocation"].y, 5);
        });

        it("get after set should have correct values", function() {
            webElementDescUnderTest.absoluteLocation({
                x: 3,
                y: 5
            });

            var res = webElementDescUnderTest.absoluteLocation();

            assert.strictEqual(res.x, 3);
            assert.strictEqual(res.y, 5);
        });

        it("modify value of x after its set, should modify value of x and leave y as is", function() {
            webElementDescUnderTest.absoluteLocation({
                x: 3,
                y: 5
            });

            webElementDescUnderTest.absoluteLocation().x = 8;

            assert.strictEqual(webElementDescUnderTest._properties["AbsoluteLocation"].x, 8);
            assert.strictEqual(webElementDescUnderTest._properties["AbsoluteLocation"].y, 5);
        });

        it("get without set should return an object without x or y but not null", function() {
            var res = webElementDescUnderTest.absoluteLocation();

            assert.notStrictEqual(res, null);
            assert(!("x" in res));
            assert(!("y" in res));
        });

        it("setting x without setting absoluteLocation value, should set the x value on the flatter", function() {
            webElementDescUnderTest.absoluteLocation().x = 5;

            var res = webElementDescUnderTest.absoluteLocation();

            assert.notStrictEqual(res, null);
            assert.strictEqual(res.x, 5);
        });

        it("setting absoluteLocation to null, should not delete it but reset its value", function() {
            webElementDescUnderTest.absoluteLocation(null);

            var res = webElementDescUnderTest.absoluteLocation();

            assert.notStrictEqual(res, null);
            assert(!("x" in res));
            assert(!("y" in res));
        });

        it("should have correct keys map", function() {
            var res = webElementDescUnderTest.absoluteLocation();

            assert.deepEqual(res._keysMap, {
                x: "abs_x",
                y: "abs_y"
            });
        });
    });

    describe("size method", function(){
        it("setter should return this - builder", function() {
            var res = webElementDescUnderTest.size({});

            assert.strictEqual(res,webElementDescUnderTest);
        });
        it("should add width to flatter when only width given", function() {
            webElementDescUnderTest.size({
                width: 5
            });

            assert.strictEqual(webElementDescUnderTest._properties["Size"].width, 5);
            assert(!("height" in webElementDescUnderTest._properties["Size"]));
        });
        it("should add height to flatter when only height given", function() {
            webElementDescUnderTest.size({
                height: 5
            });

            assert.strictEqual(webElementDescUnderTest._properties["Size"].height, 5);
            assert(!("width" in webElementDescUnderTest._properties["Size"]));
        });

        it("should add width and height to flatter when both width and height given", function() {
            webElementDescUnderTest.size({
                width: 3,
                height: 5
            });

            assert.strictEqual(webElementDescUnderTest._properties["Size"].width, 3);
            assert.strictEqual(webElementDescUnderTest._properties["Size"].height, 5);
        });

        it("get after set should have correct values", function() {
            webElementDescUnderTest.size({
                width: 3,
                height: 5
            });

            var res = webElementDescUnderTest.size();

            assert.strictEqual(res.width, 3);
            assert.strictEqual(res.height, 5);
        });

        it("modify value of width after its set, should modify value of width and leave height as is", function() {
            webElementDescUnderTest.size({
                width: 3,
                height: 5
            });

            webElementDescUnderTest.size().width = 8;

            assert.strictEqual(webElementDescUnderTest._properties["Size"].width, 8);
            assert.strictEqual(webElementDescUnderTest._properties["Size"].height, 5);
        });

        it("get without set should return an object without width or height but not null", function() {
            var res = webElementDescUnderTest.size();

            assert.notStrictEqual(res, null);
            assert(!("width" in res));
            assert(!("height" in res));
        });

        it("setting width without setting size value, should set the width value on the flatter", function() {
            webElementDescUnderTest.size().width = 5;

            var res = webElementDescUnderTest.size();

            assert.notStrictEqual(res, null);
            assert.strictEqual(res.width, 5);
        });

        it("setting size to null, should not delete it but reset its value", function() {
            webElementDescUnderTest.size(null);

            var res = webElementDescUnderTest.size();

            assert.notStrictEqual(res, null);
            assert(!("width" in res));
            assert(!("height" in res));
        });

        it("should have correct keys map", function() {
            var res = webElementDescUnderTest.size();

            assert.deepEqual(res._keysMap, {
                width: "width",
                height: "height"
            });
        });
    });

    describe("attrs method", function() {
        it("get without set should return an object without keys except keys starting with '_'", function() {
            var res = webElementDescUnderTest.attrs();

            assert.notStrictEqual(res, null);
            assert.strictEqual(Object.keys(res).filter(function (v) {
                return v[0] !== "_";
            }).length, 0);
        });

        it("should have correct prefix", function() {
            var res = webElementDescUnderTest.attrs();

            assert.strictEqual(res._keyPrefix, "attribute/");
        });

        it("setting to null, should not delete it but reset its value", function() {
            webElementDescUnderTest.attrs(null);

            var res = webElementDescUnderTest.attrs();

            assert.notStrictEqual(res, null);
            assert.strictEqual(Object.keys(res).filter(function (v) {
                return v[0] !== "_";
            }).length, 0);
            assert.strictEqual(res._keyPrefix, "attribute/");
        });

        it("setter should return this - builder", function() {
            var res = webElementDescUnderTest.attrs({});

            assert.strictEqual(res,webElementDescUnderTest);
        });

        it("getter should return the flatter as is", function() {
            webElementDescUnderTest.attrs({
                key: "value"
            });

            var res = webElementDescUnderTest.attrs();

            assert.strictEqual(res, webElementDescUnderTest._properties["Attributes"]);
        });
    });

    describe("styles method", function() {
        it("get without set should return an object without keys except keys starting with '_'", function() {
            var res = webElementDescUnderTest.styles();

            assert.notStrictEqual(res, null);
            assert.strictEqual(Object.keys(res).filter(function (v) {
                return v[0] !== "_";
            }).length, 0);
        });

        it("should have correct prefix", function() {
            var res = webElementDescUnderTest.styles();

            assert.strictEqual(res._keyPrefix, "style/");
        });

        it("setting to null, should not delete it but reset its value", function() {
            webElementDescUnderTest.styles(null);

            var res = webElementDescUnderTest.styles();

            assert.notStrictEqual(res, null);
            assert.strictEqual(Object.keys(res).filter(function (v) {
                return v[0] !== "_";
            }).length, 0);
            assert.strictEqual(res._keyPrefix, "style/");
        });

        it("setter should return this - builder", function() {
            var res = webElementDescUnderTest.styles({});

            assert.strictEqual(res,webElementDescUnderTest);
        });

        it("getter should return the flatter as is", function() {
            webElementDescUnderTest.styles({
                key: "value"
            });

            var res = webElementDescUnderTest.styles();

            assert.strictEqual(res, webElementDescUnderTest._properties["Style"]);
        });
    });

    describe("role method",function() {
        it("should add 'role' to _properties when value is given",function(){
            webElementDescUnderTest.role("some role");
            assert.strictEqual(webElementDescUnderTest._properties["role"], "some role");
        });
        it("should add 'role' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                role: "some role"
            });
            assert.strictEqual(webElementDescUnderTest._properties["role"], "some role");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.role("some role");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'role' from _properties when value is null",function(){
            webElementDescUnderTest._properties["role"] = "some role";
            webElementDescUnderTest.role(null);
            assert(!("role" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'role' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["role"] = "some role";
            var role = webElementDescUnderTest.role();
            assert.equal(role, "some role");
        });
    });
});

describe("WebElement Test Object",function() {
    var WebElementTO = require("../lib/webelement.js").WebElementTO;
    var webElementUnderTest = null;
    beforeEach(function () {
        webElementUnderTest = new WebElementTO();
        webElementUnderTest._executeCommand = sinon.stub();
        webElementUnderTest._getROProperty = sinon.stub();
    });

    describe("click method",function() {
        it("assert click method is supported",function(){
            assert('click' in webElementUnderTest);
        });
    });

    describe("fireEvent method", function(){
        it("should pass _executeCommand the correct parameters when an Event is passed",function(){
            webElementUnderTest.fireEvent({type: "onclick"});
            assert(webElementUnderTest._executeCommand.calledOnce);
            assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 3);
            assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,2), ["FireEvent", "onclick"]);
        });
        it("should pass _executeCommand the correct parameters when MouseEvent was passed",function(){
            var expectedLocation = {
                Type: "Location",
                Offset: {
                    x: 5,
                    y: 5
                },
                Anchor: "TopLeft"
            };
            webElementUnderTest.fireEvent({
                type: "onclick",
                button: "left",
                location: expectedLocation
            });
            assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 5);
            assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args[0], "FireEvent");
            assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args[1], "onclick");
            assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args[2], expectedLocation);
            assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args[3], MouseButton._convert("left"));
        });
    });

    describe("Event Class", function(){
        it("should throw error if type not passed",function(){
            assert.throws(function(){
                new event();
            });
        });
	it("should throw error if type passed is not a string",function(){
            assert.throws(function(){
                new event({});
            });
        });
        it("should add 'on' prefix to event type",function(){
            var e = new event("click");
            assert.strictEqual(e.type, "onclick");
        });
    });
    describe("MouseEvent Class", function(){
        var argsObj = {
            button: "left",
            anchor: "TopLeft",
            offset: {
                x: 5,
                y: 5
            }
        };
        it("should throw error if type not passed",function(){
            assert.throws(function(){
                new mouseEvent();
            });
        });
	it("should throw error if type passed is not string",function(){
            assert.throws(function(){
                new mouseEvent({});
            });
        });
        it("should set the correct properties for the instance when obj passed",function(){
            var mouse_event = new mouseEvent("keydown", argsObj);
            assert.strictEqual(mouse_event.type, "onkeydown");
            assert.strictEqual(mouse_event.button, "left");
            assert.deepEqual(mouse_event.location, {
                Type: "Location",
                Offset: {
                    Type: "Point",
                    X: 5,
                    Y: 5
                },
                Anchor: 0
            });
        });
        it("should set the correct properties for the instance when obj not passed",function(){
            var mouse_event = new mouseEvent("keydown");
            assert.strictEqual(mouse_event.type, "onkeydown");
            assert.strictEqual(mouse_event.button, "left");
            assert.deepEqual(mouse_event.location, {
                Type: "Location",
                Offset: {
                    Type: "Point",
                    X: 0,
                    Y: 0
                },
                Anchor: 2
            });
        });
    });

    describe("css method",function() {
        it("should execute _getROProperty 'css'",function(){
            webElementUnderTest.css();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0].toLowerCase(),"css");
        });
    });

    describe("xpath method",function() {
        it("should execute _getROProperty 'xpath'",function(){
            webElementUnderTest.xpath();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0].toLowerCase(),"xpath");
        });
    });

    describe("id method",function() {
        it("should execute _getROProperty 'html id'",function(){
            webElementUnderTest.id();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0].toLowerCase(),"html id");
        });
    });

    describe("tagName method",function() {
        it("should execute _getROProperty 'html tag'",function(){
            webElementUnderTest.tagName();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0].toLowerCase(),"html tag");
        });
    });

    describe("name method",function() {
        it("should execute _getROProperty 'name'",function(){
            webElementUnderTest.name();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0].toLowerCase(),"name");
        });
    });

    describe("className method",function() {
        it("should execute _getROProperty 'class'",function(){
            webElementUnderTest.className();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0].toLowerCase(),"class");
        });
    });

    describe("innerHTML method",function() {
        it("should execute _getROProperty 'innerHTML'",function(){
            webElementUnderTest.innerHTML();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"innerHTML");
        });
    });

    describe("outerHTML method",function() {
        it("should execute _getROProperty 'outerHTML'",function(){
            webElementUnderTest.outerHTML();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"outerHTML");
        });
    });

    describe("innerText method",function() {
        it("should execute _getROProperty 'innerText'",function(){
            webElementUnderTest.innerText();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"innerText");
        });
    });

    describe("outerText method",function() {
        it("should execute _getROProperty 'outerText'",function(){
            webElementUnderTest.outerText();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"outerText");
        });
    });

    describe("title method",function() {
        it("should execute _getROProperty 'title'",function(){
            webElementUnderTest.title();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"title");
        });
    });

    describe("isVisible method",function() {
        it("should execute _getROProperty 'visible'",function(){
            webElementUnderTest.isVisible();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"visible");
        });
    });

    describe("attributes method", function() {
        it("should execute _getROProperty 'all attributes'", function() {
            var promiseMock = {
                then: function(){}
            };
            webElementUnderTest._getROProperty.returns(promiseMock);
            webElementUnderTest.attributes();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"all attributes");
        });
        it("should parse the returned value into key value pairs correctly", function() {
            var promiseMock = {then: function(cb){
                return cb("attr1;;val1;;attr2;;val2");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.attributes();
            var expected = {
                attr1: "val1",
                attr2: "val2"
            };

            assert.deepEqual(res, expected);
        });
        it("should return empty object if _getROProperty returns null", function() {
            var promiseMock = {then: function(cb){
                return cb(null);
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.attributes();
            assert.deepEqual(res, {});
        });
        it("should return empty object if _getROProperty returns white space", function() {
            var promiseMock = {then: function(cb){
                return cb(" ");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.attributes();
            assert.deepEqual(res, {});
        });
    });

    describe("styles method", function() {
        it("should execute _getROProperty 'all styles'", function() {
            var promiseMock = {then: function(){}};
            webElementUnderTest._getROProperty.returns(promiseMock);
            webElementUnderTest.styles();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"all styles");
        });
        it("should parse the returned value into key value pairs correctly", function() {
            var promiseMock = {then: function(cb){
                return cb("display;;none;;color;;blue");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.styles();

            var expected = {
                display: "none",
                color: "blue"
            };

            assert.deepEqual(res, expected);
        });
        it("should move the prefix ';' to the end of the previous token when delimited with more then two instances of ';' (e.g. ';;;')", function() {
            var promiseMock = {then: function(cb){
                return cb("display;;none;;;color;;blue");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.styles();

            var expected = {
                display: "none;",
                color: "blue"
            };

            assert.deepEqual(res, expected);
        });
        it("should set value as empty string if no string passed between two delimiters (e.g. ';;;;')", function() {
            var promiseMock = {then: function(cb){
                return cb("display;;;;color;;blue");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.styles();

            var expected = {
                display: "",
                color: "blue"
            };

            assert.deepEqual(res, expected);
        });
        it("should return empty object if _getROProperty returns null", function() {
            var promiseMock = {then: function(cb){
                return cb(null);
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.styles();
            assert.deepEqual(res, {});
        });
        it("should return empty object if _getROProperty returns white space", function() {
            var promiseMock = {then: function(cb){
                return cb("    ");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.styles();
            assert.deepEqual(res, {});
        });
    });

    describe("getAttribute method", function() {
        it("should execute _getROProperty with attribute/ prefix", function() {
            var promiseMock = {then: function(){}};
            webElementUnderTest._getROProperty.returns(promiseMock);
            webElementUnderTest.getAttribute("SomeName");
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"attribute/SomeName");
        });
        it("should return null if _getROProperty returns null", function() {
            var promiseMock = {then: function(cb){
                return cb(null);
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.getAttribute("SomeName");
            assert.equal(res, null);
        });
        it("should return empty string if _getROProperty returns a boolean", function() {
            var promiseMock = {then: function(cb){
                return cb(true);
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.getAttribute("SomeName");
            assert.equal(res, "");
        });
        it("should return null if _getROProperty returns empty string", function() {
            var promiseMock = {then: function(cb){
                return cb("");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.getAttribute("SomeName");
            assert.equal(res, null);
        });
        it("should return the value from _getROProperty", function() {
            var promiseMock = {then: function(cb){
                return cb("aaa");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.getAttribute("SomeName");
            assert.equal(res, "aaa");
        });
    });

    describe("getComputedStyle method", function() {
        it("should execute _getROProperty with style/ prefix", function() {
            var promiseMock = {then: function(){}};
            webElementUnderTest._getROProperty.returns(promiseMock);
            webElementUnderTest.getComputedStyle("SomeName");
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"style/SomeName");
        });
        it("should return null if _getROProperty returns empty string", function() {
            var promiseMock = {then: function(cb){
                return cb("");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.getComputedStyle("SomeName");
            assert.equal(res, null);
        });
        it("should return the value from _getROProperty", function() {
            var promiseMock = {then: function(cb){
                return cb("aaa");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.getComputedStyle("SomeName");
            assert.equal(res, "aaa");
        });
    });

    describe("role method",function() {
        it("should execute _getROProperty 'role'",function(){
            webElementUnderTest.role();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0].toLowerCase(),"role");
        });
    });

    describe("nativeObject", function() {
        it("should call executeCommand with Object", function() {
            webElementUnderTest.nativeObject();
            assert(webElementUnderTest._executeCommand.calledOnce);
            assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.slice(0,1), ["Object"]);
        });

        it("should return promise returned from executeCommand", function() {
            var promiseMock = {a:"aa"};
            webElementUnderTest._executeCommand.returns(promiseMock);

            var res = webElementUnderTest.nativeObject();

            assert.strictEqual(res, promiseMock);
        });
    });

    describe("touch operations", function(){

        describe("doubleClick method", function() {

            it("should be supported in WebElement",function(){
                assert('doubleClick' in webElementUnderTest);
            });

            it("should pass _executeCommand the correct parameters when called with no args",function(){
                webElementUnderTest.doubleClick();
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 2);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,1), ["DoubleClick"]);
            });

            it("should pass _executeCommand the correct parameters when called with VALID args",function(){
                var webDblClkArgs = {
                    interval : "3",
                    location : {
                        offset: {
                            x: 10,
                            y: "17"
                        },
                        anchor: Position.bottomRight
                    }
                }

                webElementUnderTest.doubleClick(webDblClkArgs);
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 4);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,3), ["DoubleClick", 3, {
                    Type: "Location",
                    Offset: {Type: "Point",
                        X: 10,
                        Y: 17},
                    Anchor: Position._convert(Position.bottomRight)
                }]);
            });

            it("should pass _executeCommand the correct parameters when called with DEFAULT args",function() {
                webElementUnderTest.doubleClick({});
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 4);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,3), ["DoubleClick", 0.2, {
                    Type: "Location",
                    Offset: {Type: "Point",
                        X: 0,
                        Y: 0},
                    Anchor: Position._convert(Position.center)
                }]);
            });
        });

        describe("hoverTap method",function() {

            it("should be supported in WebElement",function(){
                assert('hoverTap' in webElementUnderTest);
            });

            it("should pass _executeCommand the correct parameters when called with no args",function(){
                webElementUnderTest.hoverTap();
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 2);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,1), ["HoverTap"]);
            });

            it("should pass _executeCommand the correct parameters when called with Location",function(){
                var expectedLocation = {
                    offset: {
                        x: "5",
                        y: 5
                    },
                    anchor: Position.center // center after conversion
                };

                webElementUnderTest.hoverTap(expectedLocation);
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 3);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,2), ["HoverTap", {
                    Type: "Location",
                    Offset: {Type: "Point",
                        X: 5,
                        Y: 5},
                    Anchor: Position._convert(Position.center)
                }]);
            });
        });

        describe("longPress method", function() {

            it("should be supported in WebElement",function(){
                assert('longPress' in webElementUnderTest);
            });

            it("should pass _executeCommand the correct parameters when called with NO args",function(){
                webElementUnderTest.longPress();
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 2);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,1), ["LongPress"]);
            });

            it("should pass _executeCommand the correct parameters when called with DEFAULT args",function(){
                webElementUnderTest.longPress({});
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 4);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,3), ["LongPress", 0.25, {
                    Type: "Location",
                    Offset: {Type: "Point",
                        X: 0,
                        Y: 0},
                    Anchor: Position._convert(Position.center)
                }]);
            });

            it("should pass _executeCommand the correct parameters when called with VALID args",function() {
                var webLongPressArgs = {
                    duration : "3",
                    location : {
                        offset: {
                            x: 10,
                            y: "17"
                        },
                        anchor: Position.bottomRight
                    }
                }

                webElementUnderTest.longPress(webLongPressArgs);
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 4);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,3), ["LongPress", 3, {
                    Type: "Location",
                    Offset: {Type: "Point",
                        X: 10,
                        Y: 17},
                    Anchor: Position._convert(Position.bottomRight)
                }]);
            });
        });

        describe("pinch method", function() {

            it("should be supported in WebElement", function(){
                assert('pinch' in webElementUnderTest);
            });

            it("should fail in case scale is not provided", function(){
                assert.throws( function() { webElementUnderTest.pinch(); }, Error);
            });

            it("should pass _executeCommand the correct parameters when called with scale only",function(){
                webElementUnderTest.pinch("0.5");
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 3);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,2), ["Pinch", 0.5]);
            });

            it("should pass _executeCommand the correct parameters when called with scale and pinchArgs defaults",function(){

                webElementUnderTest.pinch(0.5, { kuku: 23});
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 5);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,4), ["Pinch", 0.5, 1, {
                    Type: "Location",
                    Offset: {Type: "Point",
                        X: 0,
                        Y: 0},
                    Anchor: Position._convert(Position.center)
                } ]);
            });

            it("should pass _executeCommand the correct parameters when called with scale and pinchArgs",function(){

                var webPinchArgs = {
                    duration: "2",
                    location: {
                        offset: {
                            x: 10,
                            y: 5
                        },
                        anchor: Position.bottomRight // center after conversion
                    }
                };

                webElementUnderTest.pinch(0.5, webPinchArgs);
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 5);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,4), ["Pinch", 0.5, 2, {
                    Type: "Location",
                    Offset: {Type: "Point",
                        X: 10,
                        Y: 5},
                    Anchor: Position._convert(Position.bottomRight)
                } ]);
            });
        });

        describe("pan methods: ", function() {

            it("'pan' should be supported in WebElement",function(){
                assert('pan' in webElementUnderTest);
            });

            it("'pan' should pass _executeCommand the correct parameters when called without additional args",function(){
                webElementUnderTest.pan("2", 3);
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 4);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,3), ["Pan", 2, 3]);
            });

            it("'pan' should pass _executeCommand the correct parameters when called with VALID args",function(){

                var webPanArgs = {
                    duration: "3",
                    location : {
                        offset: {
                            x: "10",
                            y: 17
                        },
                        anchor: Position.bottomRight
                    },
                };

                webElementUnderTest.pan("7", 9, webPanArgs);
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 6);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,5), ["Pan", 7, 9, 3, {
                    Type: "Location",
                    Offset: {Type: "Point",
                        X: 10,
                        Y: 17},
                    Anchor: Position._convert(Position.bottomRight)
                }]);
            });

            it("'pan' should pass _executeCommand the correct parameters when called with DEFAULT args",function(){

                webElementUnderTest.pan(10, "11", {});
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 6);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,5),
                    [
                        "Pan",
                        10,
                        11,
                        0.5,
                        {
                            Type: "Location",
                            Offset: {
                                Type: "Point",
                                X: 0,
                                Y: 0
                            },
                            Anchor: Position._convert(Position.center)
                        }
                    ]
                );
            });
        });

        describe("swipe method", function() {
            it("should be supported in WebElement",function(){
                assert('swipe' in webElementUnderTest);
            });

            it("should fail in case NO arguments are passed", function(){
                assert.throws( function() { webElementUnderTest.swipe(); }, Error );
            });

            it("should pass _executeCommand the correct parameters when called with direction only", function(){
                webElementUnderTest.swipe(SwipeDirection.down);
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 3);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,2),
                    ["Swipe",SwipeDirection._convert(SwipeDirection.down)]);

            });

            it("should pass _executeCommand the correct parameters when called with DEFAULT args", function(){

                webElementUnderTest.swipe(SwipeDirection.down, { });
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 6);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,5),
                    [
                        "Swipe",
                        SwipeDirection._convert(SwipeDirection.down),
                        200, // the default distance
                        0.25, // the default duration
                        {
                            Type: "Location",
                            Offset: {Type: "Point",
                                X: 0,
                                Y: 0},
                            Anchor: Position._convert(Position.center)
                        }
                    ]);
            });

        });
    });

});
// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // GvNT0256wtG5PUAmc0K9x92ORfIO0lImTWLEbaCJYlKg
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCCx
// SIG // JMFFYsiq3UhOvtf+re4W0oGB3rLUCTey5xUn0D7GljAN
// SIG // BgkqhkiG9w0BAQEFAASCAQBl7L9EIaQveAYVM+efbeEb
// SIG // Y9gELlAfSaRi2GrAZaEISHgEIB8VvZAkAbIykEXRCaLY
// SIG // ZsEdkyui1yPGamZSOJ0v/A/FZuotwrbq0lrJFzOwcLxg
// SIG // F36m/gh/b8v3L63OdUq+l5u9IwmcdPFx5Qa39QDyMjU1
// SIG // kUQTk1CHENoLqbsEHA2cINZ9VKNRpqsNsk+1a/ccFdxO
// SIG // pK8kOUFMbaeNS7ptiN9MioUG3+4kDjTOeDVbrkz5IYF/
// SIG // kcSmKbjqAqiCd5cWhXbRLcpn9/ldpG+VKDNXikpYI+wH
// SIG // b6Z2wHmURW3svPw6+mQyq5giuTkEATH0sNoCV62LH765
// SIG // fcHJXA7eu0FsoYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MTU0OVowIwYJKoZI
// SIG // hvcNAQkEMRYEFAiYqDDikXG5sTPXGk1gC4iN9C56MA0G
// SIG // CSqGSIb3DQEBAQUABIIBADFD+fCWUPbtqA0L+TlhKtZC
// SIG // 7qS1r9J6FXPtvgFnnBJcK1r3JDnCuuVS3sRpXYwFXjzG
// SIG // 106DjSme5dFVquKxFhZuM2Hipud68n0KNUImO1761JUy
// SIG // B3zanADjkDRaZUiXtfaRbOSEy/tL7rCeUMWLu3+4urrY
// SIG // uMk6wfWnjkF//9Nam5AtBkCUJ2jFVKa9jnhdY6MMHVm0
// SIG // dHF/UiwhGoiAxkgoNeRPB27oZlNp7bwpj6N6OMi8QHju
// SIG // HnjN/afvZw8K+nNb8JNaTemGbGcyiZc9w1X1oFjekqF9
// SIG // m//DUi7gdCuaifq3m1aEiOlFzMc5b/jMWPB6Tj/uLZ7x
// SIG // 7+PdWUN2XPU=
// SIG // End signature block
