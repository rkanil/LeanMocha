// (c) Copyright 2015 Hewlett Packard Enterprise Development LP
/**
 * Created on 12/10/2015.
 * This file contains the tests for WebTable.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Table Description",function(){
    var tableDesc = require("../lib/table.js").Table;
    var tableDescUnderTest;

    beforeEach(function(){
        tableDescUnderTest = tableDesc();
    });

    describe("border method",function() {
        it("should add 'border' to _properties with the correct value when value is given",function(){
            tableDescUnderTest.border(5);
            assert.strictEqual(tableDescUnderTest._properties["border"], "5");
        });
        it("should add 'border' to _properties with the correct value when value is given using property bag",function(){
            tableDescUnderTest = tableDesc({
                border: 5
            });
            assert.strictEqual(tableDescUnderTest._properties["border"], "5");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = tableDescUnderTest.border(5);
            assert.strictEqual(result, tableDescUnderTest);
        });
        it("should remove 'border' from _properties when value is null",function(){
            tableDescUnderTest._properties["border"] = "5";
            tableDescUnderTest.border(null);
            assert(!("border" in tableDescUnderTest._properties));
        });
        it("should return the value of 'border' from _properties when value is not given",function(){
            tableDescUnderTest._properties["border"] = "5";
            var border = tableDescUnderTest.border();
            assert.strictEqual(border, 5);
        });
    });

    describe("columnHeaders method",function() {
        it("should add 'column names' with correct value when a value is given",function(){
            tableDescUnderTest.columnHeaders(["name1", "name2"]);
            assert.strictEqual(tableDescUnderTest._properties["column names"], "name1;name2");
        });
        it("should add 'column names' with correct value, when value is given using property bag",function(){
            tableDescUnderTest = tableDesc({
                columnHeaders: ["name1", "name2"]
            });
            assert.strictEqual(tableDescUnderTest._properties["column names"], "name1;name2");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = tableDescUnderTest.columnHeaders(["name1", "name2"]);
            assert.strictEqual(result, tableDescUnderTest);
        });
        it("should remove 'column names' from _properties when value is null",function(){
            tableDescUnderTest._properties["column names"] = "name1;name2";
            tableDescUnderTest.columnHeaders(null);
            assert(!("column names" in tableDescUnderTest._properties));
        });
        it("should return the value of 'column names' from _properties, when value is not given",function(){
            tableDescUnderTest._properties["column names"] = "name1;name2";
            var columnHeaders = tableDescUnderTest.columnHeaders();
            assert.deepEqual(columnHeaders, ["name1", "name2"]);
        });
        it("should not modify property 'column names', upon get",function(){
            tableDescUnderTest._properties["column names"] = "name1;name2";
            tableDescUnderTest.columnHeaders();
            assert.strictEqual(tableDescUnderTest._properties["column names"], "name1;name2");
        });
        it("should return same value in get, when value is set",function(){
            tableDescUnderTest.columnHeaders(["name1", "name2"]);
            var columnHeaders = tableDescUnderTest.columnHeaders();
            assert.deepEqual(columnHeaders, ["name1", "name2"]);
        });
    });

    describe("rowsCount method",function() {
        it("should add 'rows' to _properties with the correct value when value is given",function(){
            tableDescUnderTest.rowsCount(5);
            assert.strictEqual(tableDescUnderTest._properties["rows"], 5);
        });
        it("should add 'rows' to _properties with the correct value when value is given using property bag",function(){
            tableDescUnderTest = tableDesc({
                rowsCount: 5
            });
            assert.strictEqual(tableDescUnderTest._properties["rows"], 5);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = tableDescUnderTest.rowsCount(5);
            assert.strictEqual(result, tableDescUnderTest);
        });
        it("should remove 'rows' from _properties when value is null",function(){
            tableDescUnderTest._properties["rows"] = 5;
            tableDescUnderTest.rowsCount(null);
            assert(!("rows" in tableDescUnderTest._properties));
        });
        it("should return the value of 'rows' from _properties when value is not given",function(){
            tableDescUnderTest._properties["rows"] = 5;
            var rows = tableDescUnderTest.rowsCount();
            assert.strictEqual(rows, 5);
        });
    });

    describe("columnsCount method",function() {
        it("should add 'cols' to _properties with the correct value when value is given",function(){
            tableDescUnderTest.columnsCount(5);
            assert.strictEqual(tableDescUnderTest._properties["cols"], 5);
        });
        it("should add 'cols' to _properties with the correct value when value is given using property bag",function(){
            tableDescUnderTest = tableDesc({
                columnsCount: 5
            });
            assert.strictEqual(tableDescUnderTest._properties["cols"], 5);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = tableDescUnderTest.columnsCount(5);
            assert.strictEqual(result, tableDescUnderTest);
        });
        it("should remove 'cols' from _properties when value is null",function(){
            tableDescUnderTest._properties["cols"] = 5;
            tableDescUnderTest.columnsCount(null);
            assert(!("cols" in tableDescUnderTest._properties));
        });
        it("should return the value of 'cols' from _properties when value is not given",function(){
            tableDescUnderTest._properties["cols"] = 5;
            var columnsCount = tableDescUnderTest.columnsCount();
            assert.strictEqual(columnsCount, 5);
        });
    });

});

describe("Table Test Object Behavior",function(){
    var TableTO = require("../lib/table.js").TableTO;
    var tableTOBehaviorUnderTest;

    beforeEach(function(){
        tableTOBehaviorUnderTest = new TableTO({});
        tableTOBehaviorUnderTest._getROProperty = sinon.stub();
        tableTOBehaviorUnderTest._executeCommand = sinon.stub();
        tableTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        tableTOBehaviorUnderTest._session._promiseManager = {rootBranchThen :sinon.stub() };
    });

    describe("border",function(){
        it("should query the property 'border'",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb("5");
                }
            };
            tableTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            tableTOBehaviorUnderTest.border();
            assert(tableTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._getROProperty.firstCall.args,["border", arguments]);
        });
        it("should return 0 if 'border' string value is an empty string",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb("");
                }
            };
            tableTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            assert.strictEqual(tableTOBehaviorUnderTest.border(), 0);
        });
        it("should return 0 if 'border' string value is null",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb(null);
                }
            };
            tableTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            assert.strictEqual(tableTOBehaviorUnderTest.border(), 0);
        });
        it("should return 'border' value as array if it's not an empty string",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb("5");
                }
            };
            tableTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            assert.deepEqual(tableTOBehaviorUnderTest.border(), 5);
        });
    });

    describe("columnHeaders",function(){
        it("should convert the returned string to array",function(){
            var promise = { then: function(cb) { return cb("name1;name2"); }};
            tableTOBehaviorUnderTest._getROProperty.returns(promise);
            var res = tableTOBehaviorUnderTest.columnHeaders();
            assert.deepEqual(res,["name1","name2"]);
        });
        it("should query the property 'all items'",function(){
            var promise  = {then: sinon.spy()};
            tableTOBehaviorUnderTest._getROProperty.returns(promise);
            tableTOBehaviorUnderTest.columnHeaders();
            assert(tableTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(tableTOBehaviorUnderTest._getROProperty.firstCall.args[0],"column names");
        });
    });

    describe("cells",function(){
       it("should retun a proxy to a given table cell in case row and column index were provided and save them as one based",function(){
           var res = tableTOBehaviorUnderTest.cells(0,2);

           assert.strictEqual(res._rowIndex,1);
           assert.strictEqual(res._cellIndex,3);
       });

        describe("specific cell",function(){
            var cellUnderTest;
            beforeEach(function(){
                cellUnderTest = tableTOBehaviorUnderTest.cells(0,0);
            });

            describe("text",function(){
               it("should execute the command 'GetCellData' and provide the cell index",function(){
                   var promise  = {then: sinon.spy()};
                   tableTOBehaviorUnderTest._executeCommand.returns(promise);

                   cellUnderTest.text();

                   assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
                   assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.splice(0,3),["GetCellData",1,1]);
               });
            });

            describe("$",function(){
                var childDesc;
                beforeEach(function(){
                    tableTOBehaviorUnderTest._session = {
                        factory: {
                            create: sinon.stub()
                        }
                    };
                    childDesc = {
                        index: sinon.stub()
                    }

                    tableTOBehaviorUnderTest.notifyWithEvents = function(func) {
                        return func.call(this);
                    };
                });

                it("should execute 'ChildItem' with the given type's native class",function(){
                    tableTOBehaviorUnderTest._session.factory.create.returns({
                        _nativeClass: "MyClass"
                    });

                    cellUnderTest.$(childDesc);

                    assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[0],"ChildItem");
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[1],1);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[2],1);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[3],"MyClass");
                });

                it("should execute 'ChildItem' with the given description's index",function(){
                    tableTOBehaviorUnderTest._session.factory.create.returns({
                        _nativeClass: "MyClass"
                    });

                    childDesc.index.returns(42);

                    cellUnderTest.$(childDesc);

                    assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[0],"ChildItem");
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[1],1);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[2],1);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[3],"MyClass");
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[4],42);
                });

                it("should execute 'ChildItem' with the default index of 0",function(){
                    tableTOBehaviorUnderTest._session.factory.create.returns({
                        _nativeClass: "MyClass"
                    });

                    cellUnderTest.$(childDesc);

                    assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[0],"ChildItem");
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[1],1);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[2],1);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[3],"MyClass");
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[4],0);
                });

                it("should use the web element as default type",function() {
                    tableTOBehaviorUnderTest._session.factory.create.returns({
                        _nativeClass: "MyClass"
                    });

                    cellUnderTest.$();

                    assert.deepEqual(tableTOBehaviorUnderTest._session.factory.create.firstCall.args[0], {
                        technology: "Web",
                        leanftType: "WebElement"
                    });
                });
            });

            describe("countOf",function(){
                var childDesc;
                beforeEach(function(){
                    tableTOBehaviorUnderTest._session = {
                        factory: {
                            create: sinon.stub()
                        }
                    };
                    childDesc = {
                        index: sinon.stub()
                    }
                    tableTOBehaviorUnderTest.notifyWithEvents = function(func) {
                        return func.call(this);
                    };
                });

                it("should execute 'ChildItemCount' with the given type's native class",function(){
                    tableTOBehaviorUnderTest._session.factory.create.returns({
                        _nativeClass: "MyClass"
                    });

                    cellUnderTest.countOf(childDesc);

                    assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[0],"ChildItemCount");
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[1],1);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[2],1);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[3],"MyClass");
                });

                it("should use the web element as default type",function() {
                    tableTOBehaviorUnderTest._session.factory.create.returns({
                        _nativeClass: "MyClass"
                    });

                    cellUnderTest.countOf();

                    assert.deepEqual(tableTOBehaviorUnderTest._session.factory.create.firstCall.args[0], {
                        technology: "Web",
                        leanftType: "WebElement"
                    });
                });
            });
        });

        describe("findRow",function(){
            var execiteCommandPromise;
            var getROPropertyPromise;
            beforeEach(function(){
                execiteCommandPromise = {
                    then: function(fullfill){
                        return fullfill.apply(this,this._callWithArgs);
                    },
                    _callWithArgs: []
                };
                getROPropertyPromise = {
                    then: function(fullfill){
                        return fullfill.apply(this,this._callWithArgs);
                    },
                    _callWithArgs: []
                };

                tableTOBehaviorUnderTest._executeCommand.returns(execiteCommandPromise);
                tableTOBehaviorUnderTest._getROProperty.returns(getROPropertyPromise);
            });

            it("should execute the command 'GetRowWithCellText' with the given parameters", function(){
                tableTOBehaviorUnderTest.findRow("avishay",1,3);

                assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
                assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.splice(0,4),["GetRowWithCellText","avishay",2,4]);
            });

            it("should execute the command 'GetRowWithCellText' with default indices of 0", function(){
                tableTOBehaviorUnderTest.findRow("avishay");

                assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
                assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.splice(0,4),["GetRowWithCellText","avishay",0,0]);
            });

            it("should fullfill the promise with null in case the result index is -1",function(){
                execiteCommandPromise._callWithArgs = [-1];
                tableTOBehaviorUnderTest._executeCommand.returns(execiteCommandPromise);

                var res = tableTOBehaviorUnderTest.findRow("someText");
                assert.strictEqual(res,null);
            });

            it("should fullfill the promise with array of cells according to the number of cells in the row1",function(){
                execiteCommandPromise._callWithArgs = [2];
                getROPropertyPromise._callWithArgs = [10];

                var res = tableTOBehaviorUnderTest.findRow("someText");
                assert.strictEqual(res.length,10);
                assert.strictEqual(res[0]._rowIndex,2);
            });

        });
    });
});
// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // AUISLSNqcwM/mEabPiCZUtNxhGqDNjETBAQb4GMx6Mug
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCDa
// SIG // mwO7vf6KgWXTEmppBw1h6OaVxN++TwH4/gO6MALBojAN
// SIG // BgkqhkiG9w0BAQEFAASCAQABNg5EX+tarJh+8AqKZk/y
// SIG // lto6a3w6oVXfKe2r72sKqH6zlJPRl9WW7IOdH+t6oLdp
// SIG // R59AMsviq/B9HZWhTGK2gIX8l3Y5SsCC5ClzCV7Pn+3W
// SIG // szBwS3mfmPaVU4pcAnTCriOzF6nKrrFRduDSJeNtl4cn
// SIG // +tzvGrg3OsocFrlqIKzjhvBORZOb5s1bLugtqD1qNrP6
// SIG // vQWzBzTlRWKuhrMa31DnKz/Qa2skTb9uwr1sL7Cd0HGW
// SIG // 90CRFq9OsyzlFMQ7ZnLXj1I3uI7h3OIF/VOl9CSxKYB1
// SIG // p6UUkTeM5vG/GO6zkqz7F6JcxHA8WZpSJtQWnEHJlmrB
// SIG // vcV8a7wqMQdsoYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MjEzMlowIwYJKoZI
// SIG // hvcNAQkEMRYEFGnlc2PVUoFlgmaLaunSb2T1czxbMA0G
// SIG // CSqGSIb3DQEBAQUABIIBAC+yf3+7EQUbTNa9n3j2xNXa
// SIG // 2KFqP8dQNDCfc1OUnqF4/lUno6ydhZTEopBJozTZJlsP
// SIG // ibsJv59xF0JwShwfPUrSs3KFqCzQyMu4+moIgR0xyLDM
// SIG // z5tdEOVSaFK07+78DYJIWZlfiwkGjRWx97XcDfL3FA8Y
// SIG // hObV1/ycpktxiMUd4XhUhuPU1FOxOq30/Or+mFv+Fj4W
// SIG // 7jLqGNohOVYryfrQGKs2pA0JlnRV+Ql+jv2/VnX/UJUZ
// SIG // KRVA1/iM7lcM3OHuuX8yJvjZGY1dj9bOnVEqR1+O2XKA
// SIG // a58ASo3sGp6y0HGc1Vn7hcLw8Wnf5P/GHkOQHXGcfAjC
// SIG // puX0ibhd0tM=
// SIG // End signature block
