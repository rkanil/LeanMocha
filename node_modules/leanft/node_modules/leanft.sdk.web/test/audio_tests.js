// (c) Copyright 2015 Hewlett Packard Enterprise Development LP
/**
 * Created on 11/30/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("AudioControl Description",function(){
    var AudioControlDesc = require("../lib/audio_control.js").AudioControl;
    var AudioControlDescUnderTest;

    beforeEach(function(){
        AudioControlDescUnderTest = AudioControlDesc();
    });

    describe("hasAutoPlay method",function() {
        it("should add 'autoplay' to _properties with the correct value when value is given",function(){
            AudioControlDescUnderTest.hasAutoPlay(false);
            assert.strictEqual(AudioControlDescUnderTest._properties["autoplay"], false);
        });
        it("should add 'autoplay' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                hasAutoPlay: false
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["autoplay"], false);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.hasAutoPlay(false);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'autoplay' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["autoplay"] = false;
            AudioControlDescUnderTest.hasAutoPlay(null);
            assert(!("autoplay" in AudioControlDescUnderTest._properties));
        });
        it("should return the value of 'autoplay' from _properties when value is not given",function(){
            AudioControlDescUnderTest._properties["autoplay"] = false;
            var hasAutoPlay = AudioControlDescUnderTest.hasAutoPlay();
            assert.equal(hasAutoPlay, false);
        });
    });

    describe("hasPlaybackControls method",function() {
        it("should add 'controls' to _properties with the correct value when value is given",function(){
            AudioControlDescUnderTest.hasPlaybackControls(false);
            assert.strictEqual(AudioControlDescUnderTest._properties["controls"], false);
        });
        it("should add 'controls' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                hasPlaybackControls: false
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["controls"], false);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.hasPlaybackControls(false);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'controls' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["controls"] = false;
            AudioControlDescUnderTest.hasPlaybackControls(null);
            assert(!("controls" in AudioControlDescUnderTest._properties));
        });
        it("should return the value of 'controls' from _properties when value is not given",function(){
            AudioControlDescUnderTest._properties["controls"] = false;
            var hasPlaybackControls = AudioControlDescUnderTest.hasPlaybackControls();
            assert.equal(hasPlaybackControls, false);
        });
    });

    describe("currentSource method",function() {
        it("should add 'current source' to _properties with the correct value when value is given",function(){
            AudioControlDescUnderTest.currentSource(false);
            assert.strictEqual(AudioControlDescUnderTest._properties["current source"], false);
        });
        it("should add 'current source' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                currentSource: false
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["current source"], false);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.currentSource(false);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'current source' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["current source"] = false;
            AudioControlDescUnderTest.currentSource(null);
            assert(!("current source" in AudioControlDescUnderTest._properties));
        });
        it("should return the value of 'current source' from _properties when value is not given",function(){
            AudioControlDescUnderTest._properties["current source"] = false;
            var currentSource = AudioControlDescUnderTest.currentSource();
            assert.equal(currentSource, false);
        });
    });

    describe("isPlayInLoop method",function() {
        it("should add 'loop' to _properties with the correct value when value is given",function(){
            AudioControlDescUnderTest.isPlayInLoop(false);
            assert.strictEqual(AudioControlDescUnderTest._properties["loop"], false);
        });
        it("should add 'loop' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                isPlayInLoop: false
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["loop"], false);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.isPlayInLoop(false);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'loop' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["loop"] = false;
            AudioControlDescUnderTest.isPlayInLoop(null);
            assert(!("loop" in AudioControlDescUnderTest._properties));
        });
        it("should return the value of 'loop' from _properties when value is not given",function(){
            AudioControlDescUnderTest._properties["loop"] = false;
            var isPlayInLoop = AudioControlDescUnderTest.isPlayInLoop();
            assert.equal(isPlayInLoop, false);
        });
    });

    describe("isMuted method",function() {
        it("should add 'muted' to _properties with the correct value when value is given",function(){
            AudioControlDescUnderTest.isMuted(false);
            assert.strictEqual(AudioControlDescUnderTest._properties["muted"], false);
        });
        it("should add 'muted' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                isMuted: false
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["muted"], false);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.isMuted(false);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'muted' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["muted"] = false;
            AudioControlDescUnderTest.isMuted(null);
            assert(!("muted" in AudioControlDescUnderTest._properties));
        });
        it("should return the value of 'muted' from _properties when value is not given",function(){
            AudioControlDescUnderTest._properties["muted"] = false;
            var isMuted = AudioControlDescUnderTest.isMuted();
            assert.equal(isMuted, false);
        });
    });

    describe("isPlaying method",function() {
        it("should add 'playing' to _properties with the correct value when value is given",function(){
            AudioControlDescUnderTest.isPlaying(false);
            assert.strictEqual(AudioControlDescUnderTest._properties["playing"], false);
        });
        it("should add 'playing' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                isPlaying: false
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["playing"], false);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.isPlaying(false);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'playing' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["playing"] = false;
            AudioControlDescUnderTest.isPlaying(null);
            assert(!("playing" in AudioControlDescUnderTest._properties));
        });
        it("should return the value of 'playing' from _properties when value is not given",function(){
            AudioControlDescUnderTest._properties["playing"] = false;
            var isPlaying = AudioControlDescUnderTest.isPlaying();
            assert.equal(isPlaying, false);
        });
    });

    describe("playbackTime method",function() {
        it("should add 'current time' to _properties with the correct value when value is given as number",function(){
            AudioControlDescUnderTest.playbackTime(10);
            assert.strictEqual(AudioControlDescUnderTest._properties["current time"], 10);
        });
        it("should add 'current time' to _properties with the correct value when value is given as string",function(){
            AudioControlDescUnderTest.playbackTime("10");
            assert.strictEqual(AudioControlDescUnderTest._properties["current time"], 10);
        });
        it("should throw error if the value given NaN",function(){
            assert.throws(function(){
                AudioControlDescUnderTest.playbackTime("10a");
            });
        });
        it("should add 'current time' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                playbackTime: 10
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["current time"], 10);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.playbackTime(10);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'current time' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["current time"] = 10;
            AudioControlDescUnderTest.playbackTime(null);
            assert(!("current time" in AudioControlDescUnderTest._properties));
        });
        it("should return the value of 'current time' from _properties when value is not given",function(){
            AudioControlDescUnderTest._properties["current time"] = 10;
            var playbackTime = AudioControlDescUnderTest.playbackTime();
            assert.strictEqual(playbackTime, 10);
        });
        it("should return same value in get, when value is set if set value is number",function(){
            AudioControlDescUnderTest.playbackTime(10);
            var playbackTime = AudioControlDescUnderTest.playbackTime();
            assert.deepEqual(playbackTime, 10);
        });
        it("should return (number) value in get, when value set is numeric string",function(){
            AudioControlDescUnderTest.playbackTime("10");
            var playbackTime = AudioControlDescUnderTest.playbackTime();
            assert.deepEqual(playbackTime, 10);
        });
    });

    describe("duration method",function() {
        it("should add 'duration' to _properties with the correct value when value is given as number",function(){
            AudioControlDescUnderTest.duration(10);
            assert.strictEqual(AudioControlDescUnderTest._properties["duration"], 10);
        });
        it("should add 'duration' to _properties with the correct value when value is given as string",function(){    // _isNumericSrt not a function
            AudioControlDescUnderTest.duration("10");
            assert.strictEqual(AudioControlDescUnderTest._properties["duration"], 10);
        });
        it("should throw error if the value given NaN",function(){
            assert.throws(function(){
                AudioControlDescUnderTest.duration("10a");
            });
        });
        it("should add 'duration' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                duration: 10
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["duration"], 10);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.duration(10);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'duration' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["duration"] = 10;
            AudioControlDescUnderTest.duration(null);
            assert(!("duration" in AudioControlDescUnderTest._properties));
        });
        it("should return the value of 'duration' from _properties when value is not given",function(){
            AudioControlDescUnderTest._properties["duration"] = 10;
            var duration = AudioControlDescUnderTest.duration();
            assert.strictEqual(duration, 10);
        });
        it("should return same value in get, when value is set if set value is number",function(){
            AudioControlDescUnderTest.duration(10);
            var duration = AudioControlDescUnderTest.duration();
            assert.deepEqual(duration, 10);
        });
        it("should return (number) value in get, when value set is numeric string",function(){   // _isNumericSrt not a function
            AudioControlDescUnderTest.playbackTime("10");
            var playbackTime = AudioControlDescUnderTest.playbackTime();
            assert.deepEqual(playbackTime, 10);
        });
    });

    describe("sources method",function() {
        it("should add 'sources' with correct value when a value is given",function(){
            AudioControlDescUnderTest.sources(["source1", "source2"]);
            assert.strictEqual(AudioControlDescUnderTest._properties["sources"], "source1;source2");
        });
        it("should add 'sources' with correct value, when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                sources: ["source1", "source2"]
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["sources"], "source1;source2");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.sources(["source1", "source2"]);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'sources' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["sources"] = "source1;source2";
            AudioControlDescUnderTest.sources(null);
            assert(!("sources" in AudioControlDescUnderTest._properties));
        });
        it("should return the value of 'sources' from _properties, when value is not given",function(){
            AudioControlDescUnderTest._properties["sources"] = "source1;source2";
            var sources = AudioControlDescUnderTest.sources();
            assert.deepEqual(sources, ["source1", "source2"]);
        });
        it("should not modify property 'sources', upon get",function(){
            AudioControlDescUnderTest._properties["sources"] = "source1;source2";
            AudioControlDescUnderTest.sources();
            assert.strictEqual(AudioControlDescUnderTest._properties["sources"], "source1;source2");
        });
        it("should return same value in get, when value is set",function(){
            AudioControlDescUnderTest.sources(["source1", "source2"]);
            var sources = AudioControlDescUnderTest.sources();
            assert.deepEqual(sources, ["source1", "source2"]);
        });
    });

    describe("playbackRate method",function() {
       it("should add 'playback rate' to _properties with the correct value when value is given as number",function(){
            AudioControlDescUnderTest.playbackRate(1.23);
            assert.strictEqual(AudioControlDescUnderTest._properties["playback rate"], "1.23");
        });
        it("should throw error if the value given NaN",function(){
            assert.throws(function(){
                AudioControlDescUnderTest.playbackRate("1.23a");
            });
        });
        it("should add 'playback rate' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                playbackRate: 1.23
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["playback rate"], "1.23");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.playbackRate(1.23);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'playback rate' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["playback rate"] = "1.23";
            AudioControlDescUnderTest.playbackRate(null);
            assert(!("playback rate" in AudioControlDescUnderTest._properties));
        });
        it("should return decimal value of 'playback rate' from _properties when the set value is an integer",function(){   // _isNumericSrt not a function
            AudioControlDescUnderTest.playbackRate(12);
            var playbackRate = AudioControlDescUnderTest.playbackRate();
            assert.strictEqual(playbackRate, 12.00);
        });
        it("should return the value of 'playback rate' from _properties when value is not given",function(){   // _isNumericSrt not a function
            AudioControlDescUnderTest._properties["playback rate"] = "1.23";
            var duration = AudioControlDescUnderTest.playbackRate();
            assert.strictEqual(duration, 1.23);
        });
        it("should return same value in get, when value is set if set value is number",function(){   // _isNumericSrt not a function
            AudioControlDescUnderTest.playbackRate(1.23);
            var duration = AudioControlDescUnderTest.playbackRate();
            assert.strictEqual(duration, 1.23);
        });
        it("should return (number) value in get, when value set is numeric string",function(){   // _isNumericSrt not a function
            AudioControlDescUnderTest.playbackRate("1.23");
            var playbackRate = AudioControlDescUnderTest.playbackRate();
            assert.strictEqual(playbackRate, 1.23);
        });
    });

    describe("volume method",function() {
        it("should add 'volume' to _properties with the correct value when value is given as number",function(){
            AudioControlDescUnderTest.volume(1.23);
            assert.strictEqual(AudioControlDescUnderTest._properties["volume"], "1.23");
        });
        it("should throw error if the value given NaN",function(){
            assert.throws(function(){
                AudioControlDescUnderTest.volume("1.23a");
            });
        });
        it("should add 'volume' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                volume: 1.23
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["volume"], "1.23");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.volume(1.23);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'volume' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["volume"] = "1.23";
            AudioControlDescUnderTest.volume(null);
            assert(!("volume" in AudioControlDescUnderTest._properties));
        });
        it("should return decimal value of 'volume' from _properties when the set value is an integer",function(){   // _isNumericSrt not a function
            AudioControlDescUnderTest.volume(12);
            var volume = AudioControlDescUnderTest.volume();
            assert.strictEqual(volume, 12.00);
        });
        it("should return the value of 'volume' from _properties when value is not given",function(){   // _isNumericSrt not a function
            AudioControlDescUnderTest._properties["volume"] = "1.23";
            var volume = AudioControlDescUnderTest.volume();
            assert.strictEqual(volume, 1.23);
        });
        it("should return same value in get, when value is set if set value is number",function(){   // _isNumericSrt not a function
            AudioControlDescUnderTest.volume(1.23);
            var volume = AudioControlDescUnderTest.volume();
            assert.strictEqual(volume, 1.23);
        });
        it("should return (number) value in get, when value set is numeric string",function(){   // _isNumericSrt not a function
            AudioControlDescUnderTest.volume("1.23");
            var volume = AudioControlDescUnderTest.volume();
            assert.strictEqual(volume, 1.23);
        });
    });

});

describe("AudioControl Test Object Behavior",function(){
    var AudioControlTO = require("../lib/audio_control.js").AudioControlTO;
    var audioControlTOBehaviorUnderTest;

    beforeEach(function(){
        audioControlTOBehaviorUnderTest = new AudioControlTO({});
        audioControlTOBehaviorUnderTest._getROProperty = sinon.stub();
        audioControlTOBehaviorUnderTest._executeCommand = sinon.stub();
        audioControlTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        audioControlTOBehaviorUnderTest._session._promiseManager = {rootBranchThen :sinon.stub() };
    });

    describe("hasAutoPlay",function(){
        it("should query the property 'autoplay'",function(){
            audioControlTOBehaviorUnderTest.hasAutoPlay();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["autoplay", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            audioControlTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.hasAutoPlay();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("hasPlaybackControls",function(){
        it("should query the property 'controls'",function(){
            audioControlTOBehaviorUnderTest.hasPlaybackControls();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["controls", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            audioControlTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.hasPlaybackControls();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("currentSource",function(){
        it("should query the property 'current source'",function(){
            audioControlTOBehaviorUnderTest.currentSource();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["current source", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            audioControlTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.currentSource();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("isPlayInLoop",function(){
        it("should query the property 'loop'",function(){
            audioControlTOBehaviorUnderTest.isPlayInLoop();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["loop", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            audioControlTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.isPlayInLoop();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("isMuted",function(){
        it("should query the property 'muted'",function(){
            audioControlTOBehaviorUnderTest.isMuted();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["muted", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            audioControlTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.isMuted();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("isPlaying",function(){
        it("should query the property 'playing'",function(){
            audioControlTOBehaviorUnderTest.isPlaying();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["playing", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            audioControlTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.isPlaying();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("playbackTime",function(){
        it("should query the property 'current time'",function(){
            audioControlTOBehaviorUnderTest.playbackTime();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["current time", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            audioControlTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.playbackTime();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("duration",function(){
        it("should query the property 'duration'",function(){
            audioControlTOBehaviorUnderTest.duration();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["duration", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            audioControlTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.duration();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("sources",function(){
        beforeEach(function(){
              audioControlTOBehaviorUnderTest._getROProperties = sinon.stub();
        });
        it("should query the properties 'sources' and 'src'",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb(["source1;source2", "noDelimiterStr"]);
                }
            };
            audioControlTOBehaviorUnderTest._getROProperties.returns(promiseMock);
            audioControlTOBehaviorUnderTest.sources();
            assert(audioControlTOBehaviorUnderTest._getROProperties.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperties.firstCall.args,[arguments, "sources", "src"]);
        });

        it("should return 'src' string value as array if 'sources' value is an empty string",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb(["", "noDelimiterStr"]);
                }
            };
            audioControlTOBehaviorUnderTest._getROProperties.returns(promiseMock);
            assert.deepEqual(audioControlTOBehaviorUnderTest.sources(), ["noDelimiterStr"]);
        });

        it("should return 'src' string value as array if 'sources' value is null",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb([null, "noDelimiterStr"]);
                }
            };
            audioControlTOBehaviorUnderTest._getROProperties.returns(promiseMock);
            assert.deepEqual(audioControlTOBehaviorUnderTest.sources(), ["noDelimiterStr"]);
        });

        it("should return 'sources' value as array if it's not an empty string or null",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb(["source1;source2", "noDelimiterStr"]);
                }
            };
            audioControlTOBehaviorUnderTest._getROProperties.returns(promiseMock);
            assert.deepEqual(audioControlTOBehaviorUnderTest.sources(), ["source1", "source2"]);
        });
    });

    describe("playbackRate",function(){
        var promiseMock = {
            then: function(cb) {
                return cb("1.00");
            }
        };
        it("should query the property 'playback rate'",function(){
            audioControlTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            audioControlTOBehaviorUnderTest.playbackRate();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["playback rate", arguments]);
        });
        it("should return the playback rate as float after promise returned from getROProperty",function(){
            audioControlTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = audioControlTOBehaviorUnderTest.playbackRate();
            assert.strictEqual(res, 1.00);
        });
    });

    describe("volume",function(){
        var promiseMock = {
            then: function(cb) {
                return cb("1.00");
            }
        };
        it("should query the property 'volume'",function(){
            audioControlTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            audioControlTOBehaviorUnderTest.volume();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["volume", arguments]);
        });
        it("should return the volume as float after promise returned from getROProperty",function(){
            audioControlTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = audioControlTOBehaviorUnderTest.volume();
            assert.strictEqual(res, 1.00);
        });
    });

    // METHODS
    describe("reload",function(){
        it("should execute command 'Load' and pass it the correct parameters",function(){
            var funcPromise = {
                then: sinon.stub()
            };
            audioControlTOBehaviorUnderTest._executeCommand.returns(funcPromise);
            audioControlTOBehaviorUnderTest.reload();
            assert(audioControlTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,1), ["Load"]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {
                then: sinon.stub()
            };
            audioControlTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.reload();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("play",function(){
        var funcPromise = {
            then : sinon.stub()
        };

        beforeEach(function(){
            audioControlTOBehaviorUnderTest._executeCommand.returns(funcPromise);
        });
        it("should execute command 'Play' and pass it the correct parameters",function(){
            audioControlTOBehaviorUnderTest.play();
            assert(audioControlTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,1), ["Play"]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var res = audioControlTOBehaviorUnderTest.play();
            assert.strictEqual(res,funcPromise);
        });
    });

    describe("pause",function(){
        beforeEach(function(){
            audioControlTOBehaviorUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };
        });
        it("should execute command 'Pause' and pass it the correct parameters",function(){
            audioControlTOBehaviorUnderTest.pause();
            assert(audioControlTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,1), ["Pause"]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            audioControlTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.pause();
            assert.strictEqual(res,getROPromise);
        });
    });

});
// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // xeC2M6Kict7Tdz8ZUApgndT2Z184v41bc+I/+VWQZ8ag
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCBL
// SIG // R9RwISAdSukbkamBLkz8PZptK4U68ed4EsITUWOjgzAN
// SIG // BgkqhkiG9w0BAQEFAASCAQCyIGaf/BIa23P1XTXXoa2j
// SIG // OS8gJew9T+ml7x7mSS9IhIK5Yt/5NWvUTlorknY7HYAs
// SIG // N+oxgqKcyhnZn7Hdjs12Is8HrDvNye2HIHPzGGwX9skV
// SIG // XYddmeXJwMJ3n4MLrCFxPuLxFuMKWoVzEL0yyWA3xFqX
// SIG // w+0zNydHlREEymcT30qksKx0mnn3+yjf2iiHGpuzaArB
// SIG // lUgq2BSfxbp4JendSRz3h4yme4u8vlRWsx3cfsl/A3xB
// SIG // fxfh1dGTPst4hcd8mamFBX7cDkrKD1UE3/xuVP3wAjUe
// SIG // xwQUvk1jMWK80fr/kgG7HrvtJoLKftDgMesXkgFGZK2t
// SIG // CLVeSjD4q+ipoYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MjAxNVowIwYJKoZI
// SIG // hvcNAQkEMRYEFA2Q8Roc0iQlOEDiOkiHp6cUE8ECMA0G
// SIG // CSqGSIb3DQEBAQUABIIBAAJzCLztMiF0G3X73San79jb
// SIG // +MdKN/eik8vzA+Q5cFJIv/bYZt88W3QHy/XLQvx5Ow5u
// SIG // Fm5SjIae+DC8OiZqamKrHaLxiu7ZYHRlOMIf3h1a6aCF
// SIG // H7E3uviXJpwgwYGR4j3F6m3E51bHgXjYSrJ7/dKdjj2W
// SIG // YjyeHNxX1m7NjWLC001QvH0sFhs8HbNlGOgyoTY8MSfO
// SIG // l6zr+OAHrL42UQz18hbFmHOuTr22uK3yKmVH+qdEElF9
// SIG // e2Bi+aWEmfDtZ53+n/EqWIjtzMXlfjxPdhmjru3KD/ru
// SIG // Gb7sCVWgLc8nL1xqnA+dxEsIdTciOeT+SS0VNWWhesr8
// SIG // X76c5s4OVe8=
// SIG // End signature block
