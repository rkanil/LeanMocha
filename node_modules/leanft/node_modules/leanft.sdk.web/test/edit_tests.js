// (c) Copyright 2015 Hewlett Packard Enterprise Development LP
/**
 * Created on 11/19/2015.
 */


var assert = require("assert");
var sinon = require("sinon");

describe("Edit Description",function(){
    var EditDesc = require("../lib/edit.js").Edit;
    var editDescUnderTest;

    beforeEach(function(){
        editDescUnderTest = EditDesc();
    });

    describe("defaultValue method",function() {
        it("should add 'default value' to _properties when value is given",function(){
            editDescUnderTest.defaultValue("some default value");
            assert.strictEqual(editDescUnderTest._properties["default value"], "some default value");
        });
        it("should add 'default value' to _properties when value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                defaultValue: "some default value"
            });
            assert.strictEqual(editDescUnderTest._properties["default value"], "some default value");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = editDescUnderTest.defaultValue("some default value");
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'default value' from _properties when value is null",function(){
            editDescUnderTest._properties["default value"] = "some default value";
            editDescUnderTest.defaultValue(null);
            assert(!("default value" in editDescUnderTest._properties));
        });
        it("should return the value of 'default value' from _properties when value is not given",function(){
            editDescUnderTest._properties["default value"] = "some default value";
            var defaultValue = editDescUnderTest.defaultValue();
            assert.equal(defaultValue, "some default value");
        });
    });

    describe("maxLength method",function() {
        it("should add 'max length' to _properties when value is given",function(){
            editDescUnderTest.maxLength(25);
            assert.strictEqual(editDescUnderTest._properties["max length"], 25);
        });
        it("should add 'max length' to _properties when value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                maxLength: 25
            });
            assert.strictEqual(editDescUnderTest._properties["max length"], 25);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = editDescUnderTest.maxLength(25);
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'max length' from _properties when value is null",function(){
            editDescUnderTest._properties["max length"] = 25;
            editDescUnderTest.maxLength(null);
            assert(!("max length" in editDescUnderTest._properties));
        });
        it("should return the value of 'max length' from _properties when value is not given",function(){
            editDescUnderTest._properties["max length"] = 25;
            var maxLength = editDescUnderTest.maxLength();
            assert.equal(maxLength, 25);
        });
    });

    describe("pattern method",function() {
        it("should add 'pattern' to _properties when value is given",function(){
            editDescUnderTest.pattern("some pattern");
            assert.strictEqual(editDescUnderTest._properties["pattern"], "some pattern");
        });
        it("should add 'pattern' to _properties when value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                pattern: "some pattern"
            });
            assert.strictEqual(editDescUnderTest._properties["pattern"], "some pattern");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = editDescUnderTest.pattern("some pattern");
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'pattern' from _properties when value is null",function(){
            editDescUnderTest._properties["pattern"] = "some pattern";
            editDescUnderTest.pattern(null);
            assert(!("pattern" in editDescUnderTest._properties));
        });
        it("should return the value of 'pattern' from _properties when value is not given",function(){
            editDescUnderTest._properties["pattern"] = "some pattern";
            var pattern = editDescUnderTest.pattern();
            assert.equal(pattern, "some pattern");
        });
    });

    describe("rowsCount method",function() {
        it("should add 'rows' to _properties when value is given",function(){
            editDescUnderTest.rowsCount(3);
            assert.strictEqual(editDescUnderTest._properties["rows"], 3);
        });
        it("should add 'rows' to _properties when value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                rowsCount: 3
            });
            assert.strictEqual(editDescUnderTest._properties["rows"], 3);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = editDescUnderTest.rowsCount(3);
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'rows' from _properties when value is null",function(){
            editDescUnderTest._properties["rows"] = 3;
            editDescUnderTest.rowsCount(null);
            assert(!("rows" in editDescUnderTest._properties));
        });
        it("should return the value of 'rows' from _properties when value is not given",function(){
            editDescUnderTest._properties["rows"] = 3;
            var rowsCount = editDescUnderTest.rowsCount();
            assert.equal(rowsCount, 3);
        });
    });

    describe("type method",function() {
        it("should add 'type' to _properties when value is given",function(){
            editDescUnderTest.type("some type");
            assert.strictEqual(editDescUnderTest._properties["type"], "some type");
        });
        it("should add 'type' to _properties when value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                type: "some type"
            });
            assert.strictEqual(editDescUnderTest._properties["type"], "some type");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = editDescUnderTest.type("some type");
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'type' from _properties when value is null",function(){
            editDescUnderTest._properties["type"] = "some type";
            editDescUnderTest.type(null);
            assert(!("type" in editDescUnderTest._properties));
        });
        it("should return the value of 'type' from _properties when value is not given",function(){
            editDescUnderTest._properties["type"] = "some type";
            var type = editDescUnderTest.type();
            assert.equal(type, "some type");
        });
    });

    describe("value method",function() {
        it("should add 'value' to _properties when value is given",function(){
            editDescUnderTest.value("some value");
            assert.strictEqual(editDescUnderTest._properties["value"], "some value");
        });
        it("should add 'value' to _properties when value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                value: "some value"
            });
            assert.strictEqual(editDescUnderTest._properties["value"], "some value");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = editDescUnderTest.value("some value");
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'value' from _properties when value is null",function(){
            editDescUnderTest._properties["value"] = "some value";
            editDescUnderTest.value(null);
            assert(!("value" in editDescUnderTest._properties));
        });
        it("should return the value of 'value' from _properties when value is not given",function(){
            editDescUnderTest._properties["value"] = "some value";
            var value = editDescUnderTest.value();
            assert.equal(value, "some value");
        });
    });

    describe("placeholder method",function() {
        it("should add 'placeholder' to _properties when a value is given",function(){
            editDescUnderTest.placeholder("some placeholder");
            assert.strictEqual(editDescUnderTest._properties["placeholder"], "some placeholder");
        });
        it("should add 'placeholder' to _properties when a value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                placeholder: "some placeholder"
            });
            assert.strictEqual(editDescUnderTest._properties["placeholder"], "some placeholder");
        });
        it("should return this - builder pattern when placeholder is given",function(){
            var result = editDescUnderTest.placeholder("some placeholder");
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'placeholder' from _properties when placeholder is null",function(){
            editDescUnderTest._properties["placeholder"] = "some placeholder";
            editDescUnderTest.placeholder(null);
            assert(!("placeholder" in editDescUnderTest._properties));
        });
        it("should return the value of 'placeholder' from _properties when placeholder is not given",function(){
            editDescUnderTest._properties["placeholder"] = "some placeholder";
            var placeholder = editDescUnderTest.placeholder();
            assert.equal(placeholder, "some placeholder");
        });
    });

    describe("isReadOnly method",function() {
        it("should add 'readonly' with correct value when a value is given",function(){
            editDescUnderTest.isReadOnly(false);
            assert.strictEqual(editDescUnderTest._properties["readonly"], 0);
        });
        it("should add 'readonly' to _properties when a value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                isReadOnly: false
            });
            assert.strictEqual(editDescUnderTest._properties["readonly"], 0);
        });
        it("when value is given, should return this - builder pattern",function(){
            var result = editDescUnderTest.isReadOnly(false);
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'readonly' from _properties when value is null",function(){
            editDescUnderTest._properties["readonly"] = 0;
            editDescUnderTest.isReadOnly(null);
            assert(!("isReadOnly" in editDescUnderTest._properties));
        });
        it("should return the value of 'readonly' from _properties when value is not given",function(){
            editDescUnderTest._properties["readonly"] = 0;
            var isReadOnly = editDescUnderTest.isReadOnly();
            assert.strictEqual(isReadOnly, false);
        });
        it("should return same value in get, when value is set",function(){
            editDescUnderTest.isReadOnly(false);
            var isReadOnly = editDescUnderTest.isReadOnly();
            assert.strictEqual(isReadOnly, false);
        });
    });

    describe("isRequired method",function() {
        it("should add 'required' to _properties when value is given",function(){
            editDescUnderTest.isRequired(true);
            assert.strictEqual(editDescUnderTest._properties["required"], true);
        });
        it("should add 'required' to _properties when value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                isRequired: true
            });
            assert.strictEqual(editDescUnderTest._properties["required"], true);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = editDescUnderTest.isRequired(true);
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'required' from _properties when value is null",function(){
            editDescUnderTest._properties["required"] = true;
            editDescUnderTest.isRequired(null);
            assert(!("required" in editDescUnderTest._properties));
        });
        it("should return the value of 'required' from _properties when value is not given",function(){
            editDescUnderTest._properties["required"] = true;
            var isRequired = editDescUnderTest.isRequired();
            assert.equal(isRequired, true);
        });
    });

    describe("maxCharsInLine method",function() {
        it("should add 'width in characters' to _properties when value is given",function(){
            editDescUnderTest.maxCharsInLine(20);
            assert.strictEqual(editDescUnderTest._properties["width in characters"], 20);
        });
        it("should add 'width in characters' to _properties when value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                maxCharsInLine: 20
            });
            assert.strictEqual(editDescUnderTest._properties["width in characters"], 20);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = editDescUnderTest.maxCharsInLine(20);
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'width in characters' from _properties when value is null",function(){
            editDescUnderTest._properties["width in characters"] = 20;
            editDescUnderTest.maxCharsInLine(null);
            assert(!("width in characters" in editDescUnderTest._properties));
        });
        it("should return the value of 'width in characters' from _properties when value is not given",function(){
            editDescUnderTest._properties["width in characters"] = 20;
            var maxCharsInLine = editDescUnderTest.maxCharsInLine();
            assert.equal(maxCharsInLine, 20);
        });
    });

});

describe("Edit Test Object Behavior",function(){
    var EditTO = require("../lib/edit.js").EditTO;
    var editTOBehaviorUnderTest;

    beforeEach(function(){
        editTOBehaviorUnderTest = EditTO({});
        editTOBehaviorUnderTest._getROProperty = sinon.stub();
        editTOBehaviorUnderTest._executeCommand = sinon.stub();
        editTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        editTOBehaviorUnderTest._session._promiseManager = { rootBranchThen :sinon.stub() };
    });

    describe("setValue", function(){
        var executeEventsPromise = {
            then: sinon.stub()
        };

        beforeEach(function(){
            editTOBehaviorUnderTest._executeCommand.returns(executeEventsPromise);
        });

        it("should call the _executeCommand method",function(){
            editTOBehaviorUnderTest.setValue("");
            assert(editTOBehaviorUnderTest._executeCommand.calledOnce);
        });

        it("should be able to except a string",function(){
            editTOBehaviorUnderTest.setValue("some text");
            assert.equal(editTOBehaviorUnderTest._executeCommand.firstCall.args[1], "some text");
        });

        it("should be able to except null",function(){
            editTOBehaviorUnderTest.setValue(null);
            assert.equal(editTOBehaviorUnderTest._executeCommand.firstCall.args[1], null);
        });

        it("should be able to except empty string",function(){
            editTOBehaviorUnderTest.setValue("");
            assert.equal(editTOBehaviorUnderTest._executeCommand.firstCall.args[1], "");
        });

        it("should be able to except a number",function(){
            editTOBehaviorUnderTest.setValue(56);
            assert.equal(editTOBehaviorUnderTest._executeCommand.firstCall.args[1], 56);
        });

        it("should throw error if no arguments passed",function(){
            assert.throws(function(){
                editTOBehaviorUnderTest.setValue();
            });
        });

        it("should return the same promise that was returned from _executeCommand method",function(){
            var setPromise = { then:sinon.stub() };
            editTOBehaviorUnderTest._executeCommand.returns(setPromise);
            var res = editTOBehaviorUnderTest.setValue("");
            assert.strictEqual(res,setPromise);
        });
    });

    describe("defaultValue",function(){
        it("should query the property 'default value'",function(){
            editTOBehaviorUnderTest.defaultValue();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(editTOBehaviorUnderTest._getROProperty.firstCall.args[0],"default value");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = editTOBehaviorUnderTest.defaultValue();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("maxLength",function(){
        it("should query the property 'max length'",function(){
            editTOBehaviorUnderTest.maxLength();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(editTOBehaviorUnderTest._getROProperty.firstCall.args[0],"max length");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = editTOBehaviorUnderTest.maxLength();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("pattern",function(){
        it("should query the property 'pattern'",function(){
            editTOBehaviorUnderTest.pattern();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(editTOBehaviorUnderTest._getROProperty.firstCall.args[0],"pattern");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = editTOBehaviorUnderTest.pattern();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("rowsCount",function(){
        it("should query the property 'pattern'",function(){
            editTOBehaviorUnderTest.rowsCount();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(editTOBehaviorUnderTest._getROProperty.firstCall.args[0],"rows");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = editTOBehaviorUnderTest.rowsCount();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("type",function(){
        it("should query the property 'type'",function(){
            editTOBehaviorUnderTest.type();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(editTOBehaviorUnderTest._getROProperty.firstCall.args[0],"type");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = editTOBehaviorUnderTest.type();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("value",function(){
        it("should query the property 'value'",function(){
            editTOBehaviorUnderTest.value();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(editTOBehaviorUnderTest._getROProperty.firstCall.args[0],"value");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = editTOBehaviorUnderTest.value();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("isReadOnly",function(){
        var promiseMock = {then: function(cb) {return cb(1);}};
        it("should query the property 'readonly'",function(){
            editTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            editTOBehaviorUnderTest.isReadOnly();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(editTOBehaviorUnderTest._getROProperty.firstCall.args,["readonly", arguments]);
        });
        it("should convert the returned number to it's boolean value",function(){
            editTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = editTOBehaviorUnderTest.isReadOnly();
            assert.strictEqual(res,true);
        });
    });

    describe("isRequired",function(){
        it("should query the property 'required'",function(){
            editTOBehaviorUnderTest.isRequired();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(editTOBehaviorUnderTest._getROProperty.firstCall.args[0],"required");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = editTOBehaviorUnderTest.isRequired();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("maxCharsInLine",function(){
        it("should query the property 'width in characters'",function(){
            editTOBehaviorUnderTest.maxCharsInLine();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(editTOBehaviorUnderTest._getROProperty.firstCall.args[0],"width in characters");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = editTOBehaviorUnderTest.maxCharsInLine();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("setSecure",function(){
        it("should execute command 'SetSecure' and pass it the correct parameters",function(){
            var executeEventsPromise = {
                then: sinon.stub()
            };

            editTOBehaviorUnderTest._executeCommand.returns(executeEventsPromise);
            editTOBehaviorUnderTest.setSecure("my56Pass");
            assert(editTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(editTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,2), ["SetSecure", "my56Pass"]);
        });
        it("should throw error if null passed",function(){
            assert.throws(function(){
                editTOBehaviorUnderTest.setSecure(null);
            });
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = { then: sinon.stub() };
            editTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = editTOBehaviorUnderTest.setSecure("my56Pass");
            assert.strictEqual(res,getROPromise);
        });
    });

});



// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // r97pgRnYh3sCSGuY8tMPZIYftDWldWTdOWEdC/Xszeyg
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCBx
// SIG // ZWBoZFGpaiLbtRys4cw0vQ5QWSU7lpBrJrIk/pd++jAN
// SIG // BgkqhkiG9w0BAQEFAASCAQAkyILwqBK1KHwA6650BVWw
// SIG // ficDZFrsbg49MoXUHD6K+Gu5b0e15tUrAQEjqgD4+eHT
// SIG // 5culoOoTZcKwNuWGJHEX0ZOYJWOUZfwslRXYyKDvbikX
// SIG // 8+fxzCfnik6CghRZ0J0NAEJ2e01iXSJAOREgIa/LR9xE
// SIG // QVWWBvyctrN0uGHEIibdms7GVlRpQtfxhV4pTkkEgoJ6
// SIG // P1/seIfXxD46PluntweWl5BhwIeoNfiPMk603MprEXKi
// SIG // B1+p9Qs9p05qMdd2SzosrTyC7vYgGo004cmDjJJ4P6Cp
// SIG // +DOoeVEVhICfa1J0NJYTy9ZOGfJuLkGLuQFqePAoa4ia
// SIG // XESw9yISEDE+oYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MTgzOFowIwYJKoZI
// SIG // hvcNAQkEMRYEFOV9OGMo+8GWkfmpVb6Ubzu88vUEMA0G
// SIG // CSqGSIb3DQEBAQUABIIBADrE4V2JXPB6/KGKqXK3Nw5d
// SIG // iARUiB2pDwHZ/R7FIPmpD0R5usxrBeeiWX3P4P+jLW4Z
// SIG // JFXCjvyIeD5kzth/ACGZmnuAliwVYu+gEmK2yMh0UwXW
// SIG // HO8Zpi5C+d744i/YoY1W09tIXi95p642DoaXgv24V7Xg
// SIG // gyAmU3UBZIESEz3r7rIduQKM79txX8ZOZu5ssEaA4+MZ
// SIG // jaLv5VNFA+EbUg1r3tMooac3SyaCNvxTrdgS2n3BPj1a
// SIG // tC4uYrZ3r4QjIJ5c1yvNVej6imLDu/V5JzR8+QRwbKzH
// SIG // W4zvr4T6U1y5C053w1lNaksVAGCNM605q1XBiMb18bOM
// SIG // gZmlqZ6ftI0=
// SIG // End signature block
