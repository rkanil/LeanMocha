// (c) Copyright 2015 Hewlett Packard Enterprise Development LP
/**
 * Created on 12/27/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("NumericField Description",function(){
    var NumericFieldDesc = require("../lib/numeric_field.js").NumericField;
    var numericFieldDescUnderTest;

    beforeEach(function(){
        numericFieldDescUnderTest = NumericFieldDesc();
    });

    describe("value method",function() {
        it("should add 'value' as string to _properties when value is given as number",function(){
            numericFieldDescUnderTest.value(22.333);
            assert.strictEqual(numericFieldDescUnderTest._properties["value"], "22.333");
        });
        it("should add 'value' as string to _properties when value is given as numeric string",function(){
            numericFieldDescUnderTest.value("22.333");
            assert.strictEqual(numericFieldDescUnderTest._properties["value"], "22.333");
        });
        it("should throw error if 'value' passed as a non numeric string",function(){
            assert.throws(function(){
                numericFieldDescUnderTest.value("22.333a");
            });
        });
        it("should add 'value' as string to _properties when value is given as number using property bag",function(){
            numericFieldDescUnderTest = NumericFieldDesc({
                value: 22.333
            });
            assert.strictEqual(numericFieldDescUnderTest._properties["value"], "22.333");
        });
        it("should add 'value' as string to _properties when value is given as a numeric string using property bag",function(){
            numericFieldDescUnderTest = NumericFieldDesc({
                value: "22.333"
            });
            assert.strictEqual(numericFieldDescUnderTest._properties["value"], "22.333");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = numericFieldDescUnderTest.value(22.333);
            assert.strictEqual(result, numericFieldDescUnderTest);
        });
        it("should remove 'value' from _properties when value is null",function(){
            numericFieldDescUnderTest._properties["value"] = "22.333";
            numericFieldDescUnderTest.value(null);
            assert(!("value" in numericFieldDescUnderTest._properties));
        });
        it("should return the value of 'value' from _properties when value is not given",function(){
            numericFieldDescUnderTest._properties["value"] = "22.333";
            var value = numericFieldDescUnderTest.value();
            assert.equal(value, 22.333);
        });
    });

    describe("defaultValue method",function() {
        it("should add 'default value' as string to _properties when value is given as number",function(){
            numericFieldDescUnderTest.defaultValue(22.333);
            assert.strictEqual(numericFieldDescUnderTest._properties["default value"], "22.333");
        });
        it("should add 'default value' as string to _properties when value is given as numeric string",function(){
            numericFieldDescUnderTest.defaultValue("22.333");
            assert.strictEqual(numericFieldDescUnderTest._properties["default value"], "22.333");
        });
        it("should throw error if 'default value' passed as a non numeric string",function(){
            assert.throws(function(){
                numericFieldDescUnderTest.defaultValue("22.333a");
            });
        });
        it("should add 'default value' as string to _properties when value is given as number using property bag",function(){
            numericFieldDescUnderTest = NumericFieldDesc({
                defaultValue: 22.333
            });
            assert.strictEqual(numericFieldDescUnderTest._properties["default value"], "22.333");
        });
        it("should add 'default value' as string to _properties when value is given as a numeric string using property bag",function(){
            numericFieldDescUnderTest = NumericFieldDesc({
                defaultValue: "22.333"
            });
            assert.strictEqual(numericFieldDescUnderTest._properties["default value"], "22.333");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = numericFieldDescUnderTest.defaultValue(22.333);
            assert.strictEqual(result, numericFieldDescUnderTest);
        });
        it("should remove 'default value' from _properties when value is null",function(){
            numericFieldDescUnderTest._properties["default value"] = "22.333";
            numericFieldDescUnderTest.defaultValue(null);
            assert(!("default value" in numericFieldDescUnderTest._properties));
        });
        it("should return the value of 'default value' from _properties when value is not given",function(){
            numericFieldDescUnderTest._properties["default value"] = "22.333";
            var defaultValue = numericFieldDescUnderTest.defaultValue();
            assert.equal(defaultValue, 22.333);
        });
    });

    describe("min method",function() {
        it("should add 'min' as string to _properties when value is given as number",function(){
            numericFieldDescUnderTest.min(22.333);
            assert.strictEqual(numericFieldDescUnderTest._properties["min"], "22.333");
        });
        it("should add 'min' as string to _properties when value is given as numeric string",function(){
            numericFieldDescUnderTest.min("22.333");
            assert.strictEqual(numericFieldDescUnderTest._properties["min"], "22.333");
        });
        it("should throw error if 'min' passed as a non numeric string",function(){
            assert.throws(function(){
                numericFieldDescUnderTest.min("22.333a");
            });
        });
        it("should add 'min' as string to _properties when value is given as number using property bag",function(){
            numericFieldDescUnderTest = NumericFieldDesc({
                min: 22.333
            });
            assert.strictEqual(numericFieldDescUnderTest._properties["min"], "22.333");
        });
        it("should add 'min' as string to _properties when value is given as a numeric string using property bag",function(){
            numericFieldDescUnderTest = NumericFieldDesc({
                min: "22.333"
            });
            assert.strictEqual(numericFieldDescUnderTest._properties["min"], "22.333");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = numericFieldDescUnderTest.min(22.333);
            assert.strictEqual(result, numericFieldDescUnderTest);
        });
        it("should remove 'min' from _properties when value is null",function(){
            numericFieldDescUnderTest._properties["min"] = 22.333;
            numericFieldDescUnderTest.min(null);
            assert(!("min" in numericFieldDescUnderTest._properties));
        });
        it("should return the value of 'min' from _properties when value is not given",function(){
            numericFieldDescUnderTest._properties["min"] = 22.333;
            var min = numericFieldDescUnderTest.min();
            assert.equal(min, 22.333);
        });
    });

    describe("max method",function() {
        it("should add 'max' as string to _properties when value is given as number",function(){
            numericFieldDescUnderTest.max(22.333);
            assert.strictEqual(numericFieldDescUnderTest._properties["max"], "22.333");
        });
        it("should add 'max' as string to _properties when value is given as numeric string",function(){
            numericFieldDescUnderTest.max("22.333");
            assert.strictEqual(numericFieldDescUnderTest._properties["max"], "22.333");
        });
        it("should throw error if 'max' passed as a non numeric string",function(){
            assert.throws(function(){
                numericFieldDescUnderTest.max("22.333a");
            });
        });
        it("should add 'max' as string to _properties when value is given as number using property bag",function(){
            numericFieldDescUnderTest = NumericFieldDesc({
                max: 22.333
            });
            assert.strictEqual(numericFieldDescUnderTest._properties["max"], "22.333");
        });
        it("should add 'max' as string to _properties when value is given as a numeric string using property bag",function(){
            numericFieldDescUnderTest = NumericFieldDesc({
                max: "22.333"
            });
            assert.strictEqual(numericFieldDescUnderTest._properties["max"], "22.333");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = numericFieldDescUnderTest.max(22.333);
            assert.strictEqual(result, numericFieldDescUnderTest);
        });
        it("should remove 'max' from _properties when value is null",function(){
            numericFieldDescUnderTest._properties["max"] = 22.333;
            numericFieldDescUnderTest.max(null);
            assert(!("max" in numericFieldDescUnderTest._properties));
        });
        it("should return the value of 'max' from _properties when value is not given",function(){
            numericFieldDescUnderTest._properties["max"] = 22.333;
            var max = numericFieldDescUnderTest.max();
            assert.equal(max, 22.333);
        });
    });

});

describe("NumericFieldTO Behavior",function(){
    var NumericFieldTO = require("../lib/numeric_field.js").NumericFieldTO;
    var numericFieldTOBehaviorUnderTest;

    beforeEach(function(){
        numericFieldTOBehaviorUnderTest = NumericFieldTO({});
        sinon.stub(numericFieldTOBehaviorUnderTest, "_getROProperty");
        sinon.stub(numericFieldTOBehaviorUnderTest, "_executeCommand");
        numericFieldTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        numericFieldTOBehaviorUnderTest._session._promiseManager = {rootBranchThen :sinon.stub() };

        var promiseMock = {
            then: function(cb) {
                return cb("1.23");
            }
        };
        numericFieldTOBehaviorUnderTest._getROProperty.returns(promiseMock);
    });

    describe("setValue", function(){
        var funcPromise = {
            then: sinon.stub()
        };

        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                numericFieldTOBehaviorUnderTest.setValue();
            });
        });
        it("should throw error if null passed", function(){
            assert.throws(function(){
                numericFieldTOBehaviorUnderTest.setValue(null);
            });
        });
        it("should throw error if a non numeric string passed", function(){
            assert.throws(function(){
                numericFieldTOBehaviorUnderTest.setValue("22.33a");
            });
        });
        it("should call the _executeCommand method and pass it the correct parameters when a number passed",function(){
            numericFieldTOBehaviorUnderTest._executeCommand.returns(funcPromise);
            numericFieldTOBehaviorUnderTest.setValue(22.33);
            assert(numericFieldTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(numericFieldTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,2), ["Set", "22.33"]);
        });
        it("should call the _executeCommand method and pass it the correct parameters when a numeric string passed",function(){
            numericFieldTOBehaviorUnderTest._executeCommand.returns(funcPromise);
            numericFieldTOBehaviorUnderTest.setValue("22.33");
            assert(numericFieldTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(numericFieldTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,2), ["Set", "22.33"]);
        });
        it("should return the same promise that was returned from _executeCommand method",function(){
            var setPromise = {
                then: sinon.stub()
            };
            numericFieldTOBehaviorUnderTest._executeCommand.returns(setPromise);
            var res = numericFieldTOBehaviorUnderTest.setValue(22.33);
            assert.strictEqual(res,setPromise);
        });
    });
    describe("value",function(){
        it("should query the property 'value'",function(){
            numericFieldTOBehaviorUnderTest.value();
            assert(numericFieldTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(numericFieldTOBehaviorUnderTest._getROProperty.firstCall.args,["value", arguments]);
        });
        it("should return the value as number after promise returned from getROProperty",function(){
            var res = numericFieldTOBehaviorUnderTest.value();
            assert.strictEqual(res, 1.23);
        });
    });
    describe("defaultValue",function(){
        it("should query the property 'default value'",function(){
            numericFieldTOBehaviorUnderTest.defaultValue();
            assert(numericFieldTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(numericFieldTOBehaviorUnderTest._getROProperty.firstCall.args,["default value", arguments]);
        });
        it("should return the value as number after promise returned from getROProperty",function(){
            var res = numericFieldTOBehaviorUnderTest.defaultValue();
            assert.strictEqual(res, 1.23);
        });
    });
    describe("min",function(){
        it("should query the property 'min'",function(){
            numericFieldTOBehaviorUnderTest.min();
            assert(numericFieldTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(numericFieldTOBehaviorUnderTest._getROProperty.firstCall.args,["min", arguments]);
        });
        it("should return the value as number after promise returned from getROProperty",function(){
            var res = numericFieldTOBehaviorUnderTest.min();
            assert.strictEqual(res, 1.23);
        });
    });
    describe("max",function(){
        it("should query the property 'max'",function(){
            numericFieldTOBehaviorUnderTest.max();
            assert(numericFieldTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(numericFieldTOBehaviorUnderTest._getROProperty.firstCall.args,["max", arguments]);
        });
        it("should return the value as number after promise returned from getROProperty",function(){
            var res = numericFieldTOBehaviorUnderTest.max();
            assert.strictEqual(res, 1.23);
        });
    });

});



// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // 5RC/mqQ3Nr7Kc2ZQXxsg5RgoS8kev9ylq7G1jSjYk3ag
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCAK
// SIG // vWIN85Dkx4YyhgB7IcNj9YG2rszH9xbx5GQirXDOBzAN
// SIG // BgkqhkiG9w0BAQEFAASCAQCI+2cSysNjtSsnmlo9VOFE
// SIG // WwT2F6PQAK4C4dwM++6o3MkynkZm8eUNRbqomfybtCtc
// SIG // eVjjG0B19IBtfcsfiAvEcmCUnhy3X9RRrCoRTFLPwEx0
// SIG // A0MIScnxLRUdbksxmyceFQ3zOHgP4J24lz4lM3At3RSB
// SIG // h2KRze8ZpMlIp67ArG0/NeoRdevuFQGR6ftU6doIrt4W
// SIG // N7WLo0TvVAvvM3HIWcVOqkz1cG/d2ybZSN2UmyMN8ZhJ
// SIG // AtDqAqLBuHRDUd38weOjsD9HlSz6uzH1iVIPQxl4Wh3z
// SIG // ePP/J0sobcRog9DiPu79SRFAv8uJAyLUbp44Jgrp/ZvI
// SIG // KBh5KyrGG8A9oYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MTcyMlowIwYJKoZI
// SIG // hvcNAQkEMRYEFA13OEH80YAmQN9f6o8r5tfpSipKMA0G
// SIG // CSqGSIb3DQEBAQUABIIBABNNt1kktKlXVvI+szAfbRl3
// SIG // gw84QuXZlXq5qNr3ElX2bi2VQCpvZPWmm0NiP+Lc6fA6
// SIG // oZvHfjadaDLBxSR2YRgLbrc8cPMNOD6qJLk+uANbR0Ap
// SIG // TrHVq+7n2Ae8H2+D1DcPx5ImSu3DWKgu0c27Npe7YAaT
// SIG // Xnf9wGMMV6QRy/kyENo5WdtULkQxPOYayXAkeW0nnnuN
// SIG // pu0LY5VIAJ3gJCUuqO+NBlvLn5/1llHZDabS4rEHPV1P
// SIG // 7D0NSPRqfhn/PmgYyWVd7PKgYkvWcrwNv8PW16praFbn
// SIG // 75QIi0GE+dQqzQ+35dZStADRvAunuu6AGxjN2Lx2wfTr
// SIG // b55dtu941FM=
// SIG // End signature block
