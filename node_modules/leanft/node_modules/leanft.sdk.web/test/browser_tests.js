// (c) Copyright 2015 Hewlett Packard Enterprise Development LP
/**
 * Created on 09/11/2015.
 * Unittests for browser test object
 */

var Browser = require("../lib/browser.js").Browser;
var DialogButton = require("../lib/browser.js").DialogButton;
var Page = require("../lib/page.js").Page;
var WebElement = require("../lib/webelement.js").WebElement;
var sinon = require("sinon");
var assert = require("assert");

describe("Browser Test Object",function(){
   var browserUnderTest = null;
    beforeEach(function(){
        //mocks the creation of the test object;
        sinon.stub(Browser.prototype.__super,"$").returns({});
        sinon.stub(Browser.prototype.__super,"$$").returns([]);
        browserUnderTest = new Browser(-1);

        //since the browser constructor calls $ (describe), we reset the stub (to reset the method calls counter)
        Browser.prototype.__super.$.restore();
        sinon.stub(Browser.prototype.__super,"$").returns({});

        sinon.stub(browserUnderTest,"_executeCommand");
        sinon.stub(browserUnderTest,"_getROProperty");
   });

    describe("version",function(){
        it("should query the property 'version'",function(){
            var promiseMock = {then: function(cb) {return cb("Chrome 47.0");}};
            browserUnderTest._getROProperty.returns(promiseMock);
            browserUnderTest.version();
            assert(browserUnderTest._getROProperty.calledOnce);
            assert.deepEqual(browserUnderTest._getROProperty.firstCall.args,["version", arguments]);
        });
        it("should split answer correctly for Chrome",function(){
            var promiseMock = {then: function(cb) {return cb("Chrome 47.0");}};
            browserUnderTest._getROProperty.returns(promiseMock);
            var browserVersionObj = browserUnderTest.version();
            assert.strictEqual(browserVersionObj.type, "Chrome");
            assert.strictEqual(browserVersionObj.version, "47.0");
        });
        it("should split answer correctly for Firefox",function(){
            var promiseMock = {then: function(cb) {return cb("Mozilla Firefox 47.0");}};
            browserUnderTest._getROProperty.returns(promiseMock);
            var browserVersionObj = browserUnderTest.version();
            assert.strictEqual(browserVersionObj.type, "Mozilla Firefox");
            assert.strictEqual(browserVersionObj.version, "47.0");
        });
        it("should split answer correctly for IE",function(){
            var promiseMock = {then: function(cb) {return cb("internet explorer 10");}};
            browserUnderTest._getROProperty.returns(promiseMock);
            var browserVersionObj = browserUnderTest.version();
            assert.strictEqual(browserVersionObj.type, "internet explorer");
            assert.strictEqual(browserVersionObj.version, "10");
        });
    });

    describe("numberOfTabs",function(){
        it("should query the property 'number of tabs'",function(){
            browserUnderTest.numberOfTabs();
            assert(browserUnderTest._getROProperty.calledOnce);
            assert.deepEqual(browserUnderTest._getROProperty.firstCall.args,["number of tabs", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            browserUnderTest._getROProperty.returns(getROPromise);
            var res = browserUnderTest.numberOfTabs();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("openTitle",function(){
        it("should query the property 'opentitle'",function(){
            browserUnderTest.openTitle();
            assert(browserUnderTest._getROProperty.calledOnce);
            assert.deepEqual(browserUnderTest._getROProperty.firstCall.args,["opentitle", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            browserUnderTest._getROProperty.returns(getROPromise);
            var res = browserUnderTest.openTitle();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("openUrl",function(){
        it("should query the property 'openurl'",function(){
            browserUnderTest.openUrl();
            assert(browserUnderTest._getROProperty.calledOnce);
            assert.deepEqual(browserUnderTest._getROProperty.firstCall.args,["openurl", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            browserUnderTest._getROProperty.returns(getROPromise);
            var res = browserUnderTest.openUrl();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("title",function(){
        it("should query the property 'title'",function(){
            browserUnderTest.title();
            assert(browserUnderTest._getROProperty.calledOnce);
            assert.deepEqual(browserUnderTest._getROProperty.firstCall.args,["title", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            browserUnderTest._getROProperty.returns(getROPromise);
            var res = browserUnderTest.title();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("url",function(){
        it("should query the property 'url'",function(){
            browserUnderTest.url();
            assert(browserUnderTest._getROProperty.calledOnce);
            assert.deepEqual(browserUnderTest._getROProperty.firstCall.args,["url", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            browserUnderTest._getROProperty.returns(getROPromise);
            var res = browserUnderTest.url();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("refresh method",function(){
        it("should execute command 'Refresh'",function(){
            browserUnderTest.refresh();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"refresh");
        });

        it("should return the execution promise",function(){
            var executionPromise = {};
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.refresh();

            assert.equal(res,executionPromise);
        });
    });

    describe("sync method",function(){
        it("should execute command 'Sync'",function(){
            browserUnderTest.sync();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"sync");
        });

        it("should return the execution promise",function(){
            var executionPromise = {};
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.sync();

            assert.equal(res,executionPromise);
        });
    });

    describe("openNewTab method",function(){
        it("should execute command 'OpenNewTab'",function(){
            browserUnderTest.openNewTab();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"opennewtab");
        });

        it("should return the execution promise",function(){
            var executionPromise = {};
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.openNewTab();

            assert.equal(res,executionPromise);
        });
    });

    describe("fullScreen method",function(){
        it("should execute command 'FullScreen'",function(){
            browserUnderTest.fullScreen();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"fullscreen");
        });

        it("should return the execution promise",function(){
            var executionPromise = {};
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.fullScreen();

            assert.equal(res,executionPromise);
        });
    });

    describe("closeAllTabs method",function(){
        it("should execute command 'CloseAllTabs'",function(){
            browserUnderTest.closeAllTabs();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"closealltabs");
        });
        it("should return the execution promise",function(){
            var executionPromise = {};
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.closeAllTabs();
            assert.equal(res,executionPromise);
        });
    });

    describe("forward method",function(){
        it("should execute command 'Forward'",function(){
            browserUnderTest.forward();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"forward");
        });
        it("should return the execution promise",function(){
            var executionPromise = {};
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.forward();
            assert.equal(res,executionPromise);
        });
    });

    describe("getDialogText method",function(){
        it("should execute command 'GetDialogText'",function(){
            browserUnderTest.getDialogText();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"getdialogtext");
        });
        it("should return the execution promise",function(){
            var executionPromise = "Press OK button to continue ...";
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.getDialogText();
            assert.equal(res,executionPromise);
        });
    });

    describe("hasDialog method",function(){
        it("should execute command 'DialogExists'",function(){
            browserUnderTest.hasDialog();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"dialogexists");
        });
        it("should return the execution promise",function(){
            var executionPromise = true;
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.hasDialog();
            assert.equal(res,executionPromise);
        });
    });

    describe("handleDialog method",function(){
        it("should pass 0 to _executeCommand if 'ok' passed",function(){
            browserUnderTest.handleDialog("ok");
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["HandleDialog", 0]);
        });
        it("should pass 0 to _executeCommand if DialogButton.ok passed",function(){
            browserUnderTest.handleDialog(DialogButton.ok);
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["HandleDialog", 0]);
        });
        it("should pass 0 to _executeCommand if nothing passed",function(){
            browserUnderTest.handleDialog();
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["HandleDialog", 0]);
        });
        it("should pass 1 to _executeCommand if 'cancel' passed",function(){
            browserUnderTest.handleDialog("cancel");
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["HandleDialog", 1]);
        });
        it("should pass 1 to _executeCommand if DialogButton.cancel passed",function(){
            browserUnderTest.handleDialog(DialogButton.cancel);
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["HandleDialog", 1]);
        });
        it("should throw error if anything other than 'ok' or 'cancel' (not case sensitive) passed", function () {
            assert.throws(function(){
                browserUnderTest.handleDialog("ook");
            });
        });
        it("should throw error if a non string value passed", function () {
            assert.throws(function(){
                browserUnderTest.handleDialog({});
            });
        });
        it("should return the execution promise",function(){
            var executionPromise = true;
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.handleDialog("ok");
            assert.equal(res,executionPromise);
        });
    });

    describe("handlePromptDialog method",function(){
        it("should throw error if null passed", function () {
            assert.throws(function () {
                browserUnderTest.handlePromptDialog(null);
            });
        });
        it("should execute command 'HandleDialog'",function(){
            browserUnderTest.handlePromptDialog("some text");
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,3),["HandleDialog", 0, "some text"]);
        });
        it("should return the execution promise",function(){
            var executionPromise = "some text";
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.handlePromptDialog("some text");
            assert.equal(res,executionPromise);
        });
    });

    describe("deleteCookies method",function(){
        it("should throw error if null passed", function () {
            assert.throws(function () {
                browserUnderTest.deleteCookies(null);
            });
        });
        it("should return the execution promise",function(){
            var executionPromise = "some text";
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.deleteCookies("some text");
            assert.equal(res,executionPromise);
        });
        it("should execute command 'DeleteCookies' and pass correct arguments if no parameters accepted",function(){
            browserUnderTest.deleteCookies();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,1),["DeleteCookies"]);
        });
        it("should execute command 'DeleteCookies' and pass correct arguments if sourceName accepted",function(){
            browserUnderTest.deleteCookies("some source");
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["DeleteCookies", "some source"]);
        });
    });

    describe("embedScript method",function() {
        it("should execute command 'EmbedScript'",function(){
            browserUnderTest.embedScript(function(){});
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"embedscript");
        });
        it("should return the execution promise",function(){
            var executionPromise = {};
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.embedScript("console.log(5)");
            assert.equal(res,executionPromise);
        });
        it("should throw error if null passed", function () {
            assert.throws(function () {
                browserUnderTest.embedScript(null);
            });
        });
        it("should throw error if no parameters passed", function () {
            assert.throws(function () {
                browserUnderTest.embedScript();
            });
        });
        it("should call _executeCommand and pass it the string as is, when the argument pass is a string", function () {
            browserUnderTest.embedScript("some string we expect to embed as script");
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["EmbedScript", "some string we expect to embed as script"]);
        });
        it("should call _executeCommand and pass it the function with it's name, when anonymous function passed as first argument, and a function name as the second argument", function () {
            browserUnderTest.embedScript(function(){}, "print");
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["EmbedScript", "function print(){}"]);
        });
        it("should call _executeCommand and pass it the function with it's name, when a named function passed as first argument, and a function name as the second argument", function () {
            browserUnderTest.embedScript(function print(){}, "SomeName");
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["EmbedScript", "function print(){}"]);
        });
        it("should call _executeCommand and pass it the function with it's name, when a named function passed as first argument, and a no function name is supplied", function () {
            browserUnderTest.embedScript(function print(){});
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["EmbedScript", "function print(){}"]);
        });
        it("should call _executeCommand and pass it the function as is, when anonymous function passed as first argument, and there is no function name passed as the second argument", function () {
            browserUnderTest.embedScript(function(){});
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["EmbedScript", "function (){}"]);
        });
    });

    describe("resizeTo method",function(){
        it("should throw error if null passed",function(){
            assert.throws(function(){
                browserUnderTest.resizeTo(null);
            });
        });
        it("should return the execution promise",function(){
            var executionPromise = {};
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.resizeTo(500, 500);
            assert.equal(res,executionPromise);
        });
        it("should call _executeCommand and pass it the correct arguments when two numbers passed",function(){
            browserUnderTest.resizeTo(500, 600);
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,3),["Resize", 500, 600]);
        });
        it("should call _executeCommand and pass it the correct arguments when a size object passed",function(){
            browserUnderTest.resizeTo({width: 500, height: 600});
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,3),["Resize", 500, 600]);
        });
        it("should throw error if one argument passed which is not an object",function(){
            assert.throws(function(){
                browserUnderTest.resizeTo(500);
            });
        });
        it("should throw error if an object that not contains both properties passed",function(){
            assert.throws(function(){
                browserUnderTest.resizeTo({});
            });
        });
        it("should throw error if an object that not contains two properties passed",function(){
            assert.throws(function(){
                browserUnderTest.resizeTo({width: 500});
            });
        });
        it("should throw error if an object passed with two properties but the keys are not 'width' or 'height'",function(){
            assert.throws(function(){
                browserUnderTest.resizeTo({shimon: 500, height: 600});
            });
        });
        it("should throw error if an object passed with two properties but one of the values is not a number",function(){
            assert.throws(function(){
                browserUnderTest.resizeTo({width: 500, height: "50A"});
            });
        });
        it("should throw error if an passed with two arguments but one of the values is not a number",function(){
            assert.throws(function(){
                browserUnderTest.resizeTo(500, "50A");
            });
        });
    });

   describe("back method",function(){
       it("should execute command 'back'",function(){
           browserUnderTest.back();
           assert(browserUnderTest._executeCommand.calledOnce);
           assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"back");
       });

       it("should return the execution promise",function(){
          var executionPromise = {};
           browserUnderTest._executeCommand.returns(executionPromise);
           var res = browserUnderTest.back();

           assert.equal(res,executionPromise);
       });
   });

    describe("close method",function(){
        it("should execute command 'close'",function(){
            browserUnderTest.close();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"close");
        });

        it("should return the execution promise",function(){
            var executionPromise = {};
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.close();

            assert.equal(res,executionPromise);
        });
    });

    describe("constructor", function() {
        it("should construct page", function() {
            assert.notStrictEqual(browserUnderTest.page, undefined);
            assert.notStrictEqual(browserUnderTest.page, null);
        });
    });

    describe("$$ - findChildren", function() {
        var pageMock;

        beforeEach(function(){
            pageMock = {};
            pageMock.$$ = sinon.stub();

            browserUnderTest.page = pageMock;
        });

        it("should call the $$ method of the page and pass args as is", function() {
            var elem = WebElement();
            browserUnderTest.$$(elem, true);

            assert(pageMock.$$.calledOnce);
            assert(pageMock.$$.calledWith(elem, true));
        });

        it("should return the result as returned from the page", function() {
            pageMock.$$.returns("aaa");

            var elem = WebElement();
            var res = browserUnderTest.$$(elem, true);
            assert.strictEqual(res, "aaa");
        });

        it("should call super.$$ if page description is passed", function() {
            var page = Page();
            browserUnderTest.$$(page);
            assert(Browser.prototype.__super.$$.calledOnce);
            assert(Browser.prototype.__super.$$.calledWith(page));
        });
    });

    describe("$x - describe by xpath",function(){
        beforeEach(function(){
            browserUnderTest.page = {
                $x: sinon.stub()
            };
        });

        it("should forward the call to the page", function() {
            var elem = WebElement();
            browserUnderTest.$x(1,elem);

            assert(browserUnderTest.page.$x.calledOnce);
            assert(browserUnderTest.page.$x.calledWith(1,elem));
        });

        it("should return the result as returned from the page", function() {
            browserUnderTest.page.$x.returns("aaa");

            var res = browserUnderTest.$x(null);
            assert.strictEqual(res, "aaa");
        });


        it("should throw error if attempting to describe a page with xpath", function() {
            assert.throws(function() {
               browserUnderTest.$x("aaa", Page());
            });
        });
    });

    describe("$ method", function() {
        beforeEach(function(){
            browserUnderTest.page = {
                $: sinon.stub()
            };
        });

        it("should forward the call to the page when web element desc is provided", function() {
            var elem = WebElement();
            browserUnderTest.$(elem);

            assert(browserUnderTest.page.$.calledOnce);
            assert(browserUnderTest.page.$.calledWith(elem));
        });

        it("should forward the call to the page when css and web element desc are provided", function() {
            var elem = WebElement();
            browserUnderTest.$("css", elem);

            assert(browserUnderTest.page.$.calledOnce);
            assert(browserUnderTest.page.$.calledWith("css", elem));
        });

        it("should forward the call to the page when only css is provided", function() {
            browserUnderTest.$("css");

            assert(browserUnderTest.page.$.calledOnce);
            assert(browserUnderTest.page.$.calledWith("css"));
        });

        it("should call super.$ if page description is passed", function() {
            var page = Page();
            browserUnderTest.$(page);
            assert(Browser.prototype.__super.$.calledOnce);
            assert(Browser.prototype.__super.$.calledWith(page));
        });
    });

    afterEach(function(){
        Browser.prototype.__super.$.restore();
        Browser.prototype.__super.$$.restore();
    })
});

describe("BrowserFilter",function(){
    var browserFilterUnderTest;
    var BrowserFilter = require("../lib/browser.js").BrowserFilter;
    beforeEach(function(){
       browserFilterUnderTest = new BrowserFilter();
   });

    describe("title method",function() {
        it("should add 'title' to _properties with the correct value when value is given",function(){
            browserFilterUnderTest.title("some title");
            assert.strictEqual(browserFilterUnderTest._properties["title"], "some title");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = browserFilterUnderTest.title("some title");
            assert.strictEqual(result, browserFilterUnderTest);
        });
        it("should remove 'title' from _properties when value is null",function(){
            browserFilterUnderTest._properties["title"] = "some title";
            browserFilterUnderTest.title(null);
            assert(!("title" in browserFilterUnderTest._properties));
        });
        it("should return the value of 'title' from _properties when value is not given",function(){
            browserFilterUnderTest._properties["title"] = "some title";
            var title = browserFilterUnderTest.title();
            assert.equal(title, "some title");
        });
    });

    describe("url method",function() {
        it("should add 'url' to _properties with the correct value when value is given",function(){
            browserFilterUnderTest.url("some url");
            assert.strictEqual(browserFilterUnderTest._properties["url"], "some url");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = browserFilterUnderTest.url("some url");
            assert.strictEqual(result, browserFilterUnderTest);
        });
        it("should remove 'url' from _properties when value is null",function(){
            browserFilterUnderTest._properties["url"] = "some url";
            browserFilterUnderTest.url(null);
            assert(!("url" in browserFilterUnderTest._properties));
        });
        it("should return the value of 'url' from _properties when value is not given",function(){
            browserFilterUnderTest._properties["url"] = "some url";
            var url = browserFilterUnderTest.url();
            assert.equal(url, "some url");
        });
    });

    describe("openTitle method",function() {
        it("should add 'opentitle' to _properties with the correct value when value is given",function(){
            browserFilterUnderTest.openTitle("some title");
            assert.strictEqual(browserFilterUnderTest._properties["opentitle"], "some title");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = browserFilterUnderTest.openTitle("some title");
            assert.strictEqual(result, browserFilterUnderTest);
        });
        it("should remove 'opentitle' from _properties when value is null",function(){
            browserFilterUnderTest._properties["opentitle"] = "some title";
            browserFilterUnderTest.openTitle(null);
            assert(!("opentitle" in browserFilterUnderTest._properties));
        });
        it("should return the value of 'opentitle' from _properties when value is not given",function(){
            browserFilterUnderTest._properties["opentitle"] = "some title";
            var title = browserFilterUnderTest.openTitle();
            assert.equal(title, "some title");
        });
    });

    describe("openURL method",function() {
        it("should add 'openurl' to _properties with the correct value when value is given",function(){
            browserFilterUnderTest.openURL("some url");
            assert.strictEqual(browserFilterUnderTest._properties["openurl"], "some url");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = browserFilterUnderTest.openURL("some url");
            assert.strictEqual(result, browserFilterUnderTest);
        });
        it("should remove 'openurl' from _properties when value is null",function(){
            browserFilterUnderTest._properties["openurl"] = "some url";
            browserFilterUnderTest.openURL(null);
            assert(!("openurl" in browserFilterUnderTest._properties));
        });
        it("should return the value of 'url' from _properties when value is not given",function(){
            browserFilterUnderTest._properties["openurl"] = "some url";
            var url = browserFilterUnderTest.openURL();
            assert.equal(url, "some url");
        });
    });

    describe("type method",function() {
        it("should add 'version' to _properties with regular expression that captures the browser type",function(){
            browserFilterUnderTest.type("SomeBrowser");
            assert.deepEqual(browserFilterUnderTest._properties["version"], /SomeBrowser.*/);
        });
        it("should add 'version' to _properties with regular expression that captures the firefox browser",function(){
            browserFilterUnderTest.type("Firefox");
            assert.deepEqual(browserFilterUnderTest._properties["version"], /Mozilla Firefox.*/);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = browserFilterUnderTest.type("some url");
            assert.strictEqual(result, browserFilterUnderTest);
        });
        it("should remove 'version' from _properties when value is null",function(){
            browserFilterUnderTest._properties["version"] = "some url";
            browserFilterUnderTest.type(null);
            assert(!("version" in browserFilterUnderTest._properties));
        });
        it("should return the value of 'version' from _properties when value is not given and convert it to BrowserType",function(){
            browserFilterUnderTest._properties["version"] = /SomeBrowser.*/;
            var browserType = browserFilterUnderTest.type();
            assert.strictEqual(browserType, "SomeBrowser");
        });
        it("should return the value of 'version' from _properties when value is not given and convert it to BrowserType (FireFox)",function(){
            browserFilterUnderTest._properties["version"] = /Mozilla Firefox.*/;
            var browserType = browserFilterUnderTest.type();
            assert.strictEqual(browserType, "Firefox");
        });

    });
});
// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // RBO6m0qPHlHFDebkwJOVl/gA9HUxa5EKYQRxl1NeicGg
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCCO
// SIG // XmmvciTBLnVbt+7CWTmbr9igVBgk0Ce/nCR5E+3XhjAN
// SIG // BgkqhkiG9w0BAQEFAASCAQAtxAe0tyNYE31nrjGitZD8
// SIG // S+/3rGpr99M2KAXQXU/qqcDzowk6TIhjEJOZAzLuskms
// SIG // EHR/MmzkAYkY5KgQUDfeGSTNH8CeQ/8mQGce0gzRbsyh
// SIG // 4ksN7M7tp9c9m3/zfI4yh943qHehH9Vn1Tb+5AqFItVl
// SIG // rVqBRrL1MLL4FFpDRFUGwLEAHBhfH1L96BpqoTQT8Ewi
// SIG // HKw99H3ewt9A+NHuClh3S6NmnjIuhYeX/pxtuo2n+CNU
// SIG // QycLXog43ad3c2G9ylr2ZGncbHn0OyAbyBVUCskL3Fq2
// SIG // 25NER8ReD5K+fMMkaXhdnyqNAhAYnUCmbObg/WRDmhMx
// SIG // +unFUfoNFsA/oYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MTk1NVowIwYJKoZI
// SIG // hvcNAQkEMRYEFM5CtC89QMPzzm2wN/NRqszStNhVMA0G
// SIG // CSqGSIb3DQEBAQUABIIBAIUO3y2DRz3V8ztZNRzWm8R+
// SIG // Trq3m/Z7Vk/chiOKqttckLrHSRpSh/BTqoG6+kNS4K8u
// SIG // nkYnFytm2EQfxOHrY93QR4dauEwYQ7Gfj7qpqUJ9JFwu
// SIG // T+HblwHf3/KuuI3174KmvVp9Zns8TlCwCwqnRj06e9Wd
// SIG // PhQ2jXJizSckbGVhgVkF2XaVOA9PCxTjGyrcxzowWr/1
// SIG // 8dxIuo95dwdchIf1Tr0SeazNbp9oZ5hYsr+w1TjC842/
// SIG // nL2O3nOYh/7xq4xQd7IuzcJIBwKr/3/P+7f/kFJj5BGc
// SIG // gv50PDCyj5U2FHAiOwtP/8XfFUznTsLkARpIAt3lO+6a
// SIG // W1sBQnTR/dM=
// SIG // End signature block
