// (c) Copyright 2015 Hewlett Packard Enterprise Development LP

// Created on 06/12/2015.
// The PromiseWrapper wraps the Q promise class and allows us to add our own logic to the
// then and catch methods of the promise.
// the CommunicationCliend connect and send methods return this PromiseWrapper.

/** @private */
var Logger = require("./logger.js").Logger;
var Q = require("q");
var ArrayUtils = require("./object_utils.js").ArrayUtils;

function PromiseManager() {
    this._logger = new Logger("PromiseManager");
    this._generation = 0;
}

PromiseManager.prototype = {
    _logger: null,
    _promises: {},
    _exceptionHolder: null,
    _nextPromiseId: 0,
    _done: null,
    _rootBranchPromise: null,
    _exception: null,
    _generation: null,

    _promiseCount: function() {
        return Object.keys(this._promises).length;
    },

    /*jshint eqnull:true */
    registerPromise: function(promise) {
        var id = this._getNextPromiseId();
        this._logger.debug("registerPromise id: " + id);

        if(this._promises[id] != null) {
            var errMsg = "attempt to double registration of promise id: " + id;
            this._logger.error(errMsg);
            throw new Error(errMsg);
        }

        this._promises[id] = promise;
        return id;
    },

    unregisterPromise: function(promise) {
        var id = promise._id;

        this._logger.debug("unregisterPromise id: " + id);

        if(!this._promises[id]) {
            this._logger.error("un-registration of not registered promise id: " + id);
            return;
        }
        delete this._promises[id];
        if(!this.isCancelled(promise)) {
            this._checkIfDone();
        }
    },

    /**
     * This method creates the root PromiseWrapper and performs initializations.
     * @param nativePromise The native promise to be wrapped by the root PromiseWrapper.
     * @returns {PromiseWrapper}
     */
    init: function(nativePromise) {
        this._reset(nativePromise);
        return this._rootBranchPromise;
    },

    failTest: function(error) {
        this.setException(error);
    },

    whenDone: function (done) {
        this._done = done;
        return this._checkIfDone();
    },

    rootBranchThen: function(fulfilled, rejected) {
        this._rootBranchPromise = this._rootBranchPromise.then(fulfilled, rejected);
        return this._rootBranchPromise;
    },

    _reset: function(nativePromise) {
        this._done = null;
        this._exception = null;
        this._promises = {};
        this._generation++;

        var nativePromiseToWrap = nativePromise || Q.resolve(null);
        this._rootBranchPromise = new PromiseWrapper(this, nativePromiseToWrap);
    },

    _checkIfDone: function() {
        this._logger.debug("_checkIfDone is called, count: " + this._promiseCount());
        if(this._promiseCount() !== 0 || this._inDoneState) {
            return;
        }

        if(!this._done)
            return;

        this._inDoneState = true;//to prevent checkIfDone infinite loop.
        var exception = this._exception;
        var done = this._done;

        try {
            this._reset();
        } finally {
            delete this._inDoneState;
        }

        if (exception == null) {
            this._logger.debug("done is called");
            return done();
        }

        if (done.fail) {
            this._logger.debug("done.fail is called");
            return done.fail(exception);
        } else {
            this._logger.debug("done(exception) is called");
            return done(exception);
        }
    },

    isCancelled: function(promise) {
        return (promise._promiseManager !== this || promise._generation < this._generation);
    },

    _getNextPromiseId: function() {
        return PromiseManager.prototype._nextPromiseId++;
    },

    setException: function(error) {
        this._exception = error;
        if(this._exception && this._exception.lftStack) {
            this._exception.stack = this._exception.lftStack;
        }
    }
};


/**
 * Creates a new instance of the PromiseWrapper.
 * @param wrapped The real promise instance which is wrapped by this PromiseWrapper instance.
 * @param promiseManager The promise manager which will manage this PromiseWrapper.
 * if passed this PromiseWrapper Uses the passed instance to see if an exception has been thrown by related instances
 * of the PromiseWrapper, and publishes its own exceptions to them.
 * @constructor
 * @private
 */
function PromiseWrapper(promiseManager, wrapped){
    this._logger = new Logger("PromiseWrapper");
    this._wrapped = wrapped;
    this._promiseManager = promiseManager;

    this._id = this._promiseManager.registerPromise(this);
    this._generation = this._promiseManager._generation;
    this._logger.debug("created promise id: " + this._id);

    if(wrapped == null)
        return;

    //a native promise with unwrapped fulfilled and rejected function was passed.
    if(wrapped.inspect().state !== 'pending') {
        this._logger.debug("native promise has ended, so unregister immediately, id: " + this._id);
        //native promise has ended, so unregister immediately.
        this._promiseManager.unregisterPromise(this);
    } else {
        this._logger.debug("native promise is pending, unregister upon completion of the native promise, id: " + this._id);
        //unregister upon completion of the native promise.
        this._wrapped = wrapped.then(this._promiseManager.unregisterPromise.bind(this._promiseManager, this),
            this._promiseManager.unregisterPromise.bind(this._promiseManager, this));
    }
}

PromiseWrapper.prototype = {
    _wrapped: null,
    _logger: null,
    _promiseManager: null,
    _catchPromise: null,
    _id: null,
    _generation: null,

    _init: function(baseWrapped, fulfilled, rejected) {
        var wrappedFulfilled = this._wrapFulfilled.bind(this, fulfilled);
        var wrappedRejected = this._wrapRejectAndCatch.bind(this, rejected);

        this._wrapped = baseWrapped.then(wrappedFulfilled, wrappedRejected);
    },

    /*jshint eqnull:true*/
    /**
     * Chains fulfilled and rejected callbacks to this PromiseWrapper instance.
     * @param fulfilled The callback that is called upon successful ending of this PromiseWrapper.
     * @param rejected The callback that is called if the current PromiseWrapper fails.
     * @returns {*} a new instance of the PromiseWrapper with the given fulfilled and rejected callbacks chained to it.
     */
    then: function(fulfilled,rejected){
        var thenPromiseWrapper = new PromiseWrapper(this._promiseManager);
        thenPromiseWrapper._init(this._wrapped, fulfilled, rejected);
        return thenPromiseWrapper;
    },

    /**
     * This function can be used to catch exceptions of the current PromiseWrapper.
     * If an exception occurs, the passed cb is called with the exception as an argument.
     * @param cb The callback to call and pass the exception to, if an exception occurs in this promise.
     * @returns {PromiseWrapper}
     */
    catch: function(cb) {
        this._catchPromise = new PromiseWrapper(this._promiseManager, null);
        this._catchPromise._catchInit(this._wrapped, cb);
        return this._catchPromise;
    },

    _catchInit: function(baseWrapped, catchCallBack) {
        this._wrapped = baseWrapped.catch(this._wrapRejectAndCatch.bind(this, catchCallBack));
    },

    _handleCatchPromiseOnSuccess: function() {
        if(this._catchPromise) {
            this._catchPromise._handleCatchPromiseOnSuccess();
            this._promiseManager.unregisterPromise(this._catchPromise);
        }
    },

    _wrapRejectAndCatch: function(cb){
        this._logger.debug("start wrapAndResetException of id: " + this._id);
        var args = ArrayUtils.toArray(arguments);
        args.splice(0,1);
        if(this._promiseManager.isCancelled(this)) {
            this._logger.debug("Promise id: " + this._id + " is cancelled");
            this._handleCatchPromiseOnSuccess();
            this._promiseManager.unregisterPromise(this);
            return;
        }
        try {
            var res = null;
            if(!cb) {
                //empty reject or catch called re-throw the error
                throw this._promiseManager._exception;
            }
            try {
                res = cb.apply(this, args);
                this._promiseManager.setException(null); //reset exception since it was handled by cb.

                this._handleCatchPromiseOnSuccess();
                return res;
            } catch(e) {
                this._storeErrorAndThrow(e);
            }

        } finally {
            this._promiseManager.unregisterPromise(this);
        }
    },

    _wrapFulfilled: function(fulfilled) {
        this._logger.debug("start fulfill of id: " + this._id);
        var args = ArrayUtils.toArray(arguments);
        args.splice(0,1);
        if(this._promiseManager._exception || this._promiseManager.isCancelled(this)) {
            //there is a failure at some other branch, or this promise was cancelled, so don't perform any code on this branch
            this._logger.debug("Promise id: " + this._id + " cancelled: " + this._promiseManager.isCancelled(this));
            this._handleCatchPromiseOnSuccess();
            this._promiseManager.unregisterPromise(this);
            return;
        }

        try {
            var res = fulfilled != null ? fulfilled.apply(this, args) : undefined;
            this._handleCatchPromiseOnSuccess();

            return res;
        } catch(e) {
            this._storeErrorAndThrow(e);
        } finally {
            this._promiseManager.unregisterPromise(this);
        }
    },

    _storeErrorAndThrow: function(error) {
        this._promiseManager.setException(error);
        throw this._promiseManager._exception;
    }
};


module.exports.PromiseWrapper = PromiseWrapper; //for unit tests
module.exports.whenDone = PromiseManager.whenDone;
module.exports.failTest = PromiseManager.failTest;
module.exports.PromiseManager = PromiseManager;
// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // 8q1BJsDHpcVhNDmAwh/Dc4oPWZg7Ge8YIj+ZqF4R6z+g
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCD5
// SIG // pNOZjgAl8n3V5INUO5MjyZNmBjVlU/kwpPY57Hvr8jAN
// SIG // BgkqhkiG9w0BAQEFAASCAQCWVOob/wmm9c/TUbz92L8x
// SIG // qWiMF+ftUpMgrEkf6D4dAj5lrRLy1tZNhn8I1A3GcH57
// SIG // +G3MvlEcvLjt+CJDU1rIrtp2D74k9K0Xp+hM0fHpNZDx
// SIG // 1RJWdi/8t4/VBF9ijTsFkPAlgW2lFrAwgUL2Cr4DWUWz
// SIG // B90/3d9lBsrDejRF9QTZ5FQ+s5bSbVW+MsWFLuCACGDM
// SIG // 2GukqhRRasFeD7Pc/gBewI40wsaSLr+k4yUSdr2DNuEv
// SIG // 8QL2Or7lqQRzYi0uQo7pgnnCo6f8AUgELO/AmjE2OQ4K
// SIG // CtDBwPEDK0O1epdiC/o/H6x/XEFvW+Md1atbEIACKsEd
// SIG // xzLiu7grDBzAoYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MTkzNFowIwYJKoZI
// SIG // hvcNAQkEMRYEFGKruJu58m6/ZckJgwvRAUUN2kAeMA0G
// SIG // CSqGSIb3DQEBAQUABIIBAJjba7G9gqsPRbKgBeaUM+9v
// SIG // wgKWuezZ3IuuiyRMsQ7mxAYiWYOFooAG57VjzJixP/8g
// SIG // NiXOJrjKehVzM6MDib099ASBGrppt9jYqvi0IUSZXFAv
// SIG // MO/Ev/NurUKShkxLl82nPsOvs6lQosHn9BHUM5xwRYIm
// SIG // F2sD8BK5m9PTqbymia7+UVhLh0Hh1qVI9edrfYsxwKhC
// SIG // +K6+/TBveTxx+iPxDI64WOFWJqqzTgprJiUg7gSo353X
// SIG // Hw7tStVY8zPhhPVt831dneXAWOAOAMXCL/Ui/KiQw5t1
// SIG // /CesaudRZfirMcrwrlt2YSRXiCjMT8Ucr0iT/EKxR9cU
// SIG // sn1ik7eH6UI=
// SIG // End signature block
