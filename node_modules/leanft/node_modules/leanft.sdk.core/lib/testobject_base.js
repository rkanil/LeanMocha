// (c) Copyright 2015 Hewlett Packard Enterprise Development LP

/*
 * Created on 13/10/2015.
 * This file contain the base test object methods and functionality such as event dispatching and JSON conversion.
 */

var Logger = require("./logger.js").Logger;
var ArrayUtils = require("./object_utils.js").ArrayUtils;
var ObjectUtils = require("./object_utils.js").ObjectUtils;
var Convert = require("./convert.js").Convert;
var ReplayErrorsBehavior = require("./replay_errors.js");
var RectangleUtils = require("./helper_utils.js").RectangleUtils;
var NotifyEventsBehavior = require("./notify_events_behavior.js");

/**
 * Represents the base test object methods and additional functionality, such as event dispatching and JSON conversion.<br/>
 * Remark: This method should not be called. Inherit this object and then call the _init method to initialize it.
 * @abstract
 * @class TestObjectBase
 *
 */
function TestObjectBase(){
}

TestObjectBase.prototype = {
    _logger: null,
    _description: null,
    _cookie: null,

    _parent: null,
    _nativeClass: null,
    _session: null,

    /**
     * Returns the description for this test object.
     * @returns {*} the description for this test object.
     */
    description: function(){
          return this._description;
    },

    /**
     * Returns the parent test object of this test object.
     * @returns {*} the parent test object of this test object.
     */
    parent: function(){
        return this._parent;
    },

    /**
     * Creates a child test object of this test object.
     * This operation does not cause LeanFT to search for the object in the AUT. LeanFT interacts with the application only when a step runs that performs an operation on the AUT object.
     * @param description The description of the test object.  Can be a full test object description or a string.  If a string is provided, it is interpreted as a CSS selector with a default test object type of WebElement.
     * @returns {*} the new child test object with the provided description.
     */
    $: function(description){
        var child = this._session.factory.create(description.leanFTType,description);
        child._parent = this;

        return child;
    },

    /**
     *
     * @returns {*}
     * @private
     */
    _toJSON: function(){
        if(this._cookie !== null) {
            return {
                ServerCookie: this._cookie
            };
        }

        return {
            Class: this._nativeClass,
            Description: this._description ? this._description._toJSON(): null,
            Parent: this._parent ? this._parent._toJSON() : null
        };
    },

    /**
     *
     * @param methodName
     * @returns {*}
     * @private
     */
    _executeCommand: function(methodName){
        //removes the first argument since it is the methodName
        var args = ArrayUtils.toArray(arguments);
        args.splice(0,1);

        //checks if there is an additional data callback.
        var additionalDataHandler = ObjectUtils.identity;
        if(typeof(args[args.length -1]) === "function"){
            additionalDataHandler = args.pop();
        }

        var msg = {
            Operation: methodName,
            Parameters: args,
            Object: this._toJSON()
        };

        return this._session._communication.send("ExecuteCommand",msg).then(function(data) {
            if(!data) //we expect to receive an object here
                return null;

            var result = this._getResultValue(data.Result);
            additionalDataHandler(data.AdditionalInfo);
            return result;
        }.bind(this), function(error){
            additionalDataHandler(error._additionalInfo);
            this._handleError(error);
        }.bind(this));
    },

    _executeEvents: function (methodArgs,  originalArgumentsObject, onError) {
        var args = ArrayUtils.toArray(methodArgs);
        args.splice(0, 1);

        var exec = function (id) {
            args.push(this._notifyAdditionalData.bind(this, id));
            var res = this._executeCommand.apply(this, args);
            return res;
        }.bind(this);
        var options = { sender: this, onError:onError, calleeArguments: originalArgumentsObject, type: "TestObject"};
        return this.notifyWithEvents(exec ,args ,options);
    },

    /**
     * Handles the execution of the SDK operations with report event handling.
     * The method should be used if the operation should always appear on the report. <br/>
     * For example: 'return this._executeWithEvents(arguments, "Navigate", url);'
     * @param {Arguments} originalArgumentsObject The calling method arguments object instance.
     * @param {String} methodName The native method name.
     * @private
     */
    _executeWithEvents : function(originalArgumentsObject, methodName) {
        return this._executeEvents(arguments, originalArgumentsObject, false);
    },

    /**
     * Handles the execution of the SDK operations with report event handling.
     * The method should be used if the operation should appear on the report only on error (like in getROProperty).
     * For example: 'return this._executeWithEvents(arguments, "Navigate", url);'
     * @param {Arguments} originalArgumentsObject The calling method arguments object instance.
     * @param {String} methodName The native method name.
     * @private
     */
    _executeWithEventsOnError : function(originalArgumentsObject, methodName) {
        return this._executeEvents(arguments, originalArgumentsObject, true);
    },

    /**
     * @private
     */
    _notifyAdditionalData : function (cmdId, additionalData) {
        this._session.fireEvent("onAdditionalDataReceivedCommand", {
            commandId: cmdId,
            sender: this,
            additionalData: additionalData
        });
    },


    /**
     *
     * @param commandType
     * @param methodName
     * @returns {*}
     * @private
     */
    _executeUtilityCommand: function(commandType, methodName){
        // Remove the first two arguments since they are the command type and methodName
        var args = ArrayUtils.toArray(arguments);
        args.splice(0,2);

        //checks if there is an additional data callback.
        var additionalDataHandler = ObjectUtils.identity;
        if(typeof(args[args.length -1]) === "function"){
            additionalDataHandler = args.pop();
        }

        var msg = {
            type: commandType,
            Operation: methodName,
            Parameters: args,
            Object: this._toJSON()
        };

        return this._session._communication.send("ExecuteUtilityObjectCommand",msg).then(function(data) {
            if(!data) //we expect to receive an object here
                return null;
            additionalDataHandler(data.AdditionalInfo);
            return this._getResultValue(data.Result);
        }.bind(this),function(error){
            additionalDataHandler(error._additionalInfo);
            this._handleError(error);
        }.bind(this));
    },

    /**
     *
     * @param propertyName
     * @returns {*}
     * @private
     */
    _getROProperty: function(propertyName, methodArguments) {
        if (!methodArguments){
            return this._executeCommand("GetROProperty", propertyName);
        }
        return this._executeWithEventsOnError(methodArguments, "GetROProperty", propertyName);
    },

    /**
     *
     * @returns {*}
     * @private
     */
    _getROProperties: function(methodArguments) {
        if (typeof(methodArguments) !== "object"){
            return this._executeCommand("GetROProperties", ArrayUtils.toArray(arguments));
        }
        return this._executeWithEventsOnError(methodArguments, "GetROProperties", ArrayUtils.toArray(arguments).splice(1));
    },

    /**
     *
     * @param nativeClass
     * @param session
     * @param description
     * @private
     */
    _init: function (nativeClass,session,description) {
        this._nativeClass = nativeClass;
        this._session = session;
        this._description = description;

        this._logger = new Logger(description? description.leanFTType.leanftType : "TestObjectBase");


        ObjectUtils.extend(this, TestObjectUtilsBehavior);
        ObjectUtils.extend(this, ReplayErrorsBehavior);
        ObjectUtils.extend(this, NotifyEventsBehavior);
    },

    /*jshint eqnull:true */
    /**
     * Checks whether this object exists in the AUT.
     * @param {Number} [timeout] The time (in seconds) to wait for this object before returning a result of true or false. <br/> By default, uses the object synchronization timeout defined in the runtime engine settings.
     * @returns {Promise<bool>} an indication of whether the object exists.
     */
    exists: function(timeout){
        if(timeout === null)
            throw new Error("timeout passed to exists() method must be a number");

        if(timeout != null) {
            timeout = Convert.toNumber(timeout);
            return this._executeCommand("Exist", timeout);
        }

        return this._executeCommand("Exist");
    },

    /**
     * Highlights this object in the AUT. <br/>
     * Remark: This may be useful when debugging a test.
     * @returns {Promise<void>} a promise that is fulfilled when the highlighting operation ends.
     */
    highlight: function(){
        return this._executeCommand("highlight");
    },

    /*jshint eqnull:true */
    /**
     * Returns all visible text from this object.
     * @param {Object} [rectangle] The rectangular area in the test object to return the text from.
     * @returns {Promise<string>} a promise that is fulfilled with all the visible text from this object.
     */
    getVisibleText: function(rectangle){
        var rect = RectangleUtils.getRectangleOrDefault(rectangle);
        return this._executeUtilityCommand("ExecuteTestObjectOcrCommand", "GetTestObjectVisibleText", rect._left, rect._top, rect._right, rect._bottom);
    },

    /*jshint eqnull:true */
    /**
     * Returns all rectangular areas containing the specified text within this object.
     * @param {String} text The text to search for in the test object.
     * @param {Object} [rectangle] The rectangular area in the test object to search for the text.
     * @returns {Promise<object>} a promise that is fulfilled with an array of rectangles containing all rectangular areas containing the specified text within this object.
     */
    getTextLocations: function(text, rectangle){
        if (text == null)
            throw new Error("text parameter must be supplied");

        var rect = RectangleUtils.getRectangleOrDefault(rectangle);
        return this._executeUtilityCommand("ExecuteTestObjectOcrCommand", "GetTestObjectTextLocations", text, rect._left, rect._top, rect._right, rect._bottom).then(function(rectanglesArray){
            if (rectanglesArray!==null) {
                return RectangleUtils.convertNumArrayToRectArray(rectanglesArray);
            }
            return null;
        });
    },

    /*jshint eqnull:true */
    /**
     * Checks whether a snapshot of this object contains the supplied image.
     * @param {String} imageToFind A Base64 string representation of the image to look for within the test object's snapshot.
     * @param {Number} [similarity] The minimum similarity between the two images (as a percentage), above which the find is considered a match. Default = 100.
     * @returns {Promise<object>} a promise that is fulfilled with an object representing the point where the image was located, or null if it was not found.
     */
    verifyImageExists: function(imageToFind, similarity){
        var func = function(id) {
            if (imageToFind == null)
                throw new Error("imageToFind parameter must be supplied");
            if (similarity == null)
                similarity = 100;

            similarity = Convert.toNumber(similarity);
            if (similarity < 0 || similarity > 100)
                throw new Error("Similarity value must be between 0 and 100");

           return this._executeUtilityCommand("ExecuteTestObjectImageCommand", "FindBitmapInTestObject", imageToFind, "", this._notifyAdditionalData.bind(this, id)).then(function(result){
                if (result!==null) {
                    if (result.actualSimilarity < similarity)
                        return null;
                    return result.point;
                }
                return null;
            });
        };
        var options = { sender: this, onError: false, calleeArguments: arguments, type: "BitmapCheckpoint"};
        return this.notifyWithEvents(func, arguments, options);
    },

    /*jshint eqnull:true */
    /**
     * Checks whether a snapshot of this object and the supplied image are a match.
     * @param {String} expectedImage A Base64 string representation of the image to compare to the test object snapshot.
     * @param {String} maskAreaImage A Base64 string representation of the image mask area to use in the image comparison.
     * @param {Number} [pixelTolerance] The percentage of pixels that can differ between the two images, and still be considered a match. Default = 0.
     * @param {Number} [rgbTolerance] The percentage by which the RGB values of the pixels in the two images can differ, and still be considered a match. Default = 0.
     * @returns {Promise<Boolean>} a Boolean representing the comparison result.
     */
    verifyImageMatch: function(expectedImage, maskAreaImage, pixelTolerance, rgbTolerance){
        var func = function(id) {
            if (expectedImage == null)
                throw new Error("expectedImage parameter must be supplied");
            if (maskAreaImage == null)
                throw new Error("maskAreaImage parameter must be supplied");
            if (pixelTolerance == null)
                pixelTolerance = 0;
            else if (pixelTolerance < 0 || pixelTolerance > 100)
                throw new Error("pixelTolerance value must be between 0 and 100");
            if (rgbTolerance == null)
                rgbTolerance = 0;
            else if (rgbTolerance < 0 || rgbTolerance > 100)
                throw new Error("rgbTolerance value must be between 0 and 100");

            return this._executeUtilityCommand("ExecuteTestObjectImageCommand", "CompareTestObjectWithBitmap", expectedImage, maskAreaImage, pixelTolerance, rgbTolerance, this._notifyAdditionalData.bind(this, id)).then(function(result){
                if (result !== null) {
                    return result.imagesMatch;
                }
                return false;
            });
        };
        var options = { sender: this, onError: false, calleeArguments: arguments, type: "BitmapCheckpoint"};
        return this.notifyWithEvents(func, arguments, options);
    },

    /*jshint eqnull:true */
    /**
     * Returns all child objects of this object that match the supplied test object description.
     * @param description A description object that defines the test object type and the set of properties and values that should be common to all objects that are returned.
     * @param {bool} [dontFilterByType = false] Set this parameter to true to avoid limiting the returned objects to a specific test object type.
     * @returns {Promise<TestObject[]>} an array of test objects that match the supplied description.
     */
    $$: function(description, dontFilterByType) { //find children
        return this._findChildrenHandler("ChildObjects", description, dontFilterByType);
    },
    /**
     * Highlights all children that match the supplied test object description.
     * @param description A description object that defines the test object type and the set of properties and values that should be common to all objects that are highlighted.
     * @param {bool} [dontFilterByType = false] Set this parameter to true to avoid limiting the highlighted objects to a specific test object type.
     * @returns {Promise<Number>} the number of matches that are found and highlighted.
     */
    highlightMatches: function(description, dontFilterByType){
        return this._findChildrenHandler("HighlightAllMatchingChildren", description, dontFilterByType);
    },

    /**
     * Captures and returns a Base64 representation of this test object.
     * @param {Object} [options] An options object that defines the image capture preferences.
     * @param {string} [options.format = "png"] The format of the image.  Possible values: png, bmp.
     * @returns {Promise<string>} a promise that is fulfilled with the Base64 string of the test object's image.
     */
    snapshot: function(options){
        options = options || {};
        var format = options.format || "png";
        if(format !== "png" && format !== "bmp")
            throw new Error("Unsupported image format " + format);
        return this._executeCommand("CaptureSnapshotToBase64String",format);
    },

    /**
     * Handles the request from the $$ and highlightMatches methods.
     * @param commandName The name of the method to execute.
     * @param description description The description of the children to look for.
     * The description explicitly defines which type of test objects to look for.
     * @param {bool} [dontFilterByType = false] Set this parameter to true to look for test objects of all types matching the given description.
     * @returns {Promise<Number|bool>} the number of matches found and highlighted, or true if all types match the given description.
     * @private
     */
    _findChildrenHandler: function(commandName, description, dontFilterByType){
        if(description == null)
            return this._executeCommand(commandName, null);

        var childFilter = description._toJSON();
        childFilter.Type = "Description";

        if(!dontFilterByType) { //add the type to the filter
            var testObject = this._session.factory.create(description.leanFTType, null);
            var nativeTypeFieldName = testObject._nativeTypeFieldName || "micclass";

            childFilter.Properties[nativeTypeFieldName] = testObject._nativeClass;
        }
        return this._executeCommand(commandName, childFilter);
    },

    /**
     *
     * @param onFirstAction
     * @param onRestAction
     * @param items
     * @param itemTransform
     * @param firstArg
     * @returns {*}
     * @private
     */
    _executeOnItemsCollection: function(originalArguments, onFirstAction, onRestAction, items, itemTransform, firstArg) {
        var func = function (id) {
            itemTransform = itemTransform || ObjectUtils.identity;

            if(items === null || items.length === 0)
                return;

            var lastPromise;
            //execute first action on first item
            if (typeof firstArg === 'undefined')
                lastPromise = this._executeCommand(onFirstAction, itemTransform(items[0]), this._notifyAdditionalData.bind(this, id));
            else
                lastPromise = this._executeCommand(onFirstAction, firstArg, itemTransform(items[0]), this._notifyAdditionalData.bind(this, id));

            var restItems = items.splice(1,items.length - 1);
            //execute rest action on rest items - chain promises
            restItems.forEach(function(item) {
                if (typeof firstArg === 'undefined')
                    lastPromise = this._executeCommand(onRestAction, itemTransform(item), this._notifyAdditionalData.bind(this, id));
                else
                    lastPromise = this._executeCommand(onRestAction, firstArg, itemTransform(item), this._notifyAdditionalData.bind(this, id));
            },this);

            return lastPromise;
        };
        var options = { sender: this, onError:false, calleeArguments: originalArguments , type: "TestObject"};
        return this.notifyWithEvents(func, arguments, options);
    },

    /**
     *
     * @param command
     * @param items
     * @param itemTransform
     * @returns {*}
     * @private
     */
    _executeSingleOpOnCollection: function(originalArguments, command, items, itemTransform) {
        return this._executeOnItemsCollection(originalArguments, command, command, items, itemTransform);
    },

    /**
     * Handles the errors that are returned from the runtime engine.
     * The method should be used in the rejection of the promise.
     * @param {Error} error The exception object if the error is returned from the runtime engine; a field of statusCode should be included.
     * @returns {*}
     * @private
     */
    _handleError: function(error){
        if(!error._handled) {
            error.message = this._convertNativeErrorToLeanFt(error.statusCode, error.message);
        }

        this.handleReplayError(error);
    },

    /**
     *
     * @param errorCode
     * @param errorMessage
     * @returns {*}
     * @private
     */
    _convertNativeErrorToLeanFt: function(errorCode, errorMessage) {
        var to = this;
        var convertedMessage = errorMessage;

        while(to != null) {
            var nativeType = "[ " + to._nativeClass + " ]";
            var description = to._description;
            if(description) {
                var leanFtType = description.leanFTType.technology + "." + description.leanFTType.leanftType;
                convertedMessage = convertedMessage.replace(nativeType, leanFtType);
            }
            to = to._parent;
        }

        if (errorCode === -111) {
            //Replay object not found - remove the (of class *) pattern
            convertedMessage = convertedMessage.replace(/\s\(of class \w+\)/, "");
        }
        return convertedMessage;
    }


};

/**
 * @ignore
 */
var TestObjectUtilsBehavior = {
    /*jshint eqnull:true */
    /**
     *
     * @param result
     * @returns {*}
     * @private
     */
    _getResultValue: function(result) {
        if(result == null)
            return result;

        if(Array.isArray(result)) {
            return result.map(function (elem) {
                return this._getResultValue(elem);
            }, this);
        }

        if(!result.Type)
            return result;

        return this._specialValueHandler[result.Type].call(this, result);
    },

    _specialValueHandler: {
        TestObject: function(result) {
            if(result.ServerCookie == null)
                throw new Error("server cookie can't be null");

            var testObj = this._session.factory.createByNativeClass(result.Class,
                result.SubTypeInfo != null ? result.SubTypeInfo.SimClass : null);

            testObj._cookie = result.ServerCookie;

            return testObj;
        },

        DynamicProxy: function(result) {
            var NativeObject = require("./native_object.js");
            if(result.ServerCookie == null)
                throw new Error("server cookie can't be null");

            return new NativeObject(result.ServerCookie, this._session)._fillKeysFromMembers();
        },

        BitmapFindLocationResult: function(result) {
            return {
                actualSimilarity: result.Similarity,
                point: {
                    x: result.X,
                    y: result.Y
                }};
        },

        BitmapComparisonResult: function(result) {
            return {
                imagesMatch: result.ImagesMatch,
                base64EncodedDiffImage: result.EncodedDiffImage
            };
        }
    }
};




module.exports.TestObjectBase = TestObjectBase;
module.exports.TestObjectUtilsBehavior = TestObjectUtilsBehavior;
// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // ueMqgqmqLZulK2S5D9v/P/Ud/eWyCitnBSB/0Nr1hOag
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCCG
// SIG // l6eFvdkz2DxptBXmDNpqTKXukStmkbM6/xWj+6DGGzAN
// SIG // BgkqhkiG9w0BAQEFAASCAQCu6jpop+1CXPwiIWZwMFaw
// SIG // LOQzL+L0Ewt9DoLkadj8DQyRidqSnYMNhT588gephe92
// SIG // qwbKGKz87WlXgiDhqwnKqPcLsXxXWzNtZLKfUAdw043O
// SIG // QBoZB8siUekLFXFmcxEF/EWktE+NBk1+u7Lk6vJ9MhXj
// SIG // ltXdAOkFD6lviRHI3Gaj/NoEMdNJklMVZFIvZJ0HAAQl
// SIG // sqJ4664RqylxMp+espKL3BY+h6Qy9ixqq2jfkIeHZVOe
// SIG // vBxv9veyZBVE3QAJwmBMfgPTDQWftI6osxZKU3g5j5Qc
// SIG // /K0IjpqhUy4ipBnhEmme0PaLQY8fOjmosAfftVC4lKl/
// SIG // zOTLDxB585NpoYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MjQxOFowIwYJKoZI
// SIG // hvcNAQkEMRYEFHnx9dNjYiRbGMAoTH9WPIL7CuA4MA0G
// SIG // CSqGSIb3DQEBAQUABIIBAITL/Cm0nHJf6x9IN3koKMFk
// SIG // /CV2r3uyg/gH3Q7WYy7NYJsPuOzXH2enhnekiwQbyX7I
// SIG // 7fJwU54Zi0nAAxNlOWP6OKgJgNt7q2zbS40dTuspTFpo
// SIG // HJFzF6Mg74giH9yBj9+bcdmRbqnNtwpI0N7rPG4quKVD
// SIG // Wp0R6C0TJFtrzrfglGSj80YRPIylH3TGgqfn+gfCw2qo
// SIG // 1A0D9xV5lMlNuinUDqE7hg3sG0hzUSkH6pmMZTpr6dKb
// SIG // E20S8VRLnKtw/xk7meUH/oTu588P+l46JL130Jrt+fYE
// SIG // 5PXnkbSdRQhVPUXu48bH47yd2XOYUjS9N/S4N/mudXpP
// SIG // JQn0NdWkCy4=
// SIG // End signature block
