var Core = require("leanft.sdk.core");
var ObjectUtils = Core.ObjectUtils;
var ArrayUtils = Core.ArrayUtils;
var Web = require("leanft.sdk.web").Behaviors;
var WebTableCell = Web.TableCellBehavior;
var HelperFuncs = Web.HelperFuncs;
var HelperBehaviors = require("./helper_behaviors.js");
var SAPUI5BaseDesc = require("./sapui5_base.js").SAPUI5BaseDesc;
var SAPUI5BaseTestObject = require("./sapui5_base.js").SAPUI5BaseTestObject;

/**
 * Common methods for the Table description
 * @ignore
 * @memberof SAPUI5
 */
var TableDescriptionBehavior = {
    /**
     * An array of column headers.
     * @param {string[]} [colNamesArr] When provided, this method acts as a setter and sets the columnHeaders value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored columnHeaders value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    columnHeaders: function(colNamesArr){
        return this._propertyHandler("columns", colNamesArr, HelperFuncs.stringJoin(";"), HelperFuncs.stringSplit(";"));
    },
    /**
     * The number of rows in the table including the header.
     * @param {number} [rowsCount] When provided, this method acts as a setter and sets the rowsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored rowsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    rowsCount: function(rowsCount){
        return this._propertyHandler("row count", rowsCount);
    },
    /**
     * The number of columns in the table.
     * @param {number} [columnsCount] When provided, this method acts as a setter and sets the columnsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored columnsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    columnsCount: function(columnsCount){
        return this._propertyHandler("column count", columnsCount);
    }
};

/**
 * The description of an SAPUI5 Table test object.
 * @param {Object} [props] Initializes a Table test object using the supplied property bag.
 * @returns {Table} the description object that was initialized.
 * @constructor
 * @memberof SAPUI5
 * @extends SAPUI5.SAPUI5BaseDesc
 * @mixes Web.TableDescriptionBehavior
 * @mixes SAPUI5.TableDescriptionBehavior
 */
function Table(props) {
    var tableDes = new SAPUI5BaseDesc("Table");
    ObjectUtils.extend(tableDes, Web.TableDescriptionBehavior);
    ObjectUtils.extend(tableDes, TableDescriptionBehavior);
    tableDes._defineByPropertyBag(props);
    return tableDes;
}

/**
 * A single cell in the {@link TableTO} SAPUI5 object.
 * @param {number} rowIndex  The 0-based index of the cell's row.
 * @param {number} cellIndex  The 0-based index of the cell's column.
 * @param {TableTO} ownerTable The table that the current cell belongs to.
 * @constructor
 * @memberof SAPUI5
 */
function TableCell(rowIndex,cellIndex,ownerTable){
    var cell = new WebTableCell(rowIndex,cellIndex,ownerTable);
    ObjectUtils.extend(cell, TableCellBehavior);
    return cell;
}

/**
 * @ignore
 * @memberof SAPUI5
 */
var TableCellBehavior = {
    /**
     * Sets the contents of the table cell to the specified text value.
     * @param {String} text The text value to set.
     * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
     */
    setText: function(text){
        return this._ownerTable._executeWithEvents(arguments, "SetCellData",this._rowIndex,this._cellIndex,text);
    },

    /**
     * Selects the specified item in the table cell according to its text.
     * @param {String} text The text of the item to select.
     * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
     */
    selectItem: function(text){
        return this._ownerTable._executeWithEvents(arguments, "SelectItemInCell",this._rowIndex,this._cellIndex,text);
    }
};

/**
 * An SAPUI5 Table.
 * @constructor
 * @memberof SAPUI5
 * @class TableTO
 * @extends SAPUI5.SAPUI5BaseTestObject
 * @mixes Web.TableTestObjectBehavior
 * @mixes SAPUI5.FirstPageAndLastPageTOBehavior
 * @mixes SAPUI5.NextPageAndPreviousPageTOBehavior
 * @mixes SAPUI5.DesktopTableBehavior
 * @mixes SAPUI5.MobileTableBehavior
 * @mixes SAPUI5.TableTestObjectBehavior
 */
function TableTO(session, description) {
    var tableTO = new SAPUI5BaseTestObject("SAPUITable", session, description);
    ObjectUtils.extend(tableTO, Web.TableTestObjectBehavior);
    ObjectUtils.extend(tableTO, HelperBehaviors.FirstPageAndLastPageTOBehavior);
    ObjectUtils.extend(tableTO, HelperBehaviors.NextPageAndPreviousPageTOBehavior);
    ObjectUtils.extend(tableTO, DesktopTableBehavior);
    ObjectUtils.extend(tableTO, MobileTableBehavior);
    ObjectUtils.extend(tableTO, TableTestObjectBehavior);
    return tableTO;
}
function _rowIndexAdjust(item){
    return item+1;
}
function _columnIndexAdjust(col){
    if(typeof col === 'number')
        return "#"+(col+1);

    return col;
}

/**
 * @ignore
 * @memberof SAPUI5
 */
var TableTestObjectBehavior = {
    /**
     * Returns either a specific cell or a promise of all cells in the table.
     * @param {number} [row] The row index (0-based) of the specific cell.
     * @param {number} [col] The column index (0-based) in the row specified by the row parameter.
     * @returns {Promise<TableCell[][]> | TableCell} either a promise for all the cells in the table (when called without arguments) or the specified cell.
     */
    cells: function(row,col){
        if(arguments.length < 2){
            return this._getROProperties("row count","column count","first row index").then(function(tableInfo) {
                return this._initTable.apply(this, tableInfo);
            }.bind(this));
        }
        return new TableCell(row,col,this);
    },

    /**
     * Initializes a complete table of cells (array of arrays).
     * @param {number} rows The number of rows in the requested table.
     * @param {number} cols The number of cells in each row.
     * @param {number} base The index of first visible row.
     * @returns {Array} an array of rows.
     * @private
     */
    _initTable: function(rows,cols,base){
        var table = [];
        for(var rowIndex = 0; rowIndex < rows; rowIndex++){
            table[rowIndex] = this._initRowInTable(rowIndex+base-1,cols);
        }
        return table;
    },

    /**
     * Initializes a row of cells.
     * @param rowNumber The row number to initialize.
     * @param cols The number of cells
     * @returns {Array} an array of cells.
     * @private
     */
    _initRowInTable: function(rowNumber,cols){
        var resRow = [];
        for (var cellIndex = 0; cellIndex < cols; cellIndex++) {
            resRow[cellIndex] = new TableCell(rowNumber, cellIndex, this);
        }
        return resRow;
    },
    /**
     * A array of column headers.
     * @returns {Promise<string[]>} a promise that is fulfilled with the collection of column headers.
     */
    columnHeaders: function(){
        return this._getROProperty("columns", arguments).then(Web.HelperFuncs.stringSplit(";"));
    },

    /**
     * The number of rows in the table including the header.
     * @returns {Promise<Number>} a promise that is fulfilled with the number of rows in the table.
     */
    rowsCount: function(){
        return this._getROProperty("row count", arguments);
    },
    /**
     * A array of selected row indices.
     * @returns {Promise<Number[]>} a promise that is fulfilled with a array of selected row indices of the table.
     */
    selectedRows: function(){
        return this._getROProperty("selected rows indices", arguments).then(function(str){
            return str === '' ? [] : str.split(';').map(function(index){return index-1;});
        });
    },
    /**
     * Selects the specified cell in the table (by column and row).
     * @param {Number} row The row number (0-based) of the cell to select.
     * @param {Number} col The column number (0-based) of the cell to select.
     * @returns {Promise<void>} a promise that is fulfilled after the cell is selected.
     */
    selectCell: function(row,col){
        return this._executeWithEvents(arguments, "SelectCell",row+1,col+1);
    },

    /**
     * Selects the specified rows in the table (by index).
     * @param {...Number} indices The indices (0-based) of the rows to select.
     * @returns {Promise<void>} a promise that is fulfilled after the specified rows are selected.
     */
    selectRow: function(){
        return this._executeOnItemsCollection(arguments, "SelectRow", "ExtendSelectRow", ArrayUtils.toArray(arguments), _rowIndexAdjust);
    },

    /**
     * Deselects the specified rows in the table (by index).
     * @param {...Number} indices The indices (0-based) of the rows to deselect.
     * @returns {Promise<void>} a promise that is fulfilled after the specified rows are deselected.
     */
    deselectRow: function(){
        return this._executeOnItemsCollection(arguments, "ExtendDeselectRow", "ExtendDeselectRow", ArrayUtils.toArray(arguments), _rowIndexAdjust);
    },

    /**
     * Selects all rows in the table.
     * @returns {Promise<void>} a promise that is fulfilled after all the rows are selected.
     */
    selectAllRows: function(){
        return this._executeWithEvents(arguments, "SelectAll");
    },

    /**
     * Deselects all rows in the table.
     * @returns {Promise<void>} a promise that is fulfilled after all the rows are deselected.
     */
    deselectAllRows: function(){
        return this._executeWithEvents(arguments, "DeselectAll");
    },

    /**
     * Deletes the specified rows in the table.
     * @param {...Number} indices The indices (0-based) of the rows to delete.
     * @returns {Promise<void>} a promise that is fulfilled after the specified rows are deleted.
     */
    deleteRow: function(){
        return this._executeOnItemsCollection(arguments, "DeleteRow", "DeleteRow", ArrayUtils.toArray(arguments), _rowIndexAdjust);
    },

    /**
     * Clicks the More button in the expandable table.
     * @returns {Promise<void>} a promise that is fulfilled after the table is expanded.
     */
    more: function(){
        return this._executeWithEvents(arguments, "More");
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var DesktopTableBehavior = {

    /**
     * The current page number in this table.
     * This is additional functionality for tables on desktop devices.
     * @returns {Promise<Number>} a promise that is fulfilled with the current page number of the table.
     */
    currentPage: function(){
        return this._executeWithEvents(arguments, "CurrentPage");
    },
    /**
     * Moves the specified column to the specified column position.
     * This is additional functionality for tables on desktop devices.
     * @param {Number|String} fromCol The index (0-based) or the name of the source column.
     * @param {Number|String} toCol The index (0-based) or the name of the destination column.
     * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
     */
    moveColumn: function(fromCol,toCol){
        return this._executeWithEvents(arguments, "MoveColumn",_columnIndexAdjust(fromCol),_columnIndexAdjust(toCol));
    },

    /**
     * Resizes the specified column (according to its index or name) to the specified width.
     * This is additional functionality for tables on desktop devices.
     * @param {Number|String} column The index (0-based) or name of the column to resize.
     * @param {Number} width The new column width.
     * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
     */
    resizeColumn: function(column,width){
        return this._executeWithEvents(arguments, "ResizeColumn",_columnIndexAdjust(column),width);
    },

    /**
     * Scrolls the table to the specified page.
     * This is additional functionality for tables on desktop devices.
     * @param {Number} pageNum The page number to scroll to.
     * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
     */
    navigateToPage: function(pageNum){
        return this._executeWithEvents(arguments, "SetPage",pageNum);
    },

    /**
     * Clicks the column header (according to its index or name) to open the associated menu.
     * This is additional functionality for tables on desktop devices.
     * @param {Number|String} column The column index (0-based) or name to click.
     * @returns {Promise<void>} a promise that is fulfilled after the menu of the column header is open.
     */
    openMenu: function(column){
        return this._executeWithEvents(arguments, "OpenMenu",_columnIndexAdjust(column));
    },

    /**
     * Clicks the header of the specified column according to its index or name.
     * This is additional functionality for tables on desktop devices.
     * @param {Number|String} column The column index (0-based) or name to click.
     * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
     */
    clickColumnHeader: function(column){
        return this._executeWithEvents(arguments, "HeaderClick",_columnIndexAdjust(column));
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var MobileTableBehavior = {
    /**
     * Navigates to the specified row.
     * This is additional functionality for tables on desktop devices.
     * @param {Number} rowIndex The row index (0-based).
     * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
     */
    navigateToRow: function(rowIndex){
        return this._executeWithEvents(arguments, "Navigate",rowIndex+1);
    }
};

module.exports.Table = Table;
module.exports.TableTO = TableTO;



// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // 9tdpLiRw81P8/Ji6gQr4qmOf8patlkWQKaH+pK2FItqg
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCB7
// SIG // vTkzBPF1gvbZk7Sg1ObbDvQBvJ+fg8nn0BqsyetUwDAN
// SIG // BgkqhkiG9w0BAQEFAASCAQB3oWCfr9/cUJK+x8ggVQIy
// SIG // Rxu4z7ygzsVcn3S+n/oUfZwWWFKxEIUiRa2NauBBjAce
// SIG // BHL8/ul2/JGwJJimt+VBsL31BdlnX9RCseNm3e2UB4+p
// SIG // CFZuVlaU8wkyjicEULb1SV7Q/Cv89CCRxVKgnp4lh8bt
// SIG // YPSfH9klw0ktwfU5yZrMbUJJA84MFk228aV4nWYCcplU
// SIG // 8SyHFla1jMDAsbudDb7NvA8EJiSOk2gvRiu9yY7qFyTX
// SIG // gey3RmVLSyO83rROYQ2iqumUy0+Uy9TzpB9HN4g3HV8T
// SIG // g68cw9FLSqvyPzfhglmcNlYxlqZgng45cbeODlkuY3L4
// SIG // FEdr/bXH+PLcoYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MjEzN1owIwYJKoZI
// SIG // hvcNAQkEMRYEFNBsaR5FxnKYgLfOWpZfNNp2aYbHMA0G
// SIG // CSqGSIb3DQEBAQUABIIBAKHEC52aFOD6KWYG2YafhQsc
// SIG // ojgIqz26x4+/QBlt/wQheFf9FtbKw7gqn9QlA8UQSzUN
// SIG // m5SNHPdR9+mIjY6r4WIxVCuchZbLj4yF5SlVSHRB+3ym
// SIG // Cb7acmiH58cMmEaY9CstJlfc1aSjWU0h183Oazfv4/QN
// SIG // FMJZKuMeDYh833mTf+GkiSKChOlUSa0RuPd3mfSuNwgy
// SIG // LUupMzbuVy6klw48ea3oym7+f4WGED9CRAUpzWof/LVV
// SIG // bIAAVnWGDAgenEHPAB2T6j2IxYArwl/fhMwl4IX9Q91O
// SIG // YzWIuYS2bggCV/zuMkQBrge1AgEtNcHVlTplfnn8Ft//
// SIG // PpnECHZ+9Uw=
// SIG // End signature block
