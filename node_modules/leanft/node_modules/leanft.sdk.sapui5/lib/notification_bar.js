// (c) Copyright 2015 Hewlett Packard Enterprise Development LP
/**
 * Created on 02/23/2016.
 */

var Core = require("leanft.sdk.core");
var SAPUI5BaseDesc = require("./sapui5_base.js").SAPUI5BaseDesc;
var SAPUI5BaseTestObject = require("./sapui5_base.js").SAPUI5BaseTestObject;
var HelperBehaviors = require("./helper_behaviors.js");


/**
 * Used for conversions of NotificationBar state.
 * Supported NotificationBar state.
 * @memberof SAPUI5
 * @enum
 */
var BarState = {
    default: "default",
    max: "max",
    hidden: "hidden",
    invisible: "invisible"
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var BarStateLinker = {
    default: "Default",
    max: "Enlarged",
    hidden: "Hidden",
    invisible: "Invisible"
};


/**
 * @ignore
 * @memberof SAPUI5
 */
function barStateToNative(state){
    /*jshint eqnull:true */
    var nativeString = BarStateLinker[state.toLowerCase()];
    if(nativeString == null)
        throw new Error("You must supply a valid BarState type");

    return nativeString;
}


/**
 * @ignore
 * @memberof SAPUI5
 */
function nativeToBarState(nativeString){
    var value = nativeString.toLowerCase();
    var result = Object.keys(BarStateLinker).filter(function(key) {
        return BarStateLinker[key].toLowerCase() === value;
    });

    if (result.length === 1) {
        return result[0];
    }

    throw new Error("Enum BarState type name not found");
}

/**
 * Common methods for the NotificationBar description
 * @ignore
 * @memberof SAPUI5
 */
var NotificationBarDescriptionBehavior = {
    /**
     * The number of notifiers contained in the notification bar.
     * @param {Number} [count] The number of notifiers contained in the notification bar.
     * @returns {Number | Description} If no parameter is provided, the method acts as a getter and returns the current stored notifiersCount;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    notifiersCount: function(count){ // number
        return this._propertyHandler("notifiers count", count, Core.Convert.toNumber);
    },

    /**
     * Indicates whether the window of the notification bar is resizable.
     * @param {bool} resizable Indicates whether the notification bar is resizable.
     * @returns {bool | Description} If no parameter is provided, the method acts as a getter and returns the current stored isResizable value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isResizable: function(resizable){
        return this._propertyHandler("resizable", resizable, Core.Convert.toBool);
    },
    
    /**
     * Specifies the display state of the notification bar.
     * @param {BarState} state The display state of the notification bar.
     * @returns {BarState | Description} If no parameter is provided, the method acts as a getter and returns the current stored state;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    state: function(state){
        return this._propertyHandler("state", state, barStateToNative, nativeToBarState);
    }
};

/**
 * The description of an SAPUI5 NotificationBar test object.
 * @param {Object} [props] Initializes a NotificationBar test object using the supplied property bag.
 * @returns {NotificationBar} the description object that was initialized.
 * @constructor
 * @memberof SAPUI5
 * @extends SAPUI5.SAPUI5BaseDesc
 * @mixes SAPUI5.NotificationBarDescriptionBehavior
 */
function NotificationBar(props) {
    var notificationBarDes = new SAPUI5BaseDesc("NotificationBar");

    Core.ObjectUtils.extend(notificationBarDes, NotificationBarDescriptionBehavior);

    notificationBarDes._defineByPropertyBag(props);

    return notificationBarDes;
}

/**
 * An SAPUI5 NotificationBar.
 * @constructor
 * @memberof SAPUI5
 * @class NotificationBarTO
 * @extends SAPUI5.SAPUI5BaseTestObject
 * @mixes SAPUI5.NotificationBarTOBehavior
 */
function NotificationBarTO(session, description) {
    var notificationBarTO = new SAPUI5BaseTestObject("SAPUINotificationBar", session, description);

    Core.ObjectUtils.extend(notificationBarTO, NotificationBarTOBehavior);

    return notificationBarTO;
}

/*jshint eqnull:true */
/**
 * A single notification in the {@link NotificationBarTO} SAPUI5 object.
 * @param {number} notifierIndex The 0-based index of the notifier that contains the notification.
 * @param {number} notificationIndex The 0-based index of the notification.
 * @param {NotificationBarTO} ownerBar The notification bar that the current notification belongs to.
 * @constructor
 * @memberof SAPUI5
 */
function Notification(notifierIndex, notificationIndex, ownerBar){
    /*jshint eqnull:true */
    if(typeof(notifierIndex) !== "number")
        throw new Error("notifier index is not a number");

    if(typeof(notificationIndex) !== "number")
        throw new Error("notification index is not a number");

    if(ownerBar == null)
        throw new Error("Owner notification bar is null");

    this._notifierIndex = notifierIndex +1;
    this._notificationIndex = notificationIndex +1;
    this._ownerBar = ownerBar;
}

/**
 * @memberof Notification
 */
Notification.prototype = {
    _ownerBar: null,
    _notificationIndex: -1,
    _notifierIndex: -1,

    /**
     * The text of the notification message.
     * @returns {Promise<string>} a promise that is fulfilled with the text of the notification message.
     */
    text: function(){
        return this._ownerBar._executeWithEvents(arguments, "GetNotificationText",this._notifierIndex,this._notificationIndex);
    },

    /**
     * The time at which the notification message was received.
     * @returns {Promise<Date>} a promise that is fulfilled with the time the notification message was received.
     */
    receivedTime: function(){
        return this._ownerBar._executeWithEvents(arguments, "GetNotificationTimestamp",this._notifierIndex,this._notificationIndex).then(function(res) {
            return new Date(res);
        });
    },

    /**
     * Selects the notification message.
     * @returns {Promise<void>} a promise that is fulfilled when the operation is done.
     */
    select: function() {
        return this._ownerBar._executeWithEvents(arguments, "SelectNotification",this._notifierIndex,this._notificationIndex);
    }
};

/**
 * Used for conversions of NotificationBar message level.
 * Supported message level.
 * @memberof SAPUI5
 * @enum
 */
var MessageLevel = {
    information: "Information",
    success: "Success",
    warning: "Warning",
    error: "Error"
};

/*jshint eqnull:true */
/**
 * A single message in the {@link NotificationBarTO} SAPUI5 object.
 * @param {number} messageIndex The 0-based index of the message.
 * @param {NotificationBarTO} ownerBar The notification bar that the current message belongs to.
 * @constructor
 * @memberof SAPUI5
 */
function Message(messageIndex,ownerBar){

    if(typeof(messageIndex) !== "number")
        throw new Error("message index is not a number");

    if(ownerBar == null)
        throw new Error("Owner notification bar is null");

    this._messageIndex = messageIndex +1;
    this._ownerBar = ownerBar;
}

/**
 * @memberof Message
 */
Message.prototype = {
    _ownerBar: null,
    _messageIndex: -1,

    /**
     * The text of the message.
     * @returns {Promise<string>} a promise that is fulfilled with the text of the message.
     */
    text: function(){
        return this._ownerBar._executeWithEvents(arguments, "GetMessageText",this._messageIndex);
    },

    /**
     * The time at which the message was received.
     * @returns {Promise<Date>} a promise that is fulfilled with the time at which the message was received.
     */
    receivedTime: function(){
        return this._ownerBar._executeWithEvents(arguments, "GetMessageTimestamp",this._messageIndex).then(function(res) {
            return new Date(res);
        });
    },

    /**
     * The severity level of the message.
     * @returns {Promise<MessageLevel>} a promise that is fulfilled with the severity level of the message.
     */
    level: function() {
        return this._ownerBar._executeWithEvents(arguments, "GetMessageLevel",this._messageIndex);
    },

    /**
     * Selects the message.
     * @returns {Promise<void>} a promise that is fulfilled when the operation is done.
     */
    select: function() {
        return this._ownerBar._executeWithEvents(arguments, "SelectMessage",this._messageIndex);
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var NotificationBarTOBehavior = {
    /**
     * Returns either a specific notification (when both notifierIndex and notificationIndex are provided)
     * or an array of notifications (when only notifierIndex is provided) or all notifications in the notification bar (when no arguments provided).
     * @param {number} [notifierIndex] The index of the notifier. Index values begin with 0.
     * @param {number} [notificationIndex] The index of the notification in the specified notifier. Index values begin with 0.
     * @returns {Notification | Promise<Notification[]> | Promise<Notification[][]>} either the specified notification, or a promise for an array of notifications in the specific notifier or all notifications in the notification bar (array of arrays).
     */
    notifications: function(notifierIndex, notificationIndex) {
        if(arguments.length < 2){
            return this._initNotificationBar(notifierIndex);
        }

        return new Notification(notifierIndex,notificationIndex,this);
    },

    /**
     * Initializes a complete notification bar of notifications (array of arrays when no argument provided) or an array of notifications (when notifierIndex provided).
     * @param {number} [notifierIndex] The 0-based index of the notifier to initialize.
     * @returns {Promise<Notification[][] | Notification[]>} the array of all notifications or an array of notifications if a specific notifierIndex is provided.
     * @private
     */
    _initNotificationBar: function(notifierIndex) {
        /*jshint -W083 */
        if (typeof(notifierIndex) === "number") {
            return this._executeWithEvents(arguments, "GetNotificationCountByIndex", notifierIndex + 1).then(function (count) {
                return this._initNotifier(notifierIndex, count);
            }.bind(this));
        }

        return this._getROProperty("notifiers count", arguments).then(function (notifiersCount) {
            var notificationBar = [];

            if(notifiersCount === 0)
                return notificationBar;

            var lastPromise = this._executeWithEvents(arguments, "GetNotificationCountByIndex", 1).then(function (count) {
                notificationBar[0] = this._initNotifier(0, count);
            }.bind(this));

            for (var notifierIndex = 1; notifierIndex < notifiersCount; notifierIndex++) {
                lastPromise = lastPromise.then(function (index) {
                    return this._executeWithEvents(arguments, "GetNotificationCountByIndex", index + 1).then(function (count) {
                        notificationBar[index] = this._initNotifier(index, count);
                    }.bind(this));
                }.bind(this, notifierIndex));
            }

            return lastPromise.then(function () {
                return notificationBar;
            });
        }.bind(this));
    },

    /**
     * Initializes a notifier of notifications.
     * @param {number} notifierIndex The 0-based index of the notifier to initialize.
     * @param {number} notificationsCount The total number of the notifications in the notifier.
     * @returns {Array} an array of cells.
     * @private
     */
    _initNotifier: function(notifierIndex, notificationsCount){
        var notifications = [];
        for (var notificationIndex = 0; notificationIndex < notificationsCount; notificationIndex++) {
            notifications[notificationIndex] = new Notification(notifierIndex, notificationIndex, this);
        }
        return notifications;
    },

    /**
     * Returns either a specific message or all messages in the message notifier.
     * @param {number} [messageIndex] The 0-based index of the message in the message notifier.
     * @returns {Promise<Message[]> | Message} either a promise for all the messages in the message notifier (when called without arguments),
     * or the specified message.
     */
    messages: function(messageIndex) {
        if (arguments.length > 0) {
            return new Message(messageIndex, this);
        }

        return this._getROProperty("has message notifier", arguments).then(function (has) {
            var messages = [];
            if (has !== true) {
                return messages;
            }

            return this._executeWithEvents(arguments, "GetMessageCount").then(function (messageCount) {
                for (var index = 0; index < messageCount; index++) {
                    messages[index] = new Message(index, this);
                }
                return messages;
            }.bind(this));
        }.bind(this));
    },

    /**
     * Indicates whether the object is resizable.
     * @returns {Promise<bool>} a promise that is fulfilled with an indication of whether the object is resizable.
     */
    isResizable: function(){
        return this._getROProperty("resizable", arguments);
    },

    /**
     * The display state of the notification bar.
     * @returns {Promise<BarState>} a promise that is fulfilled with the display state of the notification bar.
     */
    state: function() {
        return this._getROProperty("state", arguments).then(nativeToBarState);
    },

    /**
     * Enlarges the notification bar.
     * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
     */
    enlarge: function(){
        return this._executeWithEvents(arguments, "Enlarge");
    },

    /**
     * Minimizes the notification bar.
     * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
     */
    minimize: function(){
        return this._executeWithEvents(arguments, "Minimize");
    },

    /**
     * Shows the notification bar.
     * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
     */
    show: function(){
        return this._executeWithEvents(arguments, "Show");
    },

    /**
     * Hides the notification bar.
     * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
     */
    hide: function(){
        return this._executeWithEvents(arguments, "Hide");
    }
};

module.exports.NotificationBar = NotificationBar;
module.exports.NotificationBarTO = NotificationBarTO;
module.exports.BarState = BarState;
module.exports.MessageLevel = MessageLevel;

// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // d/PqC+rsCccqGO+tarUUKnKY4+H2a8TCZ4x8opcxSSeg
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCAK
// SIG // +r6g1wncodfWyb3o0kPrqwVwjSi1N6WOUSLAs0uD+zAN
// SIG // BgkqhkiG9w0BAQEFAASCAQBXjHn1wtblO4LU7CULz3hC
// SIG // YPzUCuW+QIM/WMM/d+NJF2a3j560mHgJVQxrZc+UdPsg
// SIG // 2DkeGyFENRBKcXTWbMgUwoFrX3v5QYrYkBLQQ4q49DsJ
// SIG // nTWabmiEWTHLi0Uw5CVfSiWssjlhWakwWMltPrgteKEy
// SIG // +2tO8LmpE8xBT3cICkKWXO7WmNE0ZTcAHyzhWfQm7ozI
// SIG // a1ZIsqvxrlO8shF9H18/hOYR8aRgFWMfbJWJCXIhtQDi
// SIG // H19ezgzLhPNwzxcyjd2ckb/dejrFNQZXjnhxV+yRvGQ4
// SIG // UrcT+5E0IUzpIOtEqnnzZffAfhvXrlX0HDaON9UAkq/k
// SIG // //Zn4gbfWCPMoYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MTg0NFowIwYJKoZI
// SIG // hvcNAQkEMRYEFLSwMzWamAYrQL7cASKpuXB00pb1MA0G
// SIG // CSqGSIb3DQEBAQUABIIBAJKmnpsI3bsMWi1rKt0bRbJ1
// SIG // o5/woV20uc+rBJ2IevkPcEThngeWqz6ZPuilEkzL8m2d
// SIG // YHRJcth/bW5hJlNWiVZJYGTgXOMS+IQaFoWAa7XJwCIs
// SIG // ulpljzH8IGGiepiWAvp+0y23OpBUeQGUujtOBBok4haz
// SIG // mqC/tLoZHrnF67jHTHBpnNj0VWdJtMhfTo14AcnkxH/r
// SIG // 3Knke5tU0WzShxPfK2r9GPjgZq2YbQMHyNs/1B6l3ezI
// SIG // FuEZGxCRbOeRK44Xyy2Af4VkhJanQGkZVvQ85QeZ8/nD
// SIG // /f9WuYdhmZBuTwlFWVT74LNGkQxARrUlgaxBLpVzUNhT
// SIG // X57y3sqf6C8=
// SIG // End signature block
