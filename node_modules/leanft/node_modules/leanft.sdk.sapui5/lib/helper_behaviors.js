// (c) Copyright 2015 Hewlett Packard Enterprise Development LP
/**
 * Created on 12/31/2015.
 */

var Core = require("leanft.sdk.core");
var Convert = require("leanft.sdk.core").Convert;
var WebBehaviors = require("leanft.sdk.web").Behaviors;
var WebHelperFuncs = WebBehaviors.HelperFuncs;
var BuildPathBehavior = WebBehaviors.BuildPathBehavior;

/////////////////// Checked Behaviors /////////////////////////

/**
 * @ignore
 * @memberof SAPUI5
 */
var CheckedDescriptionBehavior = {
    /*jshint eqnull:true */
    /**
     * Indicates whether the object is selected.
     * @param {bool} state Indicates whether the object is selected.
     * @returns {bool | Description} If no parameter is provided, the method acts as a getter and returns the current stored isChecked value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isChecked: function(state){
        return this._propertyHandler("state", state, function(checked){
            return Core.Convert.toBool(checked) ? "On" : "Off";
        }, function(checked){
            return checked === "On";
        });
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var CheckedTOBehavior = {
    /**
     * Indicates whether the check box is checked. Null if indeterminate.
     * @returns {Promise<bool>} a promise that is fulfilled with an indication of whether the check box is checked. Null if indeterminate.
     */
    isChecked: function(){
        return this._getROProperty("state", arguments).then(function(res){
            return res.toLowerCase() === "on";
        });
    }
};


/////////////////// Enabled Behaviors /////////////////////////
/**
 * @ignore
 * @memberof SAPUI5
 */
var EnabledDescriptionBehavior = {
    /*jshint eqnull:true */
    /**
     * Indicates whether the object is enabled.
     * @param {bool} enabled Indicates whether the object is enabled.
     * @returns {bool | Description} If no parameter is provided, the method acts as a getter and returns the current stored isEnabled value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isEnabled: function(enabled){
        return this._propertyHandler("disabled", enabled, function(enabled){
            return !Core.Convert.toBool(enabled);
        }, function(enabled){
            return !enabled;
        });
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var EnabledTOBehavior = {
    /**
     * Indicates whether this object is enabled.
     * @returns {Promise<bool>} a promise that is fulfilled with an indication of whether this object is enabled.
     */
    isEnabled: function(){
        return this._getROProperty("disabled", arguments).then(function(res){
            return !res;
        });
    }
};


/////////////////// ReadOnly Behaviors /////////////////////////

/**
 * @ignore
 * @memberof SAPUI5
 */
var ReadOnlyDescriptionBehavior = {
    /**
     * Indicates whether the test object is read-only.
     * @param readOnly Indicates whether the test object is read-only.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored indication of whether the test object is read-only;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isReadOnly: function(readOnly){
        return this._propertyHandler("readonly", readOnly, Core.Convert.toBool);
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var ReadOnlyTOBehavior = {
    /**
     * Indicates whether the object is read-only.
     * @returns {Promise<bool>} a promise that is fulfilled with an indication of weather the object is read-only.
     */
    isReadOnly: function(){
        return this._getROProperty("readonly", arguments);
    }
};

/////////////////// Text Behaviors /////////////////////////

/**
 * @ignore
 * @memberof SAPUI5
 */
var TextDescriptionBehavior = {
    /**
     * The text of this object.
     * @param {String} text The text of this object.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored text value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    text: function(text){
        return this._propertyHandler("text", text);
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var TextTOBehavior = {
    /**
     * The text of this object.
     * @returns {Promise<String>} a promise that is fulfilled with the object's text.
     */
    text: function(){
        return this._getROProperty("text", arguments);
    }
};

var Orientations = {
    horizontal: "horizontal",
    vertical: "vertical"
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var OrientationDescriptionBehavior = {
    /**
     * Specifies how the items are displayed.
     * @param {Orientation} orientation The orientation of the items that are displayed.
     * @returns {Orientation | Description} If no parameter is provided, the method acts as a getter and returns the current stored orientation;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    orientation: function(orientation){
        return this._propertyHandler("orientation", orientation);
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var OrientationTOBehavior = {
    /**
     * Specifies how the items are displayed.
     * @returns {Promise<Orientation>} a promise that is fulfilled with how the items are displayed.
     */
    orientation: function(){
        return this._getROProperty("orientation", arguments);
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var DateBehavior = {
    dateToFormatStr: function(date,format){
        function patch(x){
            return x <= 9 ? '0' + x : x;
        }
        if(!(date instanceof Date))
            throw new Error("You must supply a Date object");
        var y = date.getFullYear(),
            M = date.getMonth() + 1,
            d = date.getDate(),
            h = date.getHours(),
            m = date.getMinutes(),
            s = date.getSeconds();
        var dateStr = '' + y + patch(M) + patch(d),
            timeStr = patch(h) + ':' + patch(m) + ':' + patch(s);
        switch (format) {
            case 'yyyyMMdd':
                return dateStr;
            case 'hh:mm:ss':
                return timeStr;
            default:
                return dateStr + ',' + timeStr;
        }
    },

    formatStrToDate: function (dateTimeStr) {
        function setDateInDateObject(dateStr, dateObj){
            if (dateStr.length !== 8){
                return false;
            }
            var year = parseInt(dateStr.slice(0,4),10);
            var day  = parseInt(dateStr.slice(6,8),10);
            var month = parseInt(dateStr.slice(4,6),10) - 1;
            var rc1 = dateObj.setFullYear(year);
            var rc2 = dateObj.setMonth(month);
            var rc3 = dateObj.setDate(day);
            if (isNaN(rc1) || isNaN(rc2) || isNaN(rc3)){
                return false;
            }
            return true;
        }
        function setTimeInDateObject(timeStr, dateObj){
            var timeParams = timeStr.split(":");
            var rc1 = dateObj.setHours(timeParams[0]);
            var rc2 = dateObj.setMinutes(timeParams[1]);
            var rc3 = dateObj.setSeconds(timeParams[2]);
            if (isNaN(rc1) || isNaN(rc2) || isNaN(rc3)){
                return false;
            }
            return true;
        }

        var dateObj = new Date();
        var params = dateTimeStr.split(",");

        // dateTimeStr format is YYYYMMDD,HH:MM:SS or YYYYMMDD or HH:MM:SS
        //  so if after the split by ',' we get two members in the array, we assume we have to set both Date and Time
        if (params.length === 2) {
            //Set Time in dateObj
            if (!setTimeInDateObject(params[1], dateObj)) {
                //Date Time Format is invalid, Format should be YYYYMMDD,HH:MM:SS
                return null;
            }
            //Set Date in dateObj
            if (!setDateInDateObject(params[0], dateObj)) {
                //Date Time Format is invalid, Format should be YYYYMMDD,HH:MM:SS
                return null;
            }
            return dateObj;
        }
        else if (params.length === 1) {    //if after the split by ',' we get one members in the array,
            // we check if the string is Date or Time and update the DateTimeInput by it.
            if (params[0].split(':').length === 3) {
                //input contains only Time
                if (!setTimeInDateObject(params[0], dateObj)) {
                    //Time Format is invalid, Format should be HH:MM:SS
                    return null;
                }
            }
            else {
                //input contains only Date
                if (!setDateInDateObject(params[0], dateObj)) {
                    //Date Format is invalid, Format should be YYYYMMDD
                    return null;
                }
            }
            return dateObj;
        }
    }
};

/////////////////// ItemsCount Behavior /////////////////////////
/**
 * @ignore
 * @memberof SAPUI5
 */
var ItemsCountDescriptionBehavior = {
    /**
     * The number of items in the object.
     * @param {Number} count The number of items in the object.
     * @returns {Number | Description} If no parameter is provided, the method acts as a getter and returns the current stored itemsCount value;
     * Otherwise it returns 'this' for use with the builder pattern.
     */
    itemsCount: function(count){
        return this._propertyHandler("items count", count, null, null, Convert.toNumber);
    }
};

/////////////////// Items Behavior /////////////////////////////
/**
 * @ignore
 * @memberof SAPUI5
 */
var ItemsDescriptionBehavior = {
    /**
     * An array of all items in the object.
     * @param items {String[]} An array of all items in the object.
     * @returns {String[] | Description} if no parameter is provided, the method acts as a getter and returns the current stored items value;
     * Otherwise it returns 'this' for use with the builder pattern.
     */
    items: function(items) {
        return this._propertyHandler("all items", items,
            WebHelperFuncs.stringJoin(";"), WebHelperFuncs.stringSplit(";"));
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var ItemsTOBehavior = {
    /**
     * Returns an array of all items in the object.
     * @returns {Promise<String[]>} a promise that is fulfilled with the array of the items contained in the object.
     */
    items: function() {
        return this._getROProperty("all items", arguments).then(WebHelperFuncs.stringSplit(";"));
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var SelectItemTOBehavior = {
    /*jshint eqnull:true */
    /**
     * Selects the specified item in the object.
     * @param item {Number | String} Selects the specified item in the object. Can be the item name (string) or the item index (number). Index begins with 1.
     * @returns a promise that is fulfilled after selecting the specified item in the object.
     */
    select: function(item){
        if(item == null)
            throw new Error("You must pass one argument to select() method");

        if(typeof item !== "number" && typeof item !== "string")
            throw new Error("Only number or string is allowed to pass to select() method");

        return this._executeWithEvents(arguments, "Select", HelperFuncs.itemTransform(item)).then(function(res){
            if(res === false)
                throw new Error("Cannot identify the specified item in the object. Confirm that the specified item is a valid item in the object.");
        });
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var ExpandCollapseItemTOBehavior = {
    /*jshint eqnull:true */
    /**
     * Expands the specified item in the object.
     * @param {Number|String} item The item or numeric index of the item to expand. Index values begin with 0.<br/>
     * Note: if it is a path to an item, you can use the buildItemPath function to create the item path.
     * @returns {Promise<void>} fulfilled after the expand operation has occurred.
     */
    expand: function(item){
        if(item == null)
            throw new Error("You must pass one argument to expand() method");

        if(typeof item !== "number" && typeof item !== "string")
            throw new Error("Only number or string is allowed to pass to expand() method");

        return this._executeWithEvents(arguments, "Expand", HelperFuncs.itemTransform(item));
    },
    /*jshint eqnull:true */
    /**
     * Collapses the specified item in the object.
     * @param {Number|String} item The item or numeric index of the item to collapse. Index values begin with 1.<br/>
     * Note: if there is a path to the item, you can use the buildItemPath function to create the item path.
     * @returns {Promise<void>} a promise that is fulfilled after the collapse operation has occurred.
     */
    collapse: function(item){
        if(item == null)
            throw new Error("You must pass one argument to collapse() method");

        if(typeof item !== "number" && typeof item !== "string")
            throw new Error("Only number or string is allowed to pass to collapse() method");

        return this._executeWithEvents(arguments, "Collapse", HelperFuncs.itemTransform(item));
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var SelectPathTOBehavior = {
    /**
     * Selects the specified item in the object. 
     * @param itemPath The path to the item in the object to select. <br/>
     * Note: you can use the buildItemPath function to create the item path.
     * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
     */
    select: function(itemPath){
        if(itemPath == null)
            throw new Error("You must pass one argument to select() method");

        if(typeof itemPath !== "string")
            throw new Error("Only path string is allowed to pass to select() method");

        return this._executeWithEvents(arguments, "Select", itemPath).then(function(res) {
            if(res === false)
                throw new Error("Cannot identify the specified path in the object. Confirm that the specified item exists in the object.");
        });
    },

    /**
     * Builds the item path from the arguments passed.
     * Arguments can be either a string - the name of the item, or a number - the index of the item. Item index values begin with 0.<br/>
     * Example: if ("item1", 4) passed, it means the path to the 4th item under top-level item 'item1'.
     * @returns {string} a string representing the item path as described by the arguments.
     */
    buildItemPath: function() {
        var items = Core.ArrayUtils.toArray(arguments);
        return BuildPathBehavior._buildPath.apply(undefined, items.map(HelperFuncs.itemTransform));
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var PageInfoBehavior = {
    TOBehavior: {
        /**
         * The page number of the currently selected page.
         * @returns {Promise<Number>} fulfilled with the number of the currently selected page in the object.
         */
        currentPage: function () {
            return this._getROProperty("current page", arguments);
        },

        /**
         * The total number of pages in the object.
         * @returns {Promise<Number>} a promise that is fulfilled with the total number of pages in the object.
         */
        pagesCount: function () {
            return this._getROProperty("total pages", arguments);
        }
    },
    DescriptionBehavior:{
        /**
         * The number of pages in the object.
         * @param {Number} count The number of pages in the object.
         * @returns {Number | Description} If no parameter is provided, the method acts as a getter and returns the current stored total pages count;
         * otherwise it returns 'this' for use with the builder pattern.
         */
        pagesCount: function(count){
            return this._propertyHandler("total pages", count, null, null, Convert.toNumber);
        }
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var NextPageAndPreviousPageTOBehavior = {
    /**
     * Scrolls the object to the next page.
     * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
     */
    nextPage: function(){
        return this._executeWithEvents(arguments, "NextPage");
    },

    /**
     * Scrolls the object to the previous page.
     * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
     */
    previousPage: function(){
        return this._executeWithEvents(arguments, "PreviousPage");
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var FirstPageAndLastPageTOBehavior = {
    /**
     * Scrolls the object to the first page.
     * @returns {Promise<void> a promise that is fulfilled after the operation is done.
     */
    firstPage: function(){
        return this._executeWithEvents(arguments, "FirstPage");
    },

    /**
     * Scrolls the object to the last page.
     * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
     */
    lastPage: function(){
        return this._executeWithEvents(arguments, "LastPage");
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var NavigationTOBehavior = {
    /**
     * Scrolls the object to the next item.
     * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
     */
    next: function(){
        return this._executeWithEvents(arguments, "Next");
    },

    /**
     * Scrolls the object to the previous item.
     * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
     */
    previous: function(){
        return this._executeWithEvents(arguments, "Previous");
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var SelectedItemTOBehavior = {
    /**
     * The selected item in the object.
     * @returns {Promise<string>} a promise that is fulfilled with the selected item in the object.
     */
    selectedItem: function(){
        return this._getROProperty("selected item", arguments);
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var HelperFuncs = {
    itemTransform: function(item) {
        if(typeof item === 'number')
            return "#" + (item + 1);

        return item;
    }
};

// Descriptions
module.exports.CheckedDescriptionBehavior = CheckedDescriptionBehavior;
module.exports.EnabledDescriptionBehavior = EnabledDescriptionBehavior;
module.exports.ReadOnlyDescriptionBehavior = ReadOnlyDescriptionBehavior;
module.exports.TextDescriptionBehavior = TextDescriptionBehavior;
module.exports.OrientationDescriptionBehavior = OrientationDescriptionBehavior;
module.exports.ItemsCountDescriptionBehavior = ItemsCountDescriptionBehavior;
module.exports.ItemsDescriptionBehavior = ItemsDescriptionBehavior;
module.exports.PageInfoDescriptionBehavior = PageInfoBehavior.DescriptionBehavior;

// Test Objects
module.exports.EnabledTOBehavior = EnabledTOBehavior;
module.exports.ReadOnlyTOBehavior = ReadOnlyTOBehavior;
module.exports.CheckedTOBehavior = CheckedTOBehavior;
module.exports.TextTOBehavior = TextTOBehavior;
module.exports.OrientationTOBehavior = OrientationTOBehavior;
module.exports.Orientations = Orientations;
module.exports.DateBehavior = DateBehavior;
module.exports.ItemsTOBehavior = ItemsTOBehavior;
module.exports.SelectItemTOBehavior = SelectItemTOBehavior;
module.exports.NavigationTOBehavior = NavigationTOBehavior;
module.exports.FirstPageAndLastPageTOBehavior = FirstPageAndLastPageTOBehavior;
module.exports.NextPageAndPreviousPageTOBehavior = NextPageAndPreviousPageTOBehavior;
module.exports.SelectedItemTOBehavior = SelectedItemTOBehavior;
module.exports.ExpandCollapseItemTOBehavior = ExpandCollapseItemTOBehavior;
module.exports.SelectPathTOBehavior = SelectPathTOBehavior;
module.exports.PageInfoTOBehavior = PageInfoBehavior.TOBehavior;
module.exports.HelperFuncs = HelperFuncs;
// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // gEAhWLR/h8iD9PT83FZyq1szgIjbxtgcKDdYW6vQOt6g
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCDO
// SIG // VQnd4qygAXOuZUZQ9JX+RGedhS8SJfiSdyaHPnmVnzAN
// SIG // BgkqhkiG9w0BAQEFAASCAQAX3NfjoKDVZaBBnOfb5DiQ
// SIG // U/euruH0sNa3xttjkYOpBaEYNFLd7BeyPo3OG3kDDgMa
// SIG // /n2QY3OS0QhwA4+iqPQ1xRU9UO4pqAjA6zF55Uuz1X4A
// SIG // CMHqvjwauzjPTahBDVGzL3ATokGM7O3KvfzO6d6/bpUS
// SIG // bM4TwZ/oP4wlJoU28CjiCdl1Y5p6Sxl/afItPBa6VFfh
// SIG // 3OcU9E1btUwp0rJi47oe7ccaO58T0yq6P2RAWvrBH573
// SIG // HNykKN5bTO7GK9fjXlTi1Tt2RVm+LRIwAbLxFkIENjJF
// SIG // M4RSKz0YHq2DWn2bfoBFV1joR0sgkQnoO+YCgeGPksTI
// SIG // NTBb8SUQZRutoYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MjUzN1owIwYJKoZI
// SIG // hvcNAQkEMRYEFMELBPwR4hb0UDSx0ajYOoBJtejPMA0G
// SIG // CSqGSIb3DQEBAQUABIIBAEHSYCX7fhSYuPyS/xAPqhRD
// SIG // MqtUaUuh4NXYWf3dIcgKVMVCfY2sVaRjeyvkiFAdVnno
// SIG // FUfRV9gMzcttc3LXahmRhIywKKCPuHM5mvTgPBbsKTU5
// SIG // DQomfanYsq+lNgn7hckq6vEKuxnfwuNuvDaPbi50lQju
// SIG // 6S6GKEHrsOmrly24TK17c3JDmE5QxP+pUlt5yXrvwDWU
// SIG // U6QK9hUyKjVfkgh4nfhgGZxu8nkIjyOUovLPbOIRdIeC
// SIG // wQbqzYCHSdEozT5pajUDetJjL5CjTV3yTIkQ+9v+F5wX
// SIG // IFFWasPmFGvWUDgsI1oOav2SJtpLvqIOlRZJMD32UBBk
// SIG // PLQheXfFtsA=
// SIG // End signature block
