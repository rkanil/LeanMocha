// (c) Copyright 2015 Hewlett Packard Enterprise Development LP
/**
 * Created on 01/20/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var BarState = require("../lib/notification_bar.js").BarState;
var MessageLevel = require("../lib/notification_bar.js").MessageLevel;

describe("NotificationBarDescriptionBehavior",function(){
    var NotificationBarDesc = require("../lib/notification_bar.js").NotificationBar;
    var notificationBarDescUnderTest;

    beforeEach(function(){
        notificationBarDescUnderTest = NotificationBarDesc();
    });

    describe("state method",function() {
        it("should add 'state' with the correct value",function(){
            notificationBarDescUnderTest.state(BarState.max);
            assert.strictEqual(notificationBarDescUnderTest._properties["state"], "Enlarged");
        });
        it("should throw exception if params is not valid",function(){
            assert.throws(function() {
                notificationBarDescUnderTest.state("max1");
            });
        });
        it("should add 'state' with correct value when value is given using property bag",function(){
            notificationBarDescUnderTest = NotificationBarDesc({
                state: BarState.max
            });
            assert.strictEqual(notificationBarDescUnderTest._properties["state"], "Enlarged");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = notificationBarDescUnderTest.state(BarState.max);
            assert.strictEqual(result, notificationBarDescUnderTest);
        });
        it("should set 'state' from _properties when value is null",function(){
            notificationBarDescUnderTest._properties["state"] = "Enlarged";
            notificationBarDescUnderTest.state(null);
            assert(!("state" in notificationBarDescUnderTest._properties));
        });
        it("should return the value of 'state' from _properties when value is not given",function(){
            notificationBarDescUnderTest._properties["state"] = "Enlarged";
            var barState = notificationBarDescUnderTest.state();
            assert.strictEqual(barState, BarState.max);
        });
    });

    describe("notifiersCount method",function() {
        it("should add 'notifiers count' with correct value when value is given",function(){
            notificationBarDescUnderTest.notifiersCount(2);
            assert.strictEqual(notificationBarDescUnderTest._properties["notifiers count"], 2);
        });
        it("should add 'notifiers count' with correct value when value is given using property bag",function(){
            notificationBarDescUnderTest = NotificationBarDesc({
                notifiersCount: 2
            });
            assert.strictEqual(notificationBarDescUnderTest._properties["notifiers count"], 2);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = notificationBarDescUnderTest.notifiersCount(2);
            assert.strictEqual(result, notificationBarDescUnderTest);
        });
        it("should remove 'notifiers count' from _properties when value is null",function(){
            notificationBarDescUnderTest._properties["notifiers count"] = 2;
            notificationBarDescUnderTest.notifiersCount(null);
            assert(!("notifiers count" in notificationBarDescUnderTest._properties));
        });
        it("should return the value of 'notifiers count' from _properties when value is not given",function(){
            notificationBarDescUnderTest._properties["notifiers count"] = 2;
            var notifiersCount = notificationBarDescUnderTest.notifiersCount();
            assert.equal(notifiersCount, 2);
        });
    });

    describe("isResizable method",function() {
        it("should add 'resizable' with the correct value",function(){
            notificationBarDescUnderTest.isResizable(true);
            assert.strictEqual(notificationBarDescUnderTest._properties['resizable'], true);
        });
        it("should add 'resizable' with correct value when value is given using property bag",function(){
            notificationBarDescUnderTest = NotificationBarDesc({
                isResizable: true
            });
            assert.strictEqual(notificationBarDescUnderTest._properties['resizable'], true);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = notificationBarDescUnderTest.isResizable(true);
            assert.strictEqual(result, notificationBarDescUnderTest);
        });
        it("should remove 'resizable' from _properties when value is null",function(){
            notificationBarDescUnderTest._properties['resizable'] = true;
            notificationBarDescUnderTest.isResizable(null);
            assert(!('resizable' in notificationBarDescUnderTest._properties));
        });
        it("should return the value of 'resizable' from _properties when value is not given",function(){
            notificationBarDescUnderTest._properties['resizable'] = true;
            var hasMore = notificationBarDescUnderTest.isResizable();
            assert.equal(hasMore, true);
        });
    });
});

describe("NotificationBarTOBehavior",function(){
    var NotificationBarTO = require("../lib/notification_bar.js").NotificationBarTO;
    var notificationBarTOBehaviorUnderTest;

    beforeEach(function(){
        notificationBarTOBehaviorUnderTest = NotificationBarTO({});

        notificationBarTOBehaviorUnderTest._executeCommand = sinon.stub();
        notificationBarTOBehaviorUnderTest._getROProperty = sinon.stub();
		
		notificationBarTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        notificationBarTOBehaviorUnderTest._session._promiseManager = {rootBranchThen :sinon.stub() };
    });

    describe("notifications",function(){

        beforeEach(function(){
            var promise  = {then: function(cb) {return cb(6);}};
            notificationBarTOBehaviorUnderTest._getROProperty.returns(promise);

            var promiseExec  = {then: function(cb) {return cb(4);}};
            notificationBarTOBehaviorUnderTest._executeCommand.returns(promiseExec);
        });

        it("should return a proxy to a given notification in case notifier and notification index were provided and save them as one based",function(){
            var res = notificationBarTOBehaviorUnderTest.notifications(0,2);

            assert.strictEqual(res._notifierIndex,1);
            assert.strictEqual(res._notificationIndex,3);
        });

        describe("specific notification",function(){
            var notificationUnderTest;
            beforeEach(function(){
                notificationUnderTest = notificationBarTOBehaviorUnderTest.notifications(0,0);
            });

            describe("text",function(){
                it("should execute the command 'GetNotificationText' and provide the notification index",function(){
                    var promise  = {then: sinon.spy()};
                    notificationBarTOBehaviorUnderTest._executeCommand.returns(promise);

                    notificationUnderTest.text();

                    assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
                    assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 3),["GetNotificationText",1,1]);
                });
            });

            describe("receivedTime",function(){
                it("should execute the command 'GetNotificationTimestamp' and provide the notification index and returns correct date",function(){
                    var promiseMock = {
                        then: function(cb) {
                            return cb("Sat, 25 Apr 2015 03:39:52 GMT");
                        }
                    };
                    notificationBarTOBehaviorUnderTest._executeCommand.returns(promiseMock);

                    var res = notificationUnderTest.receivedTime();

                    assert.strictEqual(25, res.getDate());

                    assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
                    assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 3),["GetNotificationTimestamp",1,1]);
                });
            });

            describe("select",function(){
                it("should execute the command 'SelectNotification' and provide the notification index",function(){
                    var promise  = {then: sinon.spy()};
                    notificationBarTOBehaviorUnderTest._executeCommand.returns(promise);

                    notificationUnderTest.select();

                    assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
                    assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 3),["SelectNotification",1,1]);
                });
            });
        });

        describe("a notifier of notifications", function() {
            beforeEach(function(){
                execiteCommandPromise = {
                    then: function(fullfill){
                        return fullfill.apply(this,this._callWithArgs);
                    },
                    _callWithArgs: [6]
                };
                getROPropertyPromise = {
                    then: function(fullfill){
                        return fullfill.apply(this,this._callWithArgs);
                    },
                    _callWithArgs: []
                };

                notificationBarTOBehaviorUnderTest._executeCommand.returns(execiteCommandPromise);
                notificationBarTOBehaviorUnderTest._getROProperty.returns(getROPropertyPromise);
            });

            it("should execute GetNotificationCountByIndex",function(){
                var notifications = notificationBarTOBehaviorUnderTest.notifications(0);
                assert.strictEqual(6, notifications.length)

                assert(notificationBarTOBehaviorUnderTest._getROProperty.notCalled);

                assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
                assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2),["GetNotificationCountByIndex",1]);

            });

            it("should throw exception if passed notifier index not less than 'notifiers count",function(){
                assert.throws(function(){
                    notificationBarTOBehaviorUnderTest.notifications(NotifiersCount);
                });

            });
        });

        //it("should query 'notifiers count' and execute multiple 'GetNotificationCountByIndex' according to notifiers count",function(){
        //    getROPropertyPromise = {
        //        then: function(fullfill){
        //            fullfill(6);
        //            return {
        //                then: sinon.stub()
        //            };
        //        }
        //    };
        //    execiteCommandPromise = {
        //        then: function(fullfill){
        //            return fullfill.apply(this,this._callWithArgs);
        //        },
        //        _callWithArgs: [4]
        //    };
        //
        //    notificationBarTOBehaviorUnderTest._executeCommand.returns(execiteCommandPromise);
        //    notificationBarTOBehaviorUnderTest._getROProperty.returns(getROPropertyPromise);
        //
        //    notificationBarTOBehaviorUnderTest.notifications().then(function(res){
        //        assert(notificationBarTOBehaviorUnderTest._getROProperty.calledOnce);
        //        assert.deepEqual(notificationBarTOBehaviorUnderTest._getROProperty.firstCall.args,["notifiers count", arguments]);
        //
        //        assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.callCount, 6);
        //        assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2),["GetNotificationCountByIndex",1]);
        //        assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.secondCall.args.slice(0, 2),["GetNotificationCountByIndex",2]);
        //    })
        //});
    });

    describe("messages", function() {

        it("should return a proxy to a given message if message index provided", function() {
            var message = notificationBarTOBehaviorUnderTest.messages(0);

            assert.strictEqual(message._messageIndex, 1);
        });

        describe("specific message", function(){
            var messageUnderTest;

            beforeEach(function() {
                messageUnderTest = notificationBarTOBehaviorUnderTest.messages(0);
            });

            it("text should execute 'GetMessageText'", function() {
                messageUnderTest.text();

                assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
                assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2),["GetMessageText", 1]);
            });

            it("receivedTime should execute 'GetMessageTimestamp'", function() {
                var promiseMock = {
                    then: function(cb) {
                        return cb("Sat, 25 Apr 2015 03:39:52 GMT");
                    }
                };
                notificationBarTOBehaviorUnderTest._executeCommand.returns(promiseMock);

                var date = messageUnderTest.receivedTime();

                assert.strictEqual(25, date.getDate());
                assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
                assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2),["GetMessageTimestamp", 1]);
            });

            it("level should execute 'GetMessageLevel'", function() {
                notificationBarTOBehaviorUnderTest._executeCommand.returns("Information");

                var level = messageUnderTest.level();

                assert.strictEqual(MessageLevel.information, level);

                assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
                assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2),["GetMessageLevel", 1]);
            });

            it("select method should execute 'SelectMessage'", function() {
                messageUnderTest.select();

                assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
                assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2),["SelectMessage", 1]);
            });
        });

        it("should return an array of all messages if no parameter provided", function() {
            execiteCommandPromise = {
                then: function(fullfill){
                    return fullfill.apply(this,this._callWithArgs);
                },
                _callWithArgs: [6]
            };
            getROPropertyPromise = {
                then: function(fullfill){
                    return fullfill.apply(this,this._callWithArgs);
                },
                _callWithArgs: [true]
            };

            notificationBarTOBehaviorUnderTest._executeCommand.returns(execiteCommandPromise);
            notificationBarTOBehaviorUnderTest._getROProperty.returns(getROPropertyPromise);

            var messages = notificationBarTOBehaviorUnderTest.messages();

            assert(notificationBarTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(notificationBarTOBehaviorUnderTest._getROProperty.firstCall.args,["has message notifier", arguments]);

            assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1),["GetMessageCount"]);

            assert.strictEqual(messages.length, 6);
        });

        it("should return empty array if 'has message notifier' is false", function() {
            getROPropertyPromise = {
                then: function(cb){
                    return cb.apply(this, [false]);
                }
            };

            notificationBarTOBehaviorUnderTest._getROProperty.returns(getROPropertyPromise);

            var messages = notificationBarTOBehaviorUnderTest.messages();

            assert(notificationBarTOBehaviorUnderTest._executeCommand.notCalled);
            assert.strictEqual(messages.length, 0);
        })
    });

    describe("state",function(){
        var promiseMock = {then: function(cb) {return cb("Enlarged");}};
        it("should query the property 'state'",function(){
            notificationBarTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = notificationBarTOBehaviorUnderTest.state();
            assert(notificationBarTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(notificationBarTOBehaviorUnderTest._getROProperty.firstCall.args,["state", arguments]);
        });
        it("should return the correct value according to that was returned from _getROProperty",function(){
            notificationBarTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = notificationBarTOBehaviorUnderTest.state();
            assert.strictEqual(res,BarState.max);
        });
    });

    describe("isResizable",function(){
        it("should query the property 'resizable'",function(){
            notificationBarTOBehaviorUnderTest.isResizable();
            assert(notificationBarTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(notificationBarTOBehaviorUnderTest._getROProperty.firstCall.args,["resizable", arguments]);
        });
        it("should return the correct promise according to that was returned from _getROProperty",function(){
            var promiseMock = {};
            notificationBarTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = notificationBarTOBehaviorUnderTest.isResizable();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("enlarge",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            notificationBarTOBehaviorUnderTest.enlarge();
            assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["Enlarge"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            notificationBarTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = notificationBarTOBehaviorUnderTest.enlarge();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("minimize",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            notificationBarTOBehaviorUnderTest.minimize();
            assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["Minimize"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            notificationBarTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = notificationBarTOBehaviorUnderTest.minimize();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("show",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            notificationBarTOBehaviorUnderTest.show();
            assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["Show"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            notificationBarTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = notificationBarTOBehaviorUnderTest.show();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("hide",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            notificationBarTOBehaviorUnderTest.hide();
            assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["Hide"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            notificationBarTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = notificationBarTOBehaviorUnderTest.hide();
            assert.strictEqual(res,getROPromise);
        });
    });
});
// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // sLFUQmiulPTbjE0iVOx7/xdJalOju2+YkWw+oFe8t7eg
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCCs
// SIG // FVvQWXJGIcTPvK6/7ajojib+FW/FLfNw6tXCn8aP8DAN
// SIG // BgkqhkiG9w0BAQEFAASCAQBZ3P+k7hK4iDCDvtU4jpRp
// SIG // SOirs98aZqcMWto5Xe8CjmEuON9QVDSK6phITf8p5tDh
// SIG // /aJ/Pe63LBhNCzxeqmu1mO7uO7JHMriM9HBQaTlgmQbI
// SIG // yoX1WwwD3XEWZVVZnYPUeQjJsk51R8FAgFvvYgdamrmu
// SIG // fsPfVmJ3kBedvjHiIYhIBGF3lppe2bTHnjMOvpoz1lVr
// SIG // zIRFuyGhyh3iOw7eOEQlIybabsOVz/nuncSf/RjF5XwG
// SIG // TogJNg5AkkAKudWujYVvRNYZiEGTCzeeiE3dogpcc3Sn
// SIG // Ic38erB4gCoj8MAI3o8H5l6Jstu0eLk3AdU+GZhqv6Xw
// SIG // 70rM6Af4hghpoYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MjUxNVowIwYJKoZI
// SIG // hvcNAQkEMRYEFIbYStyGA55Kh+xLzWwuvBQyPVCMMA0G
// SIG // CSqGSIb3DQEBAQUABIIBAFOHKmqIkSvAO8fPLd6OLx4c
// SIG // 0peKQEw6v42XlfSvfGlwSnxfpLXKiv+yQHsHgaTW4+ab
// SIG // uxVyUcOeiAj9vK5CUlQx6DtdTICETfgBWf/tnpXcIzy4
// SIG // 5qEnTc2o2AAssDJg4hTlxO3I9ESP4C3WJ+MGb9xGubuX
// SIG // qmBilmDMSZhKFOEEVFrXzd2eL3RgVdMdicy7OfT1I3UO
// SIG // twmHUowllTmdqqX+Kcps1+2CwQz1usSy+srpC0lV2aOv
// SIG // OTaB0sk+vmcgQK2T6JPL+PA/HRV8UxKh5Iir2s+RZLyc
// SIG // CDSpSbeQJFpeAt3Vx9+KbAu1sOIZrKqY8tftAT0aDrXS
// SIG // x3UJLqn+nEU=
// SIG // End signature block
