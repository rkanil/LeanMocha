// (c) Copyright 2015 Hewlett Packard Enterprise Development LP

var path = require('path');
var util = require('util');
var Const = require("./const.js").Const;
var ReportUtils = require("./report_utils.js").ReportUtils;
var Enums = require("./enums.js");
var RunUnitNodeType =Enums.RunUnitNodeType;
var LFT = require("leanft.sdk.core");
var StringUtils = LFT.StringUtils;
var ObjectUtils = LFT.ObjectUtils;

DateFormat = {
    formatDuration : function(duration) {
        var durationSeconds = (duration / 1000);
        if (duration % 1000 > 0)
            durationSeconds++;
        return ("" + durationSeconds);
    },

    formatTime : function (date) {
        return date.toString("YYYY-MM-DD HH:mm:ss:sss");
    }
};


function JsonReport(){
}

JsonReport.prototype = {
    _reportModel : null,
    _runtimeSettings : null,

    _getGeneralInfoNode: function () {
        var info  = {};
        var node = {};
        info[Const.CustomFields] = this._getGeneralUserInfo() || {};
        info[Const.Name] = this._reportModel._generalInfo.name || "";
        info[Const.RunStartTime] = this._reportModel._rootNode._time;
        info[Const.Timezone] = this._reportModel._environmentInfo[Const.Timezone] || "";
        info[Const.OrchestrationToolName] = "JS";
        info[Const.OrchestrationToolVersion] = this._reportModel._environmentInfo.orc_tool_version || "";
        info[Const.ReportTitle] = "LeanFT Report";
        node[Const.GeneralInfo] = info;

        return node;
    },

    _getGeneralUserInfo :function() {
        var userVales = Object.keys(this._reportModel._generalInfo).filter(function(value){
            return value.startsWith("user_");
        });

        return userVales.map(function(userValue){
            return {name : userValue.substring("user_".length, userValue.length) , value: this._reportModel._generalInfo[userValue]};
        }, this);
    },

    _buildReport: function (node) {
        var element = {};
        var dataNode = {};

        var ruNodeType = node._nodeType;

        element.type = ruNodeType;

        var handler = this._specialValueHandler[node._nodeType] || this._specialValueHandler.Default;
        handler.call(this, node, dataNode);

        element[Const.Data] = dataNode;
        if (!node._childRunUnits || node._childRunUnits.length === 0){
            element.type =  ruNodeType;
            element[Const.Data] = (dataNode);
            return element;
        }

        var elements = node._childRunUnits.map(this._buildReport.bind(this));

        if (elements.length > 1){
            element[Const.ReportNode] = elements;

            for (var i =0; i < elements.length; i++){
                elements[i] = elements[i][Const.ReportNode] ? elements[i][Const.ReportNode] : elements[i];
            }
        }
        else{
            element[Const.ReportNode] =  elements[0][Const.ReportNode] ? elements[0][Const.ReportNode] : elements[0];
        }
        var tempNode = {};
        tempNode[Const.ReportNode] = element;
        return tempNode;
    },

    _getImageDetails: function (baseRuNode, anyNode) {
        if (!baseRuNode._imageDetails)
            return;

        anyNode[Const.StepCustomImagePath] = baseRuNode._imageDetails.path;
    },

    _addCommonChildsToDataNode : function( baseRuNode, dataNode) {
        var name = baseRuNode._name;
        var duration = DateFormat.formatDuration(baseRuNode._duration);
        var description = baseRuNode._description;

        dataNode[Const.Name] = name;
        dataNode[Const.Description]  = description || "" ;
        dataNode[Const.StartTime] =  DateFormat.formatTime(baseRuNode._time);
        dataNode[Const.Result] =  baseRuNode._status || Enums.Status.Passed;

        if (baseRuNode._exception)
            dataNode[Const.ErrorText] =  this._getErrorString(baseRuNode);

        //build "Extension" node
        var extensionNode = {};
        var anyNode = {};

        dataNode[Const.Duration] = duration;
        anyNode[Const.IconKey] = baseRuNode._nodeType;
        anyNode[Const.IsHtmlErrorText] =  "true";

        this._getImageDetails(baseRuNode, anyNode);

        extensionNode[Const.Any] = anyNode;
        dataNode[Const.Extension] = extensionNode;
    },

    generate: function (reportModel, runtimeSettings) {
        this._reportModel = reportModel;
        this._runtimeSettings = runtimeSettings;

        var result = {};
        result[Const.Root]  = this._getGeneralInfoNode();
        var elementList = this._buildReport(this._reportModel._rootNode);
        result[Const.Root][Const.ReportNode] =  elementList[Const.ReportNode];
        return result;
    },

    _getErrorString: function(baseRuNode) {
        var operationFailureMessage = util.format("<b>Operation '%s' failed:</b><BR/>", baseRuNode._name);
        var message = baseRuNode._exception.message || "";

        if (baseRuNode._exception.name === "AssertionError"){
            return operationFailureMessage + message;
        }
        return operationFailureMessage + message + "<pre>" + ( baseRuNode._exception.stack || baseRuNode._exception) + "</pre>";
    },

    _getEnvironmentNode:function() {
        var data  = {};
        var osType =  this._reportModel._environmentInfo[Const.OsType] || "";
        var osInfo = this._reportModel._environmentInfo[Const.OsVersion] || "";
        if (!StringUtils.isNullOrWhiteSpace(osInfo)){
            osInfo += " (" + osType + ")";
        }
        data[Const.OSInfo] = osInfo;
        data[Const.HostName] = this._reportModel._environmentInfo.machine_name || "" ;
        data[Const.NumberOfCores] = this._reportModel._environmentInfo.number_of_cpu || "" ;
        data[Const.CpuInfo] = this._reportModel._environmentInfo.cpu_info || "" ;
        data[Const.TotalMemory] = this._reportModel._environmentInfo.total_memory || "" ;
        data[Const.Locale] = this._reportModel._environmentInfo.locale || "" ;
        data[Const.Timezone] = this._reportModel._environmentInfo.time_zone || "" ;
        data[Const.User] = this._reportModel._environmentInfo.user || "" ;

        return data;
    },

    _getTestedApplicationNode:function()  {
        var data  = {};
        data[Const.RuntimeEngineInfo] = this._reportModel._testedApplication[Const.RuntimeEngineInfo]|| "" ;
        data[Const.Name] = this._reportModel._testedApplication[Const.Name]|| "" ;
        data[Const.Path] = this._reportModel._testedApplication[Const.Path]|| "" ;
        data[Const.Version] = this._reportModel._testedApplication[Const.Version]|| "" ;
        return data;
    },

    _specialValueHandler: {
        Run: function (baseNode, dataNode) {

            // call to default behavior
            this._specialValueHandler.Default.call(this, baseNode, dataNode);
            dataNode[Const.Name] = this._runtimeSettings.title || Const.DefaultTitle;

            // avoid showing "undefined" in Description field
            dataNode[Const.Description] = this._runtimeSettings.description || "\u0020";
            dataNode[Const.Environment] = this._getEnvironmentNode();
            dataNode[Const.TestedApplication] = this._getTestedApplicationNode();

            //LeanFT
            dataNode[Const.ToolName] = "LeanFT " + this._reportModel._environmentInfo.product_version || "";
	    
            return dataNode;
        },

        Step: function (baseNode, dataNode) {
            this._specialValueHandler.Default.call(this, baseNode, dataNode);
            var properties = {Property: []};


            var testObject = {};
          
	        // create path
            testObject.Path = {Object: baseNode._objectPath};
            testObject.Operation = baseNode._operation;
            testObject.OperationData = {"#cdata-section": baseNode._description};
            testObject.Operation = baseNode._operation;

            if (baseNode._properties) {
                baseNode._properties.forEach(function (property) {
                    properties.Property.push(
                        {
                            Name: {"#cdata-section": property.name},
                            Value: {"#cdata-section": property.value},
                        });
                });
                testObject.Properties = properties;
            }

            baseNode._objectPath = baseNode._objectPath || [];

            var descTestObject = baseNode._objectPath.map(function (item) {
                var object = {Object: {IconKey: item.Type.split(".")[1]}};
                // add the 'type' and 'name' properties
                ObjectUtils.extend(object.Object, item);
                return object.Object;
            });

            var anyNode = dataNode.Extension.Any;
            anyNode.TestObject = testObject;

            if (descTestObject.length > 0) {
                anyNode.Descriptive = {TestObject: {Path: {Object: descTestObject}}};
            }

            anyNode.HideContextInfo = "true";
            anyNode.IsHtmlErrorText = "true";
            anyNode.IconKey = baseNode._objectType ? baseNode._objectType : "" ;
            anyNode.CustomUIElements =  {DescriptionLabel:"Data"};
            anyNode.CustomUIElements.FlowTreeNodeCaption = baseNode._reportAdditionalData[Const.Title] ? {"#cdata-section": baseNode._reportAdditionalData[Const.Title]} : "";
            anyNode.CustomUIElements.FlowTreeNodeTooltip = baseNode._reportAdditionalData[Const.TitleToolTip] ? {"#cdata-section": baseNode._reportAdditionalData[Const.TitleToolTip]}: "";

            dataNode.Name = {"#cdata-section" : dataNode.Name};
            dataNode.Description = {"#cdata-section" : dataNode.Description};

            if (baseNode.imageDetails && baseNode.imageDetails.imageType === "Snapshots"){
                dataNode.Snapshot = { reference:baseNode.imageDetails.path };

                if (baseNode._reportAdditionalData.highlightArea){
                    dataNode.Snapshot.highlight =  + baseNode._reportAdditionalData.highlightArea.x + "," + baseNode._reportAdditionalData.highlightArea.y + "," + baseNode._reportAdditionalData.highlightArea.width + "," +baseNode._reportAdditionalData.highlightArea.height;
                }
            }

            return dataNode;
        },

        Context : function (baseNode, dataNode) {
            this._specialValueHandler.Step.call(this, baseNode, dataNode);
        },

        Mix : function (baseNode, dataNode) {
            this._specialValueHandler.Step.call(this, baseNode, dataNode);

            if (baseNode._reportAdditionalData.firstImage) {
                var checkPoint = {"Checkpoint" : {"Type" : "Bitmap CheckPoint"}};
                checkPoint.Checkpoint.bmpChkPointFileExpected =  baseNode._reportAdditionalData.firstImage;

                if (baseNode._reportAdditionalData.secondImage) {
                    checkPoint.Checkpoint.bmpChkPointFileActual =  baseNode._reportAdditionalData.secondImage;
                }

                if (baseNode._reportAdditionalData.deltaImage) {
                    checkPoint.Checkpoint.bmpChkPointFileDifferent =  baseNode._reportAdditionalData.deltaImage;
                }

                dataNode.Extension.Any.Checkpoint = checkPoint.Checkpoint;

            }
        },

        Verify : function (baseNode, dataNode) {
            this._specialValueHandler.Default.call(this, baseNode, dataNode);
            var anyNode = dataNode.Extension.Any;
            anyNode.IsHtmlErrorText = "true";
            anyNode.IconKey = baseNode._status === Enums.Status.Passed ? "VerifySuccess" : "VerifyFailure" ;
            anyNode.CustomUIElements =  {DescriptionLabel:"Data"};
            anyNode.CustomUIElements.ErrorListItemStatusIndicatorIconKey = baseNode._status === Enums.Status.Passed ? "VerifySuccess" : "VerifyFailure";
            anyNode.CustomUIElements.HideFlowTreeNodeStatusIndicator = "true";

            dataNode.Name = {"#cdata-section" : dataNode.Name};
            dataNode.Description = {"#cdata-section" : dataNode.Description};
            delete(dataNode.Duration);
        },

        Expect: function (baseNode, dataNode) {
            this._specialValueHandler.Verify.call(this, baseNode, dataNode);
        },

        Default: function(baseNode, dataNode){
            this._addCommonChildsToDataNode(baseNode,dataNode);
        }

    }
};

module.exports.JsonReport = JsonReport;
// SIG // Begin signature block
// SIG // MIIdqgYJKoZIhvcNAQcCoIIdmzCCHZcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // l+CeXfsii9sRI1SIT+7qQZsX08pmXFP1YKJH3d3MZbOg
// SIG // ghi2MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggUeMIIE
// SIG // BqADAgECAhBBOdHLco8U0T0ppjKaGuk8MA0GCSqGSIb3
// SIG // DQEBCwUAMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMB4XDTE2MDMyMjAwMDAwMFoXDTE3MDMyMzIzNTk1
// SIG // OVowgaQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxp
// SIG // Zm9ybmlhMRIwEAYDVQQHDAlQYWxvIEFsdG8xKzApBgNV
// SIG // BAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENv
// SIG // bXBhbnkxEjAQBgNVBAsMCUNvZGUgU2lnbjErMCkGA1UE
// SIG // AwwiSGV3bGV0dCBQYWNrYXJkIEVudGVycHJpc2UgQ29t
// SIG // cGFueTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMGgAXZcNuvF8MzEBQ9daA+60G+7667OIG2+jYQP
// SIG // NjCrcfmj+1/tNB/NRPBUAuITQCmENam4I7imHQH7Lg2O
// SIG // ilNADlkdTg2sQyvYh/vIKiLeKK1vgFOwXuqcG7Ls6xsL
// SIG // dJFhsMsq/7cSXJdWNN58wij65A0qXM3/uwcEVuayJ0XH
// SIG // KsOJoFVQD1VNBS2Y64bcAVUXvgWnmVbH/mP63s7pdjKo
// SIG // NeVOnJy8axVByDRm75M83uOQqhLhGhBxmJnWdTm1sl7L
// SIG // Drc3gZq8dPTADSUwGtkXY67vgZO4BkLxHzelYu2OMUoQ
// SIG // 8JlFDd0usxwKseyg0ZWihFUumC0kCzuv0fq1qhUCAwEA
// SIG // AaOCAW4wggFqMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQD
// SIG // AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMGYGA1UdIARf
// SIG // MF0wWwYLYIZIAYb4RQEHFwMwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGRoXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNv
// SIG // bS9zdi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDAR
// SIG // BglghkgBhvhCAQEEBAMCBBAwFgYKKwYBBAGCNwIBGwQI
// SIG // MAYBAQABAf8wDQYJKoZIhvcNAQELBQADggEBAIVbsb1l
// SIG // QffQZ4Ry6IkXNI1/mSIscM5U4vosrSwOou3nypo2QHpl
// SIG // C0BoUcSlavhAQ8cA5kwlxN4H+zb7bnB2lrvxCIjDT2/+
// SIG // uwWDLb1Z3GBV/Dneyr6uSKE9aUjKE7S5v7WabLcCPj1v
// SIG // 1/p6wNkPR+3czu839mJbuVOR8okTWwjZjZgs9ommE+53
// SIG // fE1cxdqzz+hD+Dukbos3+PdYaaVA2/lHoFWVlj1B9oig
// SIG // Bsv1ZbagBuEVtF1fb8uY8tDWnd4QDKE7vcq52tm9L7Xz
// SIG // B3SIyc+UTUi5BECXpqXsAHhQ9So5frKvWsELbOst/lOD
// SIG // zzMTGlOlyW6R3mc9zILt2m5Vdg4wggVZMIIEQaADAgEC
// SIG // AhA9eNf5dklgsmF99PAeyoYqMA0GCSqGSIb3DQEBCwUA
// SIG // MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
// SIG // Z24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
// SIG // IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA2IFZlcmlT
// SIG // aWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9u
// SIG // bHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVi
// SIG // bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
// SIG // dHkgLSBHNTAeFw0xMzEyMTAwMDAwMDBaFw0yMzEyMDky
// SIG // MzU5NTlaMH8xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRT
// SIG // eW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3lt
// SIG // YW50ZWMgVHJ1c3QgTmV0d29yazEwMC4GA1UEAxMnU3lt
// SIG // YW50ZWMgQ2xhc3MgMyBTSEEyNTYgQ29kZSBTaWduaW5n
// SIG // IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAl4MeABavLLHSCMTXaJNRYB5x9uJHtNtYTSNiarS/
// SIG // WhtR96MNGHdou9g2qy8hUNqe8+dfJ04LwpfICXCTqdpc
// SIG // DU6kDZGgtOwUzpFyVC7Oo9tE6VIbP0E8ykrkqsDoOatT
// SIG // zCHQzM9/m+bCzFhqghXuPTbPHMWXBySO8Xu+MS09bty1
// SIG // mUKfS2GVXxxw7hd924vlYYl4x2gbrxF4GpiuxFVHU9mz
// SIG // MtahDkZAxZeSitFTp5lbhTVX0+qTYmEgCscwdyQRTWKD
// SIG // trp7aIIx7mXK3/nVjbI13Iwrb2pyXGCEnPIMlF7AVlIA
// SIG // SMzT+KV93i/XE+Q4qITVRrgThsIbnepaON2b2wIDAQAB
// SIG // o4IBgzCCAX8wLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vczIuc3ltY2IuY29tMBIGA1UdEwEB
// SIG // /wQIMAYBAf8CAQAwbAYDVR0gBGUwYzBhBgtghkgBhvhF
// SIG // AQcXAzBSMCYGCCsGAQUFBwIBFhpodHRwOi8vd3d3LnN5
// SIG // bWF1dGguY29tL2NwczAoBggrBgEFBQcCAjAcGhpodHRw
// SIG // Oi8vd3d3LnN5bWF1dGguY29tL3JwYTAwBgNVHR8EKTAn
// SIG // MCWgI6Ahhh9odHRwOi8vczEuc3ltY2IuY29tL3BjYTMt
// SIG // ZzUuY3JsMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF
// SIG // BQcDAzAOBgNVHQ8BAf8EBAMCAQYwKQYDVR0RBCIwIKQe
// SIG // MBwxGjAYBgNVBAMTEVN5bWFudGVjUEtJLTEtNTY3MB0G
// SIG // A1UdDgQWBBSWO1PweTOXr32D7y4rzMq3hh5yZjAfBgNV
// SIG // HSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAE4UaHmmpN/egvaSvfh1hU/6d
// SIG // jF4MpnUeeBcj3f3sGgNVOftxlcdlWqeOMNJEWmHbcG/a
// SIG // IQXCLnO6SfHRk/5dyc1eA+CJnj90Htf3OIup1s+7NS8z
// SIG // WKiSVtHITTuC5nmEFvwosLFH8x2iPu6H2aZ/pFalP62E
// SIG // LinefLyoqqM9BAHqupOiDlAiKRdMh+Q6EV/WpCWJmwVr
// SIG // L7TJAUwnewusGQUioGAVP9rJ+01Mj/tyZ3f9J5THujUO
// SIG // iEn+jf0or0oSvQ2zlwXeRAwV+jYrA9zBUAHxoRFdFOXi
// SIG // vSdLVL4rhF4PpsN0BQrvl8OJIrEfd/O9zUPU8UypP7WL
// SIG // hK9k8tAUITCCBZowggOCoAMCAQICCmEZk+QAAAAAABww
// SIG // DQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEpMCcGA1UEAxMgTWljcm9zb2Z0IENvZGUgVmVyaWZp
// SIG // Y2F0aW9uIFJvb3QwHhcNMTEwMjIyMTkyNTE3WhcNMjEw
// SIG // MjIyMTkzNTE3WjCByjELMAkGA1UEBhMCVVMxFzAVBgNV
// SIG // BAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
// SIG // U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykg
// SIG // MjAwNiBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
// SIG // emVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBD
// SIG // bGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRp
// SIG // b24gQXV0aG9yaXR5IC0gRzUwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1nmAMqudLO07c
// SIG // fLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKz
// SIG // j/i5Vbext0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2II
// SIG // PVQT60nKWVSFJuUrjxuf6/WhkcIzSdhDY2pSS9KP6HBR
// SIG // TdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY
// SIG // 5fQGBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9
// SIG // r911kTMZHRxAy3QkGSGT2RT+rCpSx4/VBEnkjWNHiDxp
// SIG // g8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
// SIG // NIeWiu5T6CUVAgMBAAGjgcswgcgwEQYDVR0gBAowCDAG
// SIG // BgRVHSAAMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQD
// SIG // AgGGMB0GA1UdDgQWBBR/02Wnwt3su/AwCfNDOfoCrzMx
// SIG // MzAfBgNVHSMEGDAWgBRi+wohW39DbhHaCVRQa/XSlnHx
// SIG // njBVBgNVHR8ETjBMMEqgSKBGhkRodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNy
// SIG // b3NvZnRDb2RlVmVyaWZSb290LmNybDANBgkqhkiG9w0B
// SIG // AQUFAAOCAgEAgSqCFow0ZyvlA+s0e4yio1CK9FWG8R6M
// SIG // jq597gMZznKVGEitYhH9IP0/RwYBWuLgb4wVLE48alBs
// SIG // Czajz3oNnEK8XPgZ1WDjaebiI0FnjGiDdiuPk6MqtX++
// SIG // WfupybImj8qi84IbmD6RlSeXhmHuW10Ha82GqOJlgKji
// SIG // FeKyviMFaroM80eTTaykjAd5OcBhEjoFDYmj7J9XiYT7
// SIG // 7Mp8R2YUkdi2Dxld5rhKrLxHyHFDluYyIKXcd4b9POOL
// SIG // cdt7mwP8tx0yZOsWUqBDo/ourVmSTnzH8jNCSDhROnw4
// SIG // xxskIihAHhpGHxfbGPfwJzVsuGPZzblkXSulXu/GKbTy
// SIG // x/ghzAS6V/0BtqvGZ/nn05l/9PUi+nL1/f86HEI6ofmA
// SIG // GKXujRzUZp5FAf6q7v/7F48w9/HNKcWd7LXVSQA9hbjL
// SIG // u5M6J2pJwDCuZsn3Iygydvmkg1bISM5alqqgzAzEf7SO
// SIG // l69t41Qnw5+GwNbkcwiXBdvQVGJeA0jC1Z9/p2aM0J2w
// SIG // T9TTmF9Lesl/silS0BKAxw9Uth5nzcagbBEDhNNIdecq
// SIG // /rA7bgo6pmt2mQWj8XdoYTMURwb8U39SvZIUXEokameM
// SIG // r42QqtD2eSEbkyZ8w84evYg4kq5FxhlqSVCzBfiuWTeK
// SIG // aiUDlLFZgVDouoOAtyM19Ha5Zx1ZGK0gjZQxggRMMIIE
// SIG // SAIBATCBkzB/MQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQQIQQTnRy3KPFNE9KaYymhrpPDANBglghkgBZQME
// SIG // AgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3
// SIG // DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsx
// SIG // DjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCDX
// SIG // IKqRcQJiN9o2/A7IcEBdRcpefARDo9mXSVZs3uIUUjAN
// SIG // BgkqhkiG9w0BAQEFAASCAQAPV5wWQXBBLU3M0eU529lt
// SIG // xE6XExtSH/Fx62oUB9KqnhpJ6/KFRfAiSMiRrQrbrdeU
// SIG // 29rnpy04lymAN0nRBYTV/p3j/ALNCsR3tImudL9ladPN
// SIG // XHIqO0ee8YxToros5c4WOgrAaEEbQsFvFEYwCpBQ14ul
// SIG // ZOhVifDUT//GnS5cISH62b1T5lrDH86b2cKu/fQKqXBy
// SIG // qiBATBFKb96G+lxO5dDmHswFf2jsf9/9UXaKCyxrWyxS
// SIG // IVsrG6HH4wC/sIlu+R5IxODIYxyN1ml3jWx7lUQ46MMC
// SIG // WVgHYaFoL2XD9WGMgESavGJaKHqm+49JvYrSy55sMUas
// SIG // XuLDS1rgAiCjoYICCzCCAgcGCSqGSIb3DQEJBjGCAfgw
// SIG // ggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
// SIG // FFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydT
// SIG // eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENB
// SIG // IC0gRzICEA7P9DjI/r81bgTYapgbGlAwCQYFKw4DAhoF
// SIG // AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
// SIG // KoZIhvcNAQkFMQ8XDTE2MDUyNjE0MTM0OFowIwYJKoZI
// SIG // hvcNAQkEMRYEFA4pPzFYM16MQQmGzpC9vD4x08DqMA0G
// SIG // CSqGSIb3DQEBAQUABIIBAHhYQcYHjsTYvmnDmmDlFmDb
// SIG // JGuI7XAynyWt/QhHB4F84kdzIL5onZoIGISjegOK2sMQ
// SIG // tJgw5+n9Afa1own0PNSYqloiBirLrrFDjmiBXA1G6IBM
// SIG // HwLKfE23yd6AD0IYtxZPErsTJ5L7BOB4aoOp/M6XjUKE
// SIG // ODQ6Eq5mpriP70ZrWMoC1GEMwQR06vLb9AstcA2tzh6H
// SIG // e/ulQUhjpId2J0n+mTm81YXKHvK88h4e+sPKAlGeBQWG
// SIG // g7uwGS2KxyTmL+b0mPVFm0qc5GFkb8+cwjBO9uBSFGCM
// SIG // WBIfePkRQLyr74MBvmecoRlzqmHQWiu4dx48AwsLxOEd
// SIG // wbJZUTKYNhk=
// SIG // End signature block
